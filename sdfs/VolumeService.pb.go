// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.20.1
// source: VolumeService.proto

package sdfs

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MessageQueueInfoResponse_MQType int32

const (
	MessageQueueInfoResponse_RabbitMQ MessageQueueInfoResponse_MQType = 0
	MessageQueueInfoResponse_PubSub   MessageQueueInfoResponse_MQType = 1
)

// Enum value maps for MessageQueueInfoResponse_MQType.
var (
	MessageQueueInfoResponse_MQType_name = map[int32]string{
		0: "RabbitMQ",
		1: "PubSub",
	}
	MessageQueueInfoResponse_MQType_value = map[string]int32{
		"RabbitMQ": 0,
		"PubSub":   1,
	}
)

func (x MessageQueueInfoResponse_MQType) Enum() *MessageQueueInfoResponse_MQType {
	p := new(MessageQueueInfoResponse_MQType)
	*p = x
	return p
}

func (x MessageQueueInfoResponse_MQType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageQueueInfoResponse_MQType) Descriptor() protoreflect.EnumDescriptor {
	return file_VolumeService_proto_enumTypes[0].Descriptor()
}

func (MessageQueueInfoResponse_MQType) Type() protoreflect.EnumType {
	return &file_VolumeService_proto_enumTypes[0]
}

func (x MessageQueueInfoResponse_MQType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageQueueInfoResponse_MQType.Descriptor instead.
func (MessageQueueInfoResponse_MQType) EnumDescriptor() ([]byte, []int) {
	return file_VolumeService_proto_rawDescGZIP(), []int{16, 0}
}

// Request payload
type VolumeInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PvolumeID int64 `protobuf:"varint,1,opt,name=pvolumeID,proto3" json:"pvolumeID,omitempty"`
}

func (x *VolumeInfoRequest) Reset() {
	*x = VolumeInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_VolumeService_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeInfoRequest) ProtoMessage() {}

func (x *VolumeInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_VolumeService_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeInfoRequest.ProtoReflect.Descriptor instead.
func (*VolumeInfoRequest) Descriptor() ([]byte, []int) {
	return file_VolumeService_proto_rawDescGZIP(), []int{0}
}

func (x *VolumeInfoRequest) GetPvolumeID() int64 {
	if x != nil {
		return x.PvolumeID
	}
	return 0
}

type ReplicationClient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VolumeID int64  `protobuf:"varint,1,opt,name=volumeID,proto3" json:"volumeID,omitempty"`
	Mtls     bool   `protobuf:"varint,2,opt,name=mtls,proto3" json:"mtls,omitempty"`
	Url      string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	Sequence int64  `protobuf:"varint,4,opt,name=sequence,proto3" json:"sequence,omitempty"`
}

func (x *ReplicationClient) Reset() {
	*x = ReplicationClient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_VolumeService_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicationClient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicationClient) ProtoMessage() {}

func (x *ReplicationClient) ProtoReflect() protoreflect.Message {
	mi := &file_VolumeService_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicationClient.ProtoReflect.Descriptor instead.
func (*ReplicationClient) Descriptor() ([]byte, []int) {
	return file_VolumeService_proto_rawDescGZIP(), []int{1}
}

func (x *ReplicationClient) GetVolumeID() int64 {
	if x != nil {
		return x.VolumeID
	}
	return 0
}

func (x *ReplicationClient) GetMtls() bool {
	if x != nil {
		return x.Mtls
	}
	return false
}

func (x *ReplicationClient) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ReplicationClient) GetSequence() int64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

type VolumeInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path                string                      `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Name                string                      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	CurrentSize         int64                       `protobuf:"varint,3,opt,name=currentSize,proto3" json:"currentSize,omitempty"`
	Capactity           int64                       `protobuf:"varint,4,opt,name=capactity,proto3" json:"capactity,omitempty"`
	MaxPercentageFull   float64                     `protobuf:"fixed64,5,opt,name=maxPercentageFull,proto3" json:"maxPercentageFull,omitempty"`
	DuplicateBytes      int64                       `protobuf:"varint,6,opt,name=duplicateBytes,proto3" json:"duplicateBytes,omitempty"`
	ReadBytes           float64                     `protobuf:"fixed64,7,opt,name=readBytes,proto3" json:"readBytes,omitempty"`
	WriteBytes          int64                       `protobuf:"varint,8,opt,name=writeBytes,proto3" json:"writeBytes,omitempty"`
	SerialNumber        int64                       `protobuf:"varint,9,opt,name=serialNumber,proto3" json:"serialNumber,omitempty"`
	DseSize             int64                       `protobuf:"varint,10,opt,name=dseSize,proto3" json:"dseSize,omitempty"`
	DseCompSize         int64                       `protobuf:"varint,11,opt,name=dseCompSize,proto3" json:"dseCompSize,omitempty"`
	ReadOps             float64                     `protobuf:"fixed64,12,opt,name=readOps,proto3" json:"readOps,omitempty"`
	WriteOps            float64                     `protobuf:"fixed64,13,opt,name=writeOps,proto3" json:"writeOps,omitempty"`
	ReadErrors          int64                       `protobuf:"varint,14,opt,name=readErrors,proto3" json:"readErrors,omitempty"`
	WriteErrors         int64                       `protobuf:"varint,15,opt,name=writeErrors,proto3" json:"writeErrors,omitempty"`
	Files               int64                       `protobuf:"varint,16,opt,name=files,proto3" json:"files,omitempty"`
	ClosedGracefully    bool                        `protobuf:"varint,17,opt,name=closedGracefully,proto3" json:"closedGracefully,omitempty"`
	AllowExternalLinks  bool                        `protobuf:"varint,18,opt,name=allowExternalLinks,proto3" json:"allowExternalLinks,omitempty"`
	UsePerfMon          bool                        `protobuf:"varint,19,opt,name=usePerfMon,proto3" json:"usePerfMon,omitempty"`
	ClusterId           string                      `protobuf:"bytes,20,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	VolumeClustered     bool                        `protobuf:"varint,21,opt,name=VolumeClustered,proto3" json:"VolumeClustered,omitempty"`
	ReadTimeoutSeconds  int32                       `protobuf:"varint,22,opt,name=readTimeoutSeconds,proto3" json:"readTimeoutSeconds,omitempty"`
	WriteTimeoutSeconds int32                       `protobuf:"varint,23,opt,name=writeTimeoutSeconds,proto3" json:"writeTimeoutSeconds,omitempty"`
	CompressedMetaData  bool                        `protobuf:"varint,24,opt,name=compressedMetaData,proto3" json:"compressedMetaData,omitempty"`
	SyncFiles           bool                        `protobuf:"varint,25,opt,name=syncFiles,proto3" json:"syncFiles,omitempty"`
	MaxPageSize         int64                       `protobuf:"varint,26,opt,name=maxPageSize,proto3" json:"maxPageSize,omitempty"`
	MessageQueue        []*MessageQueueInfoResponse `protobuf:"bytes,27,rep,name=messageQueue,proto3" json:"messageQueue,omitempty"`
	PerfMonFile         string                      `protobuf:"bytes,28,opt,name=perfMonFile,proto3" json:"perfMonFile,omitempty"`
	Offline             bool                        `protobuf:"varint,29,opt,name=offline,proto3" json:"offline,omitempty"`
	Error               string                      `protobuf:"bytes,30,opt,name=error,proto3" json:"error,omitempty"`
	ErrorCode           ErrorCodes                  `protobuf:"varint,31,opt,name=errorCode,proto3,enum=org.opendedup.grpc.ErrorCodes" json:"errorCode,omitempty"`
	EvtPath             string                      `protobuf:"bytes,32,opt,name=evtPath,proto3" json:"evtPath,omitempty"`
	ReplPath            string                      `protobuf:"bytes,33,opt,name=replPath,proto3" json:"replPath,omitempty"`
	ReplEnabled         bool                        `protobuf:"varint,34,opt,name=replEnabled,proto3" json:"replEnabled,omitempty"`
	ReplicationClient   []*ReplicationClient        `protobuf:"bytes,35,rep,name=replicationClient,proto3" json:"replicationClient,omitempty"`
}

func (x *VolumeInfoResponse) Reset() {
	*x = VolumeInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_VolumeService_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeInfoResponse) ProtoMessage() {}

func (x *VolumeInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_VolumeService_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeInfoResponse.ProtoReflect.Descriptor instead.
func (*VolumeInfoResponse) Descriptor() ([]byte, []int) {
	return file_VolumeService_proto_rawDescGZIP(), []int{2}
}

func (x *VolumeInfoResponse) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *VolumeInfoResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VolumeInfoResponse) GetCurrentSize() int64 {
	if x != nil {
		return x.CurrentSize
	}
	return 0
}

func (x *VolumeInfoResponse) GetCapactity() int64 {
	if x != nil {
		return x.Capactity
	}
	return 0
}

func (x *VolumeInfoResponse) GetMaxPercentageFull() float64 {
	if x != nil {
		return x.MaxPercentageFull
	}
	return 0
}

func (x *VolumeInfoResponse) GetDuplicateBytes() int64 {
	if x != nil {
		return x.DuplicateBytes
	}
	return 0
}

func (x *VolumeInfoResponse) GetReadBytes() float64 {
	if x != nil {
		return x.ReadBytes
	}
	return 0
}

func (x *VolumeInfoResponse) GetWriteBytes() int64 {
	if x != nil {
		return x.WriteBytes
	}
	return 0
}

func (x *VolumeInfoResponse) GetSerialNumber() int64 {
	if x != nil {
		return x.SerialNumber
	}
	return 0
}

func (x *VolumeInfoResponse) GetDseSize() int64 {
	if x != nil {
		return x.DseSize
	}
	return 0
}

func (x *VolumeInfoResponse) GetDseCompSize() int64 {
	if x != nil {
		return x.DseCompSize
	}
	return 0
}

func (x *VolumeInfoResponse) GetReadOps() float64 {
	if x != nil {
		return x.ReadOps
	}
	return 0
}

func (x *VolumeInfoResponse) GetWriteOps() float64 {
	if x != nil {
		return x.WriteOps
	}
	return 0
}

func (x *VolumeInfoResponse) GetReadErrors() int64 {
	if x != nil {
		return x.ReadErrors
	}
	return 0
}

func (x *VolumeInfoResponse) GetWriteErrors() int64 {
	if x != nil {
		return x.WriteErrors
	}
	return 0
}

func (x *VolumeInfoResponse) GetFiles() int64 {
	if x != nil {
		return x.Files
	}
	return 0
}

func (x *VolumeInfoResponse) GetClosedGracefully() bool {
	if x != nil {
		return x.ClosedGracefully
	}
	return false
}

func (x *VolumeInfoResponse) GetAllowExternalLinks() bool {
	if x != nil {
		return x.AllowExternalLinks
	}
	return false
}

func (x *VolumeInfoResponse) GetUsePerfMon() bool {
	if x != nil {
		return x.UsePerfMon
	}
	return false
}

func (x *VolumeInfoResponse) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *VolumeInfoResponse) GetVolumeClustered() bool {
	if x != nil {
		return x.VolumeClustered
	}
	return false
}

func (x *VolumeInfoResponse) GetReadTimeoutSeconds() int32 {
	if x != nil {
		return x.ReadTimeoutSeconds
	}
	return 0
}

func (x *VolumeInfoResponse) GetWriteTimeoutSeconds() int32 {
	if x != nil {
		return x.WriteTimeoutSeconds
	}
	return 0
}

func (x *VolumeInfoResponse) GetCompressedMetaData() bool {
	if x != nil {
		return x.CompressedMetaData
	}
	return false
}

func (x *VolumeInfoResponse) GetSyncFiles() bool {
	if x != nil {
		return x.SyncFiles
	}
	return false
}

func (x *VolumeInfoResponse) GetMaxPageSize() int64 {
	if x != nil {
		return x.MaxPageSize
	}
	return 0
}

func (x *VolumeInfoResponse) GetMessageQueue() []*MessageQueueInfoResponse {
	if x != nil {
		return x.MessageQueue
	}
	return nil
}

func (x *VolumeInfoResponse) GetPerfMonFile() string {
	if x != nil {
		return x.PerfMonFile
	}
	return ""
}

func (x *VolumeInfoResponse) GetOffline() bool {
	if x != nil {
		return x.Offline
	}
	return false
}

func (x *VolumeInfoResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *VolumeInfoResponse) GetErrorCode() ErrorCodes {
	if x != nil {
		return x.ErrorCode
	}
	return ErrorCodes_NOERR
}

func (x *VolumeInfoResponse) GetEvtPath() string {
	if x != nil {
		return x.EvtPath
	}
	return ""
}

func (x *VolumeInfoResponse) GetReplPath() string {
	if x != nil {
		return x.ReplPath
	}
	return ""
}

func (x *VolumeInfoResponse) GetReplEnabled() bool {
	if x != nil {
		return x.ReplEnabled
	}
	return false
}

func (x *VolumeInfoResponse) GetReplicationClient() []*ReplicationClient {
	if x != nil {
		return x.ReplicationClient
	}
	return nil
}

type SystemInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActiveThreads   int32   `protobuf:"varint,1,opt,name=activeThreads,proto3" json:"activeThreads,omitempty"`
	BlocksStored    int32   `protobuf:"varint,2,opt,name=blocksStored,proto3" json:"blocksStored,omitempty"`
	MaxBlocksStored int32   `protobuf:"varint,3,opt,name=maxBlocksStored,proto3" json:"maxBlocksStored,omitempty"`
	TotalSpace      int64   `protobuf:"varint,4,opt,name=totalSpace,proto3" json:"totalSpace,omitempty"`
	FreeSpace       int64   `protobuf:"varint,5,opt,name=freeSpace,proto3" json:"freeSpace,omitempty"`
	TotalCpuLoad    float64 `protobuf:"fixed64,6,opt,name=totalCpuLoad,proto3" json:"totalCpuLoad,omitempty"`
	CpuCores        float64 `protobuf:"fixed64,7,opt,name=cpuCores,proto3" json:"cpuCores,omitempty"`
	SdfsCpuLoad     float64 `protobuf:"fixed64,8,opt,name=sdfsCpuLoad,proto3" json:"sdfsCpuLoad,omitempty"`
	TotalMemory     float64 `protobuf:"fixed64,10,opt,name=totalMemory,proto3" json:"totalMemory,omitempty"`
	FreeMemory      float64 `protobuf:"fixed64,11,opt,name=freeMemory,proto3" json:"freeMemory,omitempty"`
}

func (x *SystemInfo) Reset() {
	*x = SystemInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_VolumeService_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemInfo) ProtoMessage() {}

func (x *SystemInfo) ProtoReflect() protoreflect.Message {
	mi := &file_VolumeService_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemInfo.ProtoReflect.Descriptor instead.
func (*SystemInfo) Descriptor() ([]byte, []int) {
	return file_VolumeService_proto_rawDescGZIP(), []int{3}
}

func (x *SystemInfo) GetActiveThreads() int32 {
	if x != nil {
		return x.ActiveThreads
	}
	return 0
}

func (x *SystemInfo) GetBlocksStored() int32 {
	if x != nil {
		return x.BlocksStored
	}
	return 0
}

func (x *SystemInfo) GetMaxBlocksStored() int32 {
	if x != nil {
		return x.MaxBlocksStored
	}
	return 0
}

func (x *SystemInfo) GetTotalSpace() int64 {
	if x != nil {
		return x.TotalSpace
	}
	return 0
}

func (x *SystemInfo) GetFreeSpace() int64 {
	if x != nil {
		return x.FreeSpace
	}
	return 0
}

func (x *SystemInfo) GetTotalCpuLoad() float64 {
	if x != nil {
		return x.TotalCpuLoad
	}
	return 0
}

func (x *SystemInfo) GetCpuCores() float64 {
	if x != nil {
		return x.CpuCores
	}
	return 0
}

func (x *SystemInfo) GetSdfsCpuLoad() float64 {
	if x != nil {
		return x.SdfsCpuLoad
	}
	return 0
}

func (x *SystemInfo) GetTotalMemory() float64 {
	if x != nil {
		return x.TotalMemory
	}
	return 0
}

func (x *SystemInfo) GetFreeMemory() float64 {
	if x != nil {
		return x.FreeMemory
	}
	return 0
}

type SystemInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PvolumeID int64 `protobuf:"varint,1,opt,name=pvolumeID,proto3" json:"pvolumeID,omitempty"`
}

func (x *SystemInfoRequest) Reset() {
	*x = SystemInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_VolumeService_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemInfoRequest) ProtoMessage() {}

func (x *SystemInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_VolumeService_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemInfoRequest.ProtoReflect.Descriptor instead.
func (*SystemInfoRequest) Descriptor() ([]byte, []int) {
	return file_VolumeService_proto_rawDescGZIP(), []int{4}
}

func (x *SystemInfoRequest) GetPvolumeID() int64 {
	if x != nil {
		return x.PvolumeID
	}
	return 0
}

type ConnectedVolumeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Local          bool   `protobuf:"varint,2,opt,name=local,proto3" json:"local,omitempty"`
	Hostname       string `protobuf:"bytes,3,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Port           int32  `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	Size           int64  `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
	CompressedSize int64  `protobuf:"varint,6,opt,name=compressedSize,proto3" json:"compressedSize,omitempty"`
	SdfsVersion    string `protobuf:"bytes,7,opt,name=sdfsVersion,proto3" json:"sdfsVersion,omitempty"`
	LastUpdate     int64  `protobuf:"varint,8,opt,name=lastUpdate,proto3" json:"lastUpdate,omitempty"`
	Version        int32  `protobuf:"varint,9,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *ConnectedVolumeInfo) Reset() {
	*x = ConnectedVolumeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_VolumeService_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectedVolumeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectedVolumeInfo) ProtoMessage() {}

func (x *ConnectedVolumeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_VolumeService_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectedVolumeInfo.ProtoReflect.Descriptor instead.
func (*ConnectedVolumeInfo) Descriptor() ([]byte, []int) {
	return file_VolumeService_proto_rawDescGZIP(), []int{5}
}

func (x *ConnectedVolumeInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ConnectedVolumeInfo) GetLocal() bool {
	if x != nil {
		return x.Local
	}
	return false
}

func (x *ConnectedVolumeInfo) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *ConnectedVolumeInfo) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *ConnectedVolumeInfo) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ConnectedVolumeInfo) GetCompressedSize() int64 {
	if x != nil {
		return x.CompressedSize
	}
	return 0
}

func (x *ConnectedVolumeInfo) GetSdfsVersion() string {
	if x != nil {
		return x.SdfsVersion
	}
	return ""
}

func (x *ConnectedVolumeInfo) GetLastUpdate() int64 {
	if x != nil {
		return x.LastUpdate
	}
	return 0
}

func (x *ConnectedVolumeInfo) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type GCScheduleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PvolumeID int64 `protobuf:"varint,1,opt,name=pvolumeID,proto3" json:"pvolumeID,omitempty"`
}

func (x *GCScheduleRequest) Reset() {
	*x = GCScheduleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_VolumeService_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCScheduleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCScheduleRequest) ProtoMessage() {}

func (x *GCScheduleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_VolumeService_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCScheduleRequest.ProtoReflect.Descriptor instead.
func (*GCScheduleRequest) Descriptor() ([]byte, []int) {
	return file_VolumeService_proto_rawDescGZIP(), []int{6}
}

func (x *GCScheduleRequest) GetPvolumeID() int64 {
	if x != nil {
		return x.PvolumeID
	}
	return 0
}

type GCScheduleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Schedule  string     `protobuf:"bytes,1,opt,name=schedule,proto3" json:"schedule,omitempty"`
	Error     string     `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	ErrorCode ErrorCodes `protobuf:"varint,3,opt,name=errorCode,proto3,enum=org.opendedup.grpc.ErrorCodes" json:"errorCode,omitempty"`
}

func (x *GCScheduleResponse) Reset() {
	*x = GCScheduleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_VolumeService_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCScheduleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCScheduleResponse) ProtoMessage() {}

func (x *GCScheduleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_VolumeService_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCScheduleResponse.ProtoReflect.Descriptor instead.
func (*GCScheduleResponse) Descriptor() ([]byte, []int) {
	return file_VolumeService_proto_rawDescGZIP(), []int{7}
}

func (x *GCScheduleResponse) GetSchedule() string {
	if x != nil {
		return x.Schedule
	}
	return ""
}

func (x *GCScheduleResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *GCScheduleResponse) GetErrorCode() ErrorCodes {
	if x != nil {
		return x.ErrorCode
	}
	return ErrorCodes_NOERR
}

type CloudVolumesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PvolumeID int64 `protobuf:"varint,1,opt,name=pvolumeID,proto3" json:"pvolumeID,omitempty"`
}

func (x *CloudVolumesRequest) Reset() {
	*x = CloudVolumesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_VolumeService_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudVolumesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudVolumesRequest) ProtoMessage() {}

func (x *CloudVolumesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_VolumeService_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudVolumesRequest.ProtoReflect.Descriptor instead.
func (*CloudVolumesRequest) Descriptor() ([]byte, []int) {
	return file_VolumeService_proto_rawDescGZIP(), []int{8}
}

func (x *CloudVolumesRequest) GetPvolumeID() int64 {
	if x != nil {
		return x.PvolumeID
	}
	return 0
}

type CloudVolumesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VolumeInfo []*ConnectedVolumeInfo `protobuf:"bytes,1,rep,name=volumeInfo,proto3" json:"volumeInfo,omitempty"`
	Error      string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	ErrorCode  ErrorCodes             `protobuf:"varint,3,opt,name=errorCode,proto3,enum=org.opendedup.grpc.ErrorCodes" json:"errorCode,omitempty"`
}

func (x *CloudVolumesResponse) Reset() {
	*x = CloudVolumesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_VolumeService_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudVolumesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudVolumesResponse) ProtoMessage() {}

func (x *CloudVolumesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_VolumeService_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudVolumesResponse.ProtoReflect.Descriptor instead.
func (*CloudVolumesResponse) Descriptor() ([]byte, []int) {
	return file_VolumeService_proto_rawDescGZIP(), []int{9}
}

func (x *CloudVolumesResponse) GetVolumeInfo() []*ConnectedVolumeInfo {
	if x != nil {
		return x.VolumeInfo
	}
	return nil
}

func (x *CloudVolumesResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *CloudVolumesResponse) GetErrorCode() ErrorCodes {
	if x != nil {
		return x.ErrorCode
	}
	return ErrorCodes_NOERR
}

type SystemInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info      *SystemInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	Error     string      `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	ErrorCode ErrorCodes  `protobuf:"varint,3,opt,name=errorCode,proto3,enum=org.opendedup.grpc.ErrorCodes" json:"errorCode,omitempty"`
}

func (x *SystemInfoResponse) Reset() {
	*x = SystemInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_VolumeService_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemInfoResponse) ProtoMessage() {}

func (x *SystemInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_VolumeService_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemInfoResponse.ProtoReflect.Descriptor instead.
func (*SystemInfoResponse) Descriptor() ([]byte, []int) {
	return file_VolumeService_proto_rawDescGZIP(), []int{10}
}

func (x *SystemInfoResponse) GetInfo() *SystemInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *SystemInfoResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *SystemInfoResponse) GetErrorCode() ErrorCodes {
	if x != nil {
		return x.ErrorCode
	}
	return ErrorCodes_NOERR
}

type DSEInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxSize            int64   `protobuf:"varint,1,opt,name=maxSize,proto3" json:"maxSize,omitempty"`
	CurrentSize        int64   `protobuf:"varint,2,opt,name=currentSize,proto3" json:"currentSize,omitempty"`
	Entries            int64   `protobuf:"varint,3,opt,name=entries,proto3" json:"entries,omitempty"`
	CompressedSize     int64   `protobuf:"varint,4,opt,name=compressedSize,proto3" json:"compressedSize,omitempty"`
	FreeBlocks         int64   `protobuf:"varint,5,opt,name=freeBlocks,proto3" json:"freeBlocks,omitempty"`
	PageSize           int64   `protobuf:"varint,6,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	StorageType        string  `protobuf:"bytes,7,opt,name=storageType,proto3" json:"storageType,omitempty"`
	ListenPort         int32   `protobuf:"varint,8,opt,name=listenPort,proto3" json:"listenPort,omitempty"`
	ListenHost         string  `protobuf:"bytes,9,opt,name=listenHost,proto3" json:"listenHost,omitempty"`
	ReadSpeed          int32   `protobuf:"varint,10,opt,name=readSpeed,proto3" json:"readSpeed,omitempty"`
	WriteSpeed         int32   `protobuf:"varint,11,opt,name=writeSpeed,proto3" json:"writeSpeed,omitempty"`
	CacheSize          int64   `protobuf:"varint,12,opt,name=cacheSize,proto3" json:"cacheSize,omitempty"`
	MaxCacheSize       int64   `protobuf:"varint,13,opt,name=maxCacheSize,proto3" json:"maxCacheSize,omitempty"`
	ListenEncrypted    bool    `protobuf:"varint,14,opt,name=listenEncrypted,proto3" json:"listenEncrypted,omitempty"`
	EncryptionKey      string  `protobuf:"bytes,15,opt,name=encryptionKey,proto3" json:"encryptionKey,omitempty"`
	EncryptionIV       string  `protobuf:"bytes,16,opt,name=encryptionIV,proto3" json:"encryptionIV,omitempty"`
	CloudAccessKey     string  `protobuf:"bytes,17,opt,name=cloudAccessKey,proto3" json:"cloudAccessKey,omitempty"`
	CloudSecretKey     string  `protobuf:"bytes,18,opt,name=cloudSecretKey,proto3" json:"cloudSecretKey,omitempty"`
	BucketName         string  `protobuf:"bytes,19,opt,name=bucketName,proto3" json:"bucketName,omitempty"`
	MaxAge             int64   `protobuf:"varint,20,opt,name=maxAge,proto3" json:"maxAge,omitempty"`
	AverageLoadPenalty float64 `protobuf:"fixed64,21,opt,name=averageLoadPenalty,proto3" json:"averageLoadPenalty,omitempty"`
	EvictionCount      int64   `protobuf:"varint,22,opt,name=evictionCount,proto3" json:"evictionCount,omitempty"`
	HitCount           int64   `protobuf:"varint,23,opt,name=hitCount,proto3" json:"hitCount,omitempty"`
	HitRate            float64 `protobuf:"fixed64,24,opt,name=hitRate,proto3" json:"hitRate,omitempty"`
	LoadCount          int64   `protobuf:"varint,25,opt,name=loadCount,proto3" json:"loadCount,omitempty"`
	LoadExceptionCount int64   `protobuf:"varint,26,opt,name=loadExceptionCount,proto3" json:"loadExceptionCount,omitempty"`
	LoadExceptionRate  float64 `protobuf:"fixed64,27,opt,name=loadExceptionRate,proto3" json:"loadExceptionRate,omitempty"`
	LoadSuccessCount   int64   `protobuf:"varint,28,opt,name=loadSuccessCount,proto3" json:"loadSuccessCount,omitempty"`
	MissCount          int64   `protobuf:"varint,29,opt,name=missCount,proto3" json:"missCount,omitempty"`
	MissRate           float64 `protobuf:"fixed64,30,opt,name=missRate,proto3" json:"missRate,omitempty"`
	RequestCount       int64   `protobuf:"varint,31,opt,name=requestCount,proto3" json:"requestCount,omitempty"`
	TotalLoadTime      int64   `protobuf:"varint,32,opt,name=totalLoadTime,proto3" json:"totalLoadTime,omitempty"`
}

func (x *DSEInfo) Reset() {
	*x = DSEInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_VolumeService_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DSEInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DSEInfo) ProtoMessage() {}

func (x *DSEInfo) ProtoReflect() protoreflect.Message {
	mi := &file_VolumeService_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DSEInfo.ProtoReflect.Descriptor instead.
func (*DSEInfo) Descriptor() ([]byte, []int) {
	return file_VolumeService_proto_rawDescGZIP(), []int{11}
}

func (x *DSEInfo) GetMaxSize() int64 {
	if x != nil {
		return x.MaxSize
	}
	return 0
}

func (x *DSEInfo) GetCurrentSize() int64 {
	if x != nil {
		return x.CurrentSize
	}
	return 0
}

func (x *DSEInfo) GetEntries() int64 {
	if x != nil {
		return x.Entries
	}
	return 0
}

func (x *DSEInfo) GetCompressedSize() int64 {
	if x != nil {
		return x.CompressedSize
	}
	return 0
}

func (x *DSEInfo) GetFreeBlocks() int64 {
	if x != nil {
		return x.FreeBlocks
	}
	return 0
}

func (x *DSEInfo) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *DSEInfo) GetStorageType() string {
	if x != nil {
		return x.StorageType
	}
	return ""
}

func (x *DSEInfo) GetListenPort() int32 {
	if x != nil {
		return x.ListenPort
	}
	return 0
}

func (x *DSEInfo) GetListenHost() string {
	if x != nil {
		return x.ListenHost
	}
	return ""
}

func (x *DSEInfo) GetReadSpeed() int32 {
	if x != nil {
		return x.ReadSpeed
	}
	return 0
}

func (x *DSEInfo) GetWriteSpeed() int32 {
	if x != nil {
		return x.WriteSpeed
	}
	return 0
}

func (x *DSEInfo) GetCacheSize() int64 {
	if x != nil {
		return x.CacheSize
	}
	return 0
}

func (x *DSEInfo) GetMaxCacheSize() int64 {
	if x != nil {
		return x.MaxCacheSize
	}
	return 0
}

func (x *DSEInfo) GetListenEncrypted() bool {
	if x != nil {
		return x.ListenEncrypted
	}
	return false
}

func (x *DSEInfo) GetEncryptionKey() string {
	if x != nil {
		return x.EncryptionKey
	}
	return ""
}

func (x *DSEInfo) GetEncryptionIV() string {
	if x != nil {
		return x.EncryptionIV
	}
	return ""
}

func (x *DSEInfo) GetCloudAccessKey() string {
	if x != nil {
		return x.CloudAccessKey
	}
	return ""
}

func (x *DSEInfo) GetCloudSecretKey() string {
	if x != nil {
		return x.CloudSecretKey
	}
	return ""
}

func (x *DSEInfo) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

func (x *DSEInfo) GetMaxAge() int64 {
	if x != nil {
		return x.MaxAge
	}
	return 0
}

func (x *DSEInfo) GetAverageLoadPenalty() float64 {
	if x != nil {
		return x.AverageLoadPenalty
	}
	return 0
}

func (x *DSEInfo) GetEvictionCount() int64 {
	if x != nil {
		return x.EvictionCount
	}
	return 0
}

func (x *DSEInfo) GetHitCount() int64 {
	if x != nil {
		return x.HitCount
	}
	return 0
}

func (x *DSEInfo) GetHitRate() float64 {
	if x != nil {
		return x.HitRate
	}
	return 0
}

func (x *DSEInfo) GetLoadCount() int64 {
	if x != nil {
		return x.LoadCount
	}
	return 0
}

func (x *DSEInfo) GetLoadExceptionCount() int64 {
	if x != nil {
		return x.LoadExceptionCount
	}
	return 0
}

func (x *DSEInfo) GetLoadExceptionRate() float64 {
	if x != nil {
		return x.LoadExceptionRate
	}
	return 0
}

func (x *DSEInfo) GetLoadSuccessCount() int64 {
	if x != nil {
		return x.LoadSuccessCount
	}
	return 0
}

func (x *DSEInfo) GetMissCount() int64 {
	if x != nil {
		return x.MissCount
	}
	return 0
}

func (x *DSEInfo) GetMissRate() float64 {
	if x != nil {
		return x.MissRate
	}
	return 0
}

func (x *DSEInfo) GetRequestCount() int64 {
	if x != nil {
		return x.RequestCount
	}
	return 0
}

func (x *DSEInfo) GetTotalLoadTime() int64 {
	if x != nil {
		return x.TotalLoadTime
	}
	return 0
}

type DSERequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PvolumeID int64 `protobuf:"varint,1,opt,name=pvolumeID,proto3" json:"pvolumeID,omitempty"`
}

func (x *DSERequest) Reset() {
	*x = DSERequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_VolumeService_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DSERequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DSERequest) ProtoMessage() {}

func (x *DSERequest) ProtoReflect() protoreflect.Message {
	mi := &file_VolumeService_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DSERequest.ProtoReflect.Descriptor instead.
func (*DSERequest) Descriptor() ([]byte, []int) {
	return file_VolumeService_proto_rawDescGZIP(), []int{12}
}

func (x *DSERequest) GetPvolumeID() int64 {
	if x != nil {
		return x.PvolumeID
	}
	return 0
}

type DSEResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info      *DSEInfo   `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	Error     string     `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	ErrorCode ErrorCodes `protobuf:"varint,3,opt,name=errorCode,proto3,enum=org.opendedup.grpc.ErrorCodes" json:"errorCode,omitempty"`
}

func (x *DSEResponse) Reset() {
	*x = DSEResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_VolumeService_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DSEResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DSEResponse) ProtoMessage() {}

func (x *DSEResponse) ProtoReflect() protoreflect.Message {
	mi := &file_VolumeService_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DSEResponse.ProtoReflect.Descriptor instead.
func (*DSEResponse) Descriptor() ([]byte, []int) {
	return file_VolumeService_proto_rawDescGZIP(), []int{13}
}

func (x *DSEResponse) GetInfo() *DSEInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *DSEResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *DSEResponse) GetErrorCode() ErrorCodes {
	if x != nil {
		return x.ErrorCode
	}
	return ErrorCodes_NOERR
}

type AuthenticationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username  string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password  string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	PvolumeID int64  `protobuf:"varint,3,opt,name=pvolumeID,proto3" json:"pvolumeID,omitempty"`
}

func (x *AuthenticationRequest) Reset() {
	*x = AuthenticationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_VolumeService_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthenticationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticationRequest) ProtoMessage() {}

func (x *AuthenticationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_VolumeService_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticationRequest.ProtoReflect.Descriptor instead.
func (*AuthenticationRequest) Descriptor() ([]byte, []int) {
	return file_VolumeService_proto_rawDescGZIP(), []int{14}
}

func (x *AuthenticationRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *AuthenticationRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *AuthenticationRequest) GetPvolumeID() int64 {
	if x != nil {
		return x.PvolumeID
	}
	return 0
}

type AuthenticationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token     string     `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Error     string     `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	ErrorCode ErrorCodes `protobuf:"varint,3,opt,name=errorCode,proto3,enum=org.opendedup.grpc.ErrorCodes" json:"errorCode,omitempty"`
}

func (x *AuthenticationResponse) Reset() {
	*x = AuthenticationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_VolumeService_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthenticationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticationResponse) ProtoMessage() {}

func (x *AuthenticationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_VolumeService_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticationResponse.ProtoReflect.Descriptor instead.
func (*AuthenticationResponse) Descriptor() ([]byte, []int) {
	return file_VolumeService_proto_rawDescGZIP(), []int{15}
}

func (x *AuthenticationResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *AuthenticationResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *AuthenticationResponse) GetErrorCode() ErrorCodes {
	if x != nil {
		return x.ErrorCode
	}
	return ErrorCodes_NOERR
}

type MessageQueueInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostName     string                          `protobuf:"bytes,1,opt,name=hostName,proto3" json:"hostName,omitempty"`
	MqType       MessageQueueInfoResponse_MQType `protobuf:"varint,2,opt,name=mqType,proto3,enum=org.opendedup.grpc.MessageQueueInfoResponse_MQType" json:"mqType,omitempty"`
	Port         int32                           `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	Topic        string                          `protobuf:"bytes,4,opt,name=topic,proto3" json:"topic,omitempty"`
	AuthInfo     string                          `protobuf:"bytes,5,opt,name=authInfo,proto3" json:"authInfo,omitempty"`
	SubScription string                          `protobuf:"bytes,6,opt,name=subScription,proto3" json:"subScription,omitempty"`
	Project      string                          `protobuf:"bytes,7,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *MessageQueueInfoResponse) Reset() {
	*x = MessageQueueInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_VolumeService_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageQueueInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageQueueInfoResponse) ProtoMessage() {}

func (x *MessageQueueInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_VolumeService_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageQueueInfoResponse.ProtoReflect.Descriptor instead.
func (*MessageQueueInfoResponse) Descriptor() ([]byte, []int) {
	return file_VolumeService_proto_rawDescGZIP(), []int{16}
}

func (x *MessageQueueInfoResponse) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *MessageQueueInfoResponse) GetMqType() MessageQueueInfoResponse_MQType {
	if x != nil {
		return x.MqType
	}
	return MessageQueueInfoResponse_RabbitMQ
}

func (x *MessageQueueInfoResponse) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *MessageQueueInfoResponse) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *MessageQueueInfoResponse) GetAuthInfo() string {
	if x != nil {
		return x.AuthInfo
	}
	return ""
}

func (x *MessageQueueInfoResponse) GetSubScription() string {
	if x != nil {
		return x.SubScription
	}
	return ""
}

func (x *MessageQueueInfoResponse) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

type CleanStoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Compact   bool  `protobuf:"varint,1,opt,name=compact,proto3" json:"compact,omitempty"`
	PvolumeID int64 `protobuf:"varint,2,opt,name=pvolumeID,proto3" json:"pvolumeID,omitempty"`
}

func (x *CleanStoreRequest) Reset() {
	*x = CleanStoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_VolumeService_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CleanStoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CleanStoreRequest) ProtoMessage() {}

func (x *CleanStoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_VolumeService_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CleanStoreRequest.ProtoReflect.Descriptor instead.
func (*CleanStoreRequest) Descriptor() ([]byte, []int) {
	return file_VolumeService_proto_rawDescGZIP(), []int{17}
}

func (x *CleanStoreRequest) GetCompact() bool {
	if x != nil {
		return x.Compact
	}
	return false
}

func (x *CleanStoreRequest) GetPvolumeID() int64 {
	if x != nil {
		return x.PvolumeID
	}
	return 0
}

type CleanStoreResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventID   string     `protobuf:"bytes,1,opt,name=eventID,proto3" json:"eventID,omitempty"`
	Error     string     `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	ErrorCode ErrorCodes `protobuf:"varint,3,opt,name=errorCode,proto3,enum=org.opendedup.grpc.ErrorCodes" json:"errorCode,omitempty"`
}

func (x *CleanStoreResponse) Reset() {
	*x = CleanStoreResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_VolumeService_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CleanStoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CleanStoreResponse) ProtoMessage() {}

func (x *CleanStoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_VolumeService_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CleanStoreResponse.ProtoReflect.Descriptor instead.
func (*CleanStoreResponse) Descriptor() ([]byte, []int) {
	return file_VolumeService_proto_rawDescGZIP(), []int{18}
}

func (x *CleanStoreResponse) GetEventID() string {
	if x != nil {
		return x.EventID
	}
	return ""
}

func (x *CleanStoreResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *CleanStoreResponse) GetErrorCode() ErrorCodes {
	if x != nil {
		return x.ErrorCode
	}
	return ErrorCodes_NOERR
}

type SetCacheSizeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CacheSize int64 `protobuf:"varint,1,opt,name=cacheSize,proto3" json:"cacheSize,omitempty"`
	PvolumeID int64 `protobuf:"varint,2,opt,name=pvolumeID,proto3" json:"pvolumeID,omitempty"`
}

func (x *SetCacheSizeRequest) Reset() {
	*x = SetCacheSizeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_VolumeService_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetCacheSizeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCacheSizeRequest) ProtoMessage() {}

func (x *SetCacheSizeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_VolumeService_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCacheSizeRequest.ProtoReflect.Descriptor instead.
func (*SetCacheSizeRequest) Descriptor() ([]byte, []int) {
	return file_VolumeService_proto_rawDescGZIP(), []int{19}
}

func (x *SetCacheSizeRequest) GetCacheSize() int64 {
	if x != nil {
		return x.CacheSize
	}
	return 0
}

func (x *SetCacheSizeRequest) GetPvolumeID() int64 {
	if x != nil {
		return x.PvolumeID
	}
	return 0
}

type SetCacheSizeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventID   string     `protobuf:"bytes,1,opt,name=eventID,proto3" json:"eventID,omitempty"`
	Error     string     `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	ErrorCode ErrorCodes `protobuf:"varint,3,opt,name=errorCode,proto3,enum=org.opendedup.grpc.ErrorCodes" json:"errorCode,omitempty"`
}

func (x *SetCacheSizeResponse) Reset() {
	*x = SetCacheSizeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_VolumeService_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetCacheSizeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCacheSizeResponse) ProtoMessage() {}

func (x *SetCacheSizeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_VolumeService_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCacheSizeResponse.ProtoReflect.Descriptor instead.
func (*SetCacheSizeResponse) Descriptor() ([]byte, []int) {
	return file_VolumeService_proto_rawDescGZIP(), []int{20}
}

func (x *SetCacheSizeResponse) GetEventID() string {
	if x != nil {
		return x.EventID
	}
	return ""
}

func (x *SetCacheSizeResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *SetCacheSizeResponse) GetErrorCode() ErrorCodes {
	if x != nil {
		return x.ErrorCode
	}
	return ErrorCodes_NOERR
}

type DeleteCloudVolumeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rmvolume  int64 `protobuf:"varint,1,opt,name=rmvolume,proto3" json:"rmvolume,omitempty"`
	PvolumeID int64 `protobuf:"varint,2,opt,name=pvolumeID,proto3" json:"pvolumeID,omitempty"`
}

func (x *DeleteCloudVolumeRequest) Reset() {
	*x = DeleteCloudVolumeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_VolumeService_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCloudVolumeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCloudVolumeRequest) ProtoMessage() {}

func (x *DeleteCloudVolumeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_VolumeService_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCloudVolumeRequest.ProtoReflect.Descriptor instead.
func (*DeleteCloudVolumeRequest) Descriptor() ([]byte, []int) {
	return file_VolumeService_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteCloudVolumeRequest) GetRmvolume() int64 {
	if x != nil {
		return x.Rmvolume
	}
	return 0
}

func (x *DeleteCloudVolumeRequest) GetPvolumeID() int64 {
	if x != nil {
		return x.PvolumeID
	}
	return 0
}

type DeleteCloudVolumeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventID   string     `protobuf:"bytes,1,opt,name=eventID,proto3" json:"eventID,omitempty"`
	Error     string     `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	ErrorCode ErrorCodes `protobuf:"varint,3,opt,name=errorCode,proto3,enum=org.opendedup.grpc.ErrorCodes" json:"errorCode,omitempty"`
}

func (x *DeleteCloudVolumeResponse) Reset() {
	*x = DeleteCloudVolumeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_VolumeService_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCloudVolumeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCloudVolumeResponse) ProtoMessage() {}

func (x *DeleteCloudVolumeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_VolumeService_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCloudVolumeResponse.ProtoReflect.Descriptor instead.
func (*DeleteCloudVolumeResponse) Descriptor() ([]byte, []int) {
	return file_VolumeService_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteCloudVolumeResponse) GetEventID() string {
	if x != nil {
		return x.EventID
	}
	return ""
}

func (x *DeleteCloudVolumeResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *DeleteCloudVolumeResponse) GetErrorCode() ErrorCodes {
	if x != nil {
		return x.ErrorCode
	}
	return ErrorCodes_NOERR
}

type SetVolumeCapacityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size      int64 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	PvolumeID int64 `protobuf:"varint,2,opt,name=pvolumeID,proto3" json:"pvolumeID,omitempty"`
}

func (x *SetVolumeCapacityRequest) Reset() {
	*x = SetVolumeCapacityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_VolumeService_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetVolumeCapacityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetVolumeCapacityRequest) ProtoMessage() {}

func (x *SetVolumeCapacityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_VolumeService_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetVolumeCapacityRequest.ProtoReflect.Descriptor instead.
func (*SetVolumeCapacityRequest) Descriptor() ([]byte, []int) {
	return file_VolumeService_proto_rawDescGZIP(), []int{23}
}

func (x *SetVolumeCapacityRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *SetVolumeCapacityRequest) GetPvolumeID() int64 {
	if x != nil {
		return x.PvolumeID
	}
	return 0
}

type SetVolumeCapacityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error     string     `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	ErrorCode ErrorCodes `protobuf:"varint,2,opt,name=errorCode,proto3,enum=org.opendedup.grpc.ErrorCodes" json:"errorCode,omitempty"`
}

func (x *SetVolumeCapacityResponse) Reset() {
	*x = SetVolumeCapacityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_VolumeService_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetVolumeCapacityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetVolumeCapacityResponse) ProtoMessage() {}

func (x *SetVolumeCapacityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_VolumeService_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetVolumeCapacityResponse.ProtoReflect.Descriptor instead.
func (*SetVolumeCapacityResponse) Descriptor() ([]byte, []int) {
	return file_VolumeService_proto_rawDescGZIP(), []int{24}
}

func (x *SetVolumeCapacityResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *SetVolumeCapacityResponse) GetErrorCode() ErrorCodes {
	if x != nil {
		return x.ErrorCode
	}
	return ErrorCodes_NOERR
}

type SetPasswordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Password  string `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
	PvolumeID int64  `protobuf:"varint,2,opt,name=pvolumeID,proto3" json:"pvolumeID,omitempty"`
}

func (x *SetPasswordRequest) Reset() {
	*x = SetPasswordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_VolumeService_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPasswordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPasswordRequest) ProtoMessage() {}

func (x *SetPasswordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_VolumeService_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPasswordRequest.ProtoReflect.Descriptor instead.
func (*SetPasswordRequest) Descriptor() ([]byte, []int) {
	return file_VolumeService_proto_rawDescGZIP(), []int{25}
}

func (x *SetPasswordRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *SetPasswordRequest) GetPvolumeID() int64 {
	if x != nil {
		return x.PvolumeID
	}
	return 0
}

type SetPasswordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error     string     `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	ErrorCode ErrorCodes `protobuf:"varint,2,opt,name=errorCode,proto3,enum=org.opendedup.grpc.ErrorCodes" json:"errorCode,omitempty"`
}

func (x *SetPasswordResponse) Reset() {
	*x = SetPasswordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_VolumeService_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPasswordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPasswordResponse) ProtoMessage() {}

func (x *SetPasswordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_VolumeService_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPasswordResponse.ProtoReflect.Descriptor instead.
func (*SetPasswordResponse) Descriptor() ([]byte, []int) {
	return file_VolumeService_proto_rawDescGZIP(), []int{26}
}

func (x *SetPasswordResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *SetPasswordResponse) GetErrorCode() ErrorCodes {
	if x != nil {
		return x.ErrorCode
	}
	return ErrorCodes_NOERR
}

type SpeedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestedSpeed int32 `protobuf:"varint,1,opt,name=requestedSpeed,proto3" json:"requestedSpeed,omitempty"`
	PvolumeID      int64 `protobuf:"varint,2,opt,name=pvolumeID,proto3" json:"pvolumeID,omitempty"`
}

func (x *SpeedRequest) Reset() {
	*x = SpeedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_VolumeService_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpeedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeedRequest) ProtoMessage() {}

func (x *SpeedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_VolumeService_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeedRequest.ProtoReflect.Descriptor instead.
func (*SpeedRequest) Descriptor() ([]byte, []int) {
	return file_VolumeService_proto_rawDescGZIP(), []int{27}
}

func (x *SpeedRequest) GetRequestedSpeed() int32 {
	if x != nil {
		return x.RequestedSpeed
	}
	return 0
}

func (x *SpeedRequest) GetPvolumeID() int64 {
	if x != nil {
		return x.PvolumeID
	}
	return 0
}

type SpeedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventID   string     `protobuf:"bytes,1,opt,name=eventID,proto3" json:"eventID,omitempty"`
	Error     string     `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	ErrorCode ErrorCodes `protobuf:"varint,3,opt,name=errorCode,proto3,enum=org.opendedup.grpc.ErrorCodes" json:"errorCode,omitempty"`
}

func (x *SpeedResponse) Reset() {
	*x = SpeedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_VolumeService_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpeedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeedResponse) ProtoMessage() {}

func (x *SpeedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_VolumeService_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeedResponse.ProtoReflect.Descriptor instead.
func (*SpeedResponse) Descriptor() ([]byte, []int) {
	return file_VolumeService_proto_rawDescGZIP(), []int{28}
}

func (x *SpeedResponse) GetEventID() string {
	if x != nil {
		return x.EventID
	}
	return ""
}

func (x *SpeedResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *SpeedResponse) GetErrorCode() ErrorCodes {
	if x != nil {
		return x.ErrorCode
	}
	return ErrorCodes_NOERR
}

type SyncFromVolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Volumeid  int64 `protobuf:"varint,1,opt,name=volumeid,proto3" json:"volumeid,omitempty"`
	PvolumeID int64 `protobuf:"varint,2,opt,name=pvolumeID,proto3" json:"pvolumeID,omitempty"`
	Overwrite bool  `protobuf:"varint,3,opt,name=overwrite,proto3" json:"overwrite,omitempty"`
}

func (x *SyncFromVolRequest) Reset() {
	*x = SyncFromVolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_VolumeService_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncFromVolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncFromVolRequest) ProtoMessage() {}

func (x *SyncFromVolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_VolumeService_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncFromVolRequest.ProtoReflect.Descriptor instead.
func (*SyncFromVolRequest) Descriptor() ([]byte, []int) {
	return file_VolumeService_proto_rawDescGZIP(), []int{29}
}

func (x *SyncFromVolRequest) GetVolumeid() int64 {
	if x != nil {
		return x.Volumeid
	}
	return 0
}

func (x *SyncFromVolRequest) GetPvolumeID() int64 {
	if x != nil {
		return x.PvolumeID
	}
	return 0
}

func (x *SyncFromVolRequest) GetOverwrite() bool {
	if x != nil {
		return x.Overwrite
	}
	return false
}

type SyncFromVolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventID   string     `protobuf:"bytes,1,opt,name=eventID,proto3" json:"eventID,omitempty"`
	Error     string     `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	ErrorCode ErrorCodes `protobuf:"varint,3,opt,name=errorCode,proto3,enum=org.opendedup.grpc.ErrorCodes" json:"errorCode,omitempty"`
}

func (x *SyncFromVolResponse) Reset() {
	*x = SyncFromVolResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_VolumeService_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncFromVolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncFromVolResponse) ProtoMessage() {}

func (x *SyncFromVolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_VolumeService_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncFromVolResponse.ProtoReflect.Descriptor instead.
func (*SyncFromVolResponse) Descriptor() ([]byte, []int) {
	return file_VolumeService_proto_rawDescGZIP(), []int{30}
}

func (x *SyncFromVolResponse) GetEventID() string {
	if x != nil {
		return x.EventID
	}
	return ""
}

func (x *SyncFromVolResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *SyncFromVolResponse) GetErrorCode() ErrorCodes {
	if x != nil {
		return x.ErrorCode
	}
	return ErrorCodes_NOERR
}

type SyncVolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PvolumeID int64 `protobuf:"varint,1,opt,name=pvolumeID,proto3" json:"pvolumeID,omitempty"`
}

func (x *SyncVolRequest) Reset() {
	*x = SyncVolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_VolumeService_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncVolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncVolRequest) ProtoMessage() {}

func (x *SyncVolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_VolumeService_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncVolRequest.ProtoReflect.Descriptor instead.
func (*SyncVolRequest) Descriptor() ([]byte, []int) {
	return file_VolumeService_proto_rawDescGZIP(), []int{31}
}

func (x *SyncVolRequest) GetPvolumeID() int64 {
	if x != nil {
		return x.PvolumeID
	}
	return 0
}

type SyncVolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventID   string     `protobuf:"bytes,1,opt,name=eventID,proto3" json:"eventID,omitempty"`
	Error     string     `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	ErrorCode ErrorCodes `protobuf:"varint,3,opt,name=errorCode,proto3,enum=org.opendedup.grpc.ErrorCodes" json:"errorCode,omitempty"`
}

func (x *SyncVolResponse) Reset() {
	*x = SyncVolResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_VolumeService_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncVolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncVolResponse) ProtoMessage() {}

func (x *SyncVolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_VolumeService_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncVolResponse.ProtoReflect.Descriptor instead.
func (*SyncVolResponse) Descriptor() ([]byte, []int) {
	return file_VolumeService_proto_rawDescGZIP(), []int{32}
}

func (x *SyncVolResponse) GetEventID() string {
	if x != nil {
		return x.EventID
	}
	return ""
}

func (x *SyncVolResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *SyncVolResponse) GetErrorCode() ErrorCodes {
	if x != nil {
		return x.ErrorCode
	}
	return ErrorCodes_NOERR
}

type SetMaxAgeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxAge    int64 `protobuf:"varint,1,opt,name=maxAge,proto3" json:"maxAge,omitempty"`
	PvolumeID int64 `protobuf:"varint,2,opt,name=pvolumeID,proto3" json:"pvolumeID,omitempty"`
}

func (x *SetMaxAgeRequest) Reset() {
	*x = SetMaxAgeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_VolumeService_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMaxAgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMaxAgeRequest) ProtoMessage() {}

func (x *SetMaxAgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_VolumeService_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMaxAgeRequest.ProtoReflect.Descriptor instead.
func (*SetMaxAgeRequest) Descriptor() ([]byte, []int) {
	return file_VolumeService_proto_rawDescGZIP(), []int{33}
}

func (x *SetMaxAgeRequest) GetMaxAge() int64 {
	if x != nil {
		return x.MaxAge
	}
	return 0
}

func (x *SetMaxAgeRequest) GetPvolumeID() int64 {
	if x != nil {
		return x.PvolumeID
	}
	return 0
}

type SetMaxAgeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error     string     `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	ErrorCode ErrorCodes `protobuf:"varint,2,opt,name=errorCode,proto3,enum=org.opendedup.grpc.ErrorCodes" json:"errorCode,omitempty"`
}

func (x *SetMaxAgeResponse) Reset() {
	*x = SetMaxAgeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_VolumeService_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMaxAgeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMaxAgeResponse) ProtoMessage() {}

func (x *SetMaxAgeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_VolumeService_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMaxAgeResponse.ProtoReflect.Descriptor instead.
func (*SetMaxAgeResponse) Descriptor() ([]byte, []int) {
	return file_VolumeService_proto_rawDescGZIP(), []int{34}
}

func (x *SetMaxAgeResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *SetMaxAgeResponse) GetErrorCode() ErrorCodes {
	if x != nil {
		return x.ErrorCode
	}
	return ErrorCodes_NOERR
}

type ReconcileCloudMetadataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PvolumeID int64 `protobuf:"varint,3,opt,name=pvolumeID,proto3" json:"pvolumeID,omitempty"`
}

func (x *ReconcileCloudMetadataRequest) Reset() {
	*x = ReconcileCloudMetadataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_VolumeService_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReconcileCloudMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReconcileCloudMetadataRequest) ProtoMessage() {}

func (x *ReconcileCloudMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_VolumeService_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReconcileCloudMetadataRequest.ProtoReflect.Descriptor instead.
func (*ReconcileCloudMetadataRequest) Descriptor() ([]byte, []int) {
	return file_VolumeService_proto_rawDescGZIP(), []int{35}
}

func (x *ReconcileCloudMetadataRequest) GetPvolumeID() int64 {
	if x != nil {
		return x.PvolumeID
	}
	return 0
}

type ReconcileCloudMetadataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error     string     `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	ErrorCode ErrorCodes `protobuf:"varint,2,opt,name=errorCode,proto3,enum=org.opendedup.grpc.ErrorCodes" json:"errorCode,omitempty"`
	EventID   string     `protobuf:"bytes,3,opt,name=eventID,proto3" json:"eventID,omitempty"`
}

func (x *ReconcileCloudMetadataResponse) Reset() {
	*x = ReconcileCloudMetadataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_VolumeService_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReconcileCloudMetadataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReconcileCloudMetadataResponse) ProtoMessage() {}

func (x *ReconcileCloudMetadataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_VolumeService_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReconcileCloudMetadataResponse.ProtoReflect.Descriptor instead.
func (*ReconcileCloudMetadataResponse) Descriptor() ([]byte, []int) {
	return file_VolumeService_proto_rawDescGZIP(), []int{36}
}

func (x *ReconcileCloudMetadataResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *ReconcileCloudMetadataResponse) GetErrorCode() ErrorCodes {
	if x != nil {
		return x.ErrorCode
	}
	return ErrorCodes_NOERR
}

func (x *ReconcileCloudMetadataResponse) GetEventID() string {
	if x != nil {
		return x.EventID
	}
	return ""
}

var File_VolumeService_proto protoreflect.FileDescriptor

var file_VolumeService_proto_rawDesc = []byte{
	0x0a, 0x13, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x1a, 0x0e, 0x53, 0x68, 0x75, 0x74, 0x64,
	0x6f, 0x77, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x46, 0x69, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x31, 0x0a, 0x11, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x70, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x44, 0x22, 0x71, 0x0a, 0x11,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x44, 0x12, 0x12, 0x0a,
	0x04, 0x6d, 0x74, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6d, 0x74, 0x6c,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x22,
	0xa3, 0x0a, 0x0a, 0x12, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x70, 0x61, 0x63, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x61, 0x70, 0x61, 0x63, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2c,
	0x0a, 0x11, 0x6d, 0x61, 0x78, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x46,
	0x75, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x46, 0x75, 0x6c, 0x6c, 0x12, 0x26, 0x0a, 0x0e,
	0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x72, 0x65, 0x61, 0x64, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x73, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x64, 0x73, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x70, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x07, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x70, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x4f, 0x70, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x4f, 0x70, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x64,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65,
	0x61, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x47, 0x72, 0x61, 0x63, 0x65, 0x66,
	0x75, 0x6c, 0x6c, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x64, 0x47, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x12, 0x2e, 0x0a, 0x12,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x6e,
	0x6b, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x45,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x75, 0x73, 0x65, 0x50, 0x65, 0x72, 0x66, 0x4d, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x75, 0x73, 0x65, 0x50, 0x65, 0x72, 0x66, 0x4d, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x12, 0x72, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x77, 0x72, 0x69, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x13, 0x77, 0x72, 0x69, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x4d, 0x65,
	0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x79, 0x6e, 0x63, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x79, 0x6e, 0x63, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x50, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x66,
	0x4d, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x65, 0x72, 0x66, 0x4d, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x66,
	0x66, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6f, 0x66, 0x66,
	0x6c, 0x69, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x09, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x74, 0x50,
	0x61, 0x74, 0x68, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x74, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x12, 0x20,
	0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x22, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x53, 0x0a, 0x11, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x23, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x52, 0x11, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x22, 0xe2, 0x02, 0x0a, 0x0a, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x12, 0x28,
	0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x53, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x65,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x72, 0x65,
	0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43,
	0x70, 0x75, 0x4c, 0x6f, 0x61, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x43, 0x70, 0x75, 0x4c, 0x6f, 0x61, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x70,
	0x75, 0x43, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x63, 0x70,
	0x75, 0x43, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x64, 0x66, 0x73, 0x43, 0x70,
	0x75, 0x4c, 0x6f, 0x61, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x73, 0x64, 0x66,
	0x73, 0x43, 0x70, 0x75, 0x4c, 0x6f, 0x61, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x72,
	0x65, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a,
	0x66, 0x72, 0x65, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x22, 0x31, 0x0a, 0x11, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x70, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x44, 0x22, 0x83, 0x02,
	0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x68,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x64, 0x66, 0x73, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x64,
	0x66, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x61, 0x73,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c,
	0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x31, 0x0a, 0x11, 0x47, 0x43, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x49, 0x44, 0x22, 0x84, 0x01, 0x0a, 0x12, 0x47, 0x43, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x3c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x73, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x33, 0x0a,
	0x13, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x49, 0x44, 0x22, 0xb3, 0x01, 0x0a, 0x14, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0a, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x09, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x9c, 0x01, 0x0a, 0x12, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x32, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x09, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xd9, 0x08, 0x0a, 0x07, 0x44, 0x53, 0x45, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x72, 0x65, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x72, 0x65, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x48, 0x6f, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x61, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x61, 0x63, 0x68, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x63, 0x61, 0x63, 0x68, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d,
	0x61, 0x78, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x28, 0x0a, 0x0f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12,
	0x22, 0x0a, 0x0c, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x56, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x56, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x4b, 0x65, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x4b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x41, 0x67, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x41, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x61,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74,
	0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x4c, 0x6f, 0x61, 0x64, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x65,
	0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x65, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x68, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x68, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07,
	0x68, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x61, 0x64, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x6f, 0x61, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x78, 0x63,
	0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x12, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x78, 0x63,
	0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x11, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6c,
	0x6f, 0x61, 0x64, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x6d, 0x69, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x6d, 0x69, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x6d, 0x69, 0x73, 0x73, 0x52, 0x61, 0x74, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x6d, 0x69, 0x73, 0x73, 0x52, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a,
	0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x6f, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x6f, 0x61, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x2a, 0x0a, 0x0a, 0x44, 0x53, 0x45, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x44, 0x22,
	0x92, 0x01, 0x0a, 0x0b, 0x44, 0x53, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2f, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x44, 0x53, 0x45, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0x6d, 0x0a, 0x15, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x49, 0x44, 0x22, 0x82, 0x01, 0x0a, 0x16, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x09, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xab, 0x02, 0x0a, 0x18, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x4b, 0x0a, 0x06, 0x6d, 0x71, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x33, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75,
	0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x4d, 0x51, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x6d, 0x71, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x68,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x22, 0x22, 0x0a, 0x06, 0x4d, 0x51, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08,
	0x52, 0x61, 0x62, 0x62, 0x69, 0x74, 0x4d, 0x51, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x75,
	0x62, 0x53, 0x75, 0x62, 0x10, 0x01, 0x22, 0x4b, 0x0a, 0x11, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x49, 0x44, 0x22, 0x82, 0x01, 0x0a, 0x12, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x09, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x51, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x61, 0x63, 0x68, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x63, 0x61, 0x63, 0x68, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x70, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x44, 0x22, 0x84, 0x01, 0x0a, 0x14,
	0x53, 0x65, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0x54, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x6d, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x72, 0x6d, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x44, 0x22, 0x89, 0x01, 0x0a, 0x19, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0x4c, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x49, 0x44, 0x22, 0x6f, 0x0a, 0x19, 0x53, 0x65, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0x4e, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x49, 0x44, 0x22, 0x69, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x3c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x73, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x54,
	0x0a, 0x0c, 0x53, 0x70, 0x65, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26,
	0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x49, 0x44, 0x22, 0x7d, 0x0a, 0x0d, 0x53, 0x70, 0x65, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0x6c, 0x0a, 0x12, 0x53, 0x79, 0x6e, 0x63, 0x46, 0x72, 0x6f, 0x6d, 0x56,
	0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x22, 0x83, 0x01, 0x0a, 0x13, 0x53, 0x79, 0x6e, 0x63, 0x46, 0x72, 0x6f, 0x6d, 0x56, 0x6f,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x09, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x2e, 0x0a, 0x0e, 0x53, 0x79, 0x6e, 0x63, 0x56,
	0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x44, 0x22, 0x7f, 0x0a, 0x0f, 0x53, 0x79, 0x6e, 0x63, 0x56,
	0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x09, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x48, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x4d,
	0x61, 0x78, 0x41, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x61, 0x78, 0x41, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x61,
	0x78, 0x41, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x49, 0x44, 0x22, 0x67, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x4d, 0x61, 0x78, 0x41, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3c, 0x0a,
	0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x73,
	0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x3d, 0x0a, 0x1d, 0x52,
	0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x70, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x44, 0x22, 0x8e, 0x01, 0x0a, 0x1e, 0x52,
	0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x32, 0xf8, 0x0d, 0x0a, 0x0d,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x69, 0x0a,
	0x10, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x29, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75,
	0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x26, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x0e, 0x53, 0x68, 0x75, 0x74,
	0x64, 0x6f, 0x77, 0x6e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x23, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x24, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x0a, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x12, 0x25, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x43, 0x6c, 0x65, 0x61, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x70, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x2c, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x07, 0x44, 0x53, 0x45, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x53, 0x45, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1f, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x53, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x5b, 0x0a, 0x0a, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a,
	0x11, 0x53, 0x65, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x12, 0x2c, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2d, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x68, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x12, 0x27, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x28, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x0d, 0x47, 0x65, 0x74,
	0x47, 0x43, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x25, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x47, 0x43, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x26, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75,
	0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x43, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x0c, 0x53, 0x65, 0x74,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x27, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53,
	0x65, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x0b,
	0x53, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x26, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x53, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x0c,
	0x53, 0x65, 0x74, 0x52, 0x65, 0x61, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x20, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x53, 0x70, 0x65, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x53, 0x70, 0x65, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x54, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x53, 0x70, 0x65,
	0x65, 0x64, 0x12, 0x20, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x70, 0x65, 0x65, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x70, 0x65, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x13, 0x53, 0x79, 0x6e, 0x63, 0x46,
	0x72, 0x6f, 0x6d, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x26,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x46, 0x72, 0x6f, 0x6d, 0x56, 0x6f, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x79, 0x6e, 0x63,
	0x46, 0x72, 0x6f, 0x6d, 0x56, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x5a, 0x0a, 0x0f, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x12, 0x22, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x56, 0x6f, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x79, 0x6e, 0x63,
	0x56, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x09, 0x53,
	0x65, 0x74, 0x4d, 0x61, 0x78, 0x41, 0x67, 0x65, 0x12, 0x24, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65,
	0x74, 0x4d, 0x61, 0x78, 0x41, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x61, 0x78, 0x41, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7f, 0x0a, 0x16, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69,
	0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x65, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x30, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2f, 0x73,
	0x64, 0x66, 0x73, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2d, 0x67, 0x6f, 0x2f, 0x73, 0x64,
	0x66, 0x73, 0x2f, 0x3b, 0x73, 0x64, 0x66, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_VolumeService_proto_rawDescOnce sync.Once
	file_VolumeService_proto_rawDescData = file_VolumeService_proto_rawDesc
)

func file_VolumeService_proto_rawDescGZIP() []byte {
	file_VolumeService_proto_rawDescOnce.Do(func() {
		file_VolumeService_proto_rawDescData = protoimpl.X.CompressGZIP(file_VolumeService_proto_rawDescData)
	})
	return file_VolumeService_proto_rawDescData
}

var file_VolumeService_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_VolumeService_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_VolumeService_proto_goTypes = []interface{}{
	(MessageQueueInfoResponse_MQType)(0),   // 0: org.opendedup.grpc.MessageQueueInfoResponse.MQType
	(*VolumeInfoRequest)(nil),              // 1: org.opendedup.grpc.VolumeInfoRequest
	(*ReplicationClient)(nil),              // 2: org.opendedup.grpc.ReplicationClient
	(*VolumeInfoResponse)(nil),             // 3: org.opendedup.grpc.VolumeInfoResponse
	(*SystemInfo)(nil),                     // 4: org.opendedup.grpc.SystemInfo
	(*SystemInfoRequest)(nil),              // 5: org.opendedup.grpc.SystemInfoRequest
	(*ConnectedVolumeInfo)(nil),            // 6: org.opendedup.grpc.ConnectedVolumeInfo
	(*GCScheduleRequest)(nil),              // 7: org.opendedup.grpc.GCScheduleRequest
	(*GCScheduleResponse)(nil),             // 8: org.opendedup.grpc.GCScheduleResponse
	(*CloudVolumesRequest)(nil),            // 9: org.opendedup.grpc.CloudVolumesRequest
	(*CloudVolumesResponse)(nil),           // 10: org.opendedup.grpc.CloudVolumesResponse
	(*SystemInfoResponse)(nil),             // 11: org.opendedup.grpc.SystemInfoResponse
	(*DSEInfo)(nil),                        // 12: org.opendedup.grpc.DSEInfo
	(*DSERequest)(nil),                     // 13: org.opendedup.grpc.DSERequest
	(*DSEResponse)(nil),                    // 14: org.opendedup.grpc.DSEResponse
	(*AuthenticationRequest)(nil),          // 15: org.opendedup.grpc.AuthenticationRequest
	(*AuthenticationResponse)(nil),         // 16: org.opendedup.grpc.AuthenticationResponse
	(*MessageQueueInfoResponse)(nil),       // 17: org.opendedup.grpc.MessageQueueInfoResponse
	(*CleanStoreRequest)(nil),              // 18: org.opendedup.grpc.CleanStoreRequest
	(*CleanStoreResponse)(nil),             // 19: org.opendedup.grpc.CleanStoreResponse
	(*SetCacheSizeRequest)(nil),            // 20: org.opendedup.grpc.SetCacheSizeRequest
	(*SetCacheSizeResponse)(nil),           // 21: org.opendedup.grpc.SetCacheSizeResponse
	(*DeleteCloudVolumeRequest)(nil),       // 22: org.opendedup.grpc.DeleteCloudVolumeRequest
	(*DeleteCloudVolumeResponse)(nil),      // 23: org.opendedup.grpc.DeleteCloudVolumeResponse
	(*SetVolumeCapacityRequest)(nil),       // 24: org.opendedup.grpc.SetVolumeCapacityRequest
	(*SetVolumeCapacityResponse)(nil),      // 25: org.opendedup.grpc.SetVolumeCapacityResponse
	(*SetPasswordRequest)(nil),             // 26: org.opendedup.grpc.SetPasswordRequest
	(*SetPasswordResponse)(nil),            // 27: org.opendedup.grpc.SetPasswordResponse
	(*SpeedRequest)(nil),                   // 28: org.opendedup.grpc.SpeedRequest
	(*SpeedResponse)(nil),                  // 29: org.opendedup.grpc.SpeedResponse
	(*SyncFromVolRequest)(nil),             // 30: org.opendedup.grpc.SyncFromVolRequest
	(*SyncFromVolResponse)(nil),            // 31: org.opendedup.grpc.SyncFromVolResponse
	(*SyncVolRequest)(nil),                 // 32: org.opendedup.grpc.SyncVolRequest
	(*SyncVolResponse)(nil),                // 33: org.opendedup.grpc.SyncVolResponse
	(*SetMaxAgeRequest)(nil),               // 34: org.opendedup.grpc.SetMaxAgeRequest
	(*SetMaxAgeResponse)(nil),              // 35: org.opendedup.grpc.SetMaxAgeResponse
	(*ReconcileCloudMetadataRequest)(nil),  // 36: org.opendedup.grpc.ReconcileCloudMetadataRequest
	(*ReconcileCloudMetadataResponse)(nil), // 37: org.opendedup.grpc.ReconcileCloudMetadataResponse
	(ErrorCodes)(0),                        // 38: org.opendedup.grpc.errorCodes
	(*ShutdownRequest)(nil),                // 39: org.opendedup.grpc.ShutdownRequest
	(*ShutdownResponse)(nil),               // 40: org.opendedup.grpc.ShutdownResponse
}
var file_VolumeService_proto_depIdxs = []int32{
	17, // 0: org.opendedup.grpc.VolumeInfoResponse.messageQueue:type_name -> org.opendedup.grpc.MessageQueueInfoResponse
	38, // 1: org.opendedup.grpc.VolumeInfoResponse.errorCode:type_name -> org.opendedup.grpc.errorCodes
	2,  // 2: org.opendedup.grpc.VolumeInfoResponse.replicationClient:type_name -> org.opendedup.grpc.ReplicationClient
	38, // 3: org.opendedup.grpc.GCScheduleResponse.errorCode:type_name -> org.opendedup.grpc.errorCodes
	6,  // 4: org.opendedup.grpc.CloudVolumesResponse.volumeInfo:type_name -> org.opendedup.grpc.ConnectedVolumeInfo
	38, // 5: org.opendedup.grpc.CloudVolumesResponse.errorCode:type_name -> org.opendedup.grpc.errorCodes
	4,  // 6: org.opendedup.grpc.SystemInfoResponse.info:type_name -> org.opendedup.grpc.SystemInfo
	38, // 7: org.opendedup.grpc.SystemInfoResponse.errorCode:type_name -> org.opendedup.grpc.errorCodes
	12, // 8: org.opendedup.grpc.DSEResponse.info:type_name -> org.opendedup.grpc.DSEInfo
	38, // 9: org.opendedup.grpc.DSEResponse.errorCode:type_name -> org.opendedup.grpc.errorCodes
	38, // 10: org.opendedup.grpc.AuthenticationResponse.errorCode:type_name -> org.opendedup.grpc.errorCodes
	0,  // 11: org.opendedup.grpc.MessageQueueInfoResponse.mqType:type_name -> org.opendedup.grpc.MessageQueueInfoResponse.MQType
	38, // 12: org.opendedup.grpc.CleanStoreResponse.errorCode:type_name -> org.opendedup.grpc.errorCodes
	38, // 13: org.opendedup.grpc.SetCacheSizeResponse.errorCode:type_name -> org.opendedup.grpc.errorCodes
	38, // 14: org.opendedup.grpc.DeleteCloudVolumeResponse.errorCode:type_name -> org.opendedup.grpc.errorCodes
	38, // 15: org.opendedup.grpc.SetVolumeCapacityResponse.errorCode:type_name -> org.opendedup.grpc.errorCodes
	38, // 16: org.opendedup.grpc.SetPasswordResponse.errorCode:type_name -> org.opendedup.grpc.errorCodes
	38, // 17: org.opendedup.grpc.SpeedResponse.errorCode:type_name -> org.opendedup.grpc.errorCodes
	38, // 18: org.opendedup.grpc.SyncFromVolResponse.errorCode:type_name -> org.opendedup.grpc.errorCodes
	38, // 19: org.opendedup.grpc.SyncVolResponse.errorCode:type_name -> org.opendedup.grpc.errorCodes
	38, // 20: org.opendedup.grpc.SetMaxAgeResponse.errorCode:type_name -> org.opendedup.grpc.errorCodes
	38, // 21: org.opendedup.grpc.ReconcileCloudMetadataResponse.errorCode:type_name -> org.opendedup.grpc.errorCodes
	15, // 22: org.opendedup.grpc.VolumeService.AuthenticateUser:input_type -> org.opendedup.grpc.AuthenticationRequest
	1,  // 23: org.opendedup.grpc.VolumeService.GetVolumeInfo:input_type -> org.opendedup.grpc.VolumeInfoRequest
	39, // 24: org.opendedup.grpc.VolumeService.ShutdownVolume:input_type -> org.opendedup.grpc.ShutdownRequest
	18, // 25: org.opendedup.grpc.VolumeService.CleanStore:input_type -> org.opendedup.grpc.CleanStoreRequest
	22, // 26: org.opendedup.grpc.VolumeService.DeleteCloudVolume:input_type -> org.opendedup.grpc.DeleteCloudVolumeRequest
	13, // 27: org.opendedup.grpc.VolumeService.DSEInfo:input_type -> org.opendedup.grpc.DSERequest
	5,  // 28: org.opendedup.grpc.VolumeService.SystemInfo:input_type -> org.opendedup.grpc.SystemInfoRequest
	24, // 29: org.opendedup.grpc.VolumeService.SetVolumeCapacity:input_type -> org.opendedup.grpc.SetVolumeCapacityRequest
	9,  // 30: org.opendedup.grpc.VolumeService.GetConnectedVolumes:input_type -> org.opendedup.grpc.CloudVolumesRequest
	7,  // 31: org.opendedup.grpc.VolumeService.GetGCSchedule:input_type -> org.opendedup.grpc.GCScheduleRequest
	20, // 32: org.opendedup.grpc.VolumeService.SetCacheSize:input_type -> org.opendedup.grpc.SetCacheSizeRequest
	26, // 33: org.opendedup.grpc.VolumeService.SetPassword:input_type -> org.opendedup.grpc.SetPasswordRequest
	28, // 34: org.opendedup.grpc.VolumeService.SetReadSpeed:input_type -> org.opendedup.grpc.SpeedRequest
	28, // 35: org.opendedup.grpc.VolumeService.SetWriteSpeed:input_type -> org.opendedup.grpc.SpeedRequest
	30, // 36: org.opendedup.grpc.VolumeService.SyncFromCloudVolume:input_type -> org.opendedup.grpc.SyncFromVolRequest
	32, // 37: org.opendedup.grpc.VolumeService.SyncCloudVolume:input_type -> org.opendedup.grpc.SyncVolRequest
	34, // 38: org.opendedup.grpc.VolumeService.SetMaxAge:input_type -> org.opendedup.grpc.SetMaxAgeRequest
	36, // 39: org.opendedup.grpc.VolumeService.ReconcileCloudMetadata:input_type -> org.opendedup.grpc.ReconcileCloudMetadataRequest
	16, // 40: org.opendedup.grpc.VolumeService.AuthenticateUser:output_type -> org.opendedup.grpc.AuthenticationResponse
	3,  // 41: org.opendedup.grpc.VolumeService.GetVolumeInfo:output_type -> org.opendedup.grpc.VolumeInfoResponse
	40, // 42: org.opendedup.grpc.VolumeService.ShutdownVolume:output_type -> org.opendedup.grpc.ShutdownResponse
	19, // 43: org.opendedup.grpc.VolumeService.CleanStore:output_type -> org.opendedup.grpc.CleanStoreResponse
	23, // 44: org.opendedup.grpc.VolumeService.DeleteCloudVolume:output_type -> org.opendedup.grpc.DeleteCloudVolumeResponse
	14, // 45: org.opendedup.grpc.VolumeService.DSEInfo:output_type -> org.opendedup.grpc.DSEResponse
	11, // 46: org.opendedup.grpc.VolumeService.SystemInfo:output_type -> org.opendedup.grpc.SystemInfoResponse
	25, // 47: org.opendedup.grpc.VolumeService.SetVolumeCapacity:output_type -> org.opendedup.grpc.SetVolumeCapacityResponse
	10, // 48: org.opendedup.grpc.VolumeService.GetConnectedVolumes:output_type -> org.opendedup.grpc.CloudVolumesResponse
	8,  // 49: org.opendedup.grpc.VolumeService.GetGCSchedule:output_type -> org.opendedup.grpc.GCScheduleResponse
	21, // 50: org.opendedup.grpc.VolumeService.SetCacheSize:output_type -> org.opendedup.grpc.SetCacheSizeResponse
	27, // 51: org.opendedup.grpc.VolumeService.SetPassword:output_type -> org.opendedup.grpc.SetPasswordResponse
	29, // 52: org.opendedup.grpc.VolumeService.SetReadSpeed:output_type -> org.opendedup.grpc.SpeedResponse
	29, // 53: org.opendedup.grpc.VolumeService.SetWriteSpeed:output_type -> org.opendedup.grpc.SpeedResponse
	31, // 54: org.opendedup.grpc.VolumeService.SyncFromCloudVolume:output_type -> org.opendedup.grpc.SyncFromVolResponse
	33, // 55: org.opendedup.grpc.VolumeService.SyncCloudVolume:output_type -> org.opendedup.grpc.SyncVolResponse
	35, // 56: org.opendedup.grpc.VolumeService.SetMaxAge:output_type -> org.opendedup.grpc.SetMaxAgeResponse
	37, // 57: org.opendedup.grpc.VolumeService.ReconcileCloudMetadata:output_type -> org.opendedup.grpc.ReconcileCloudMetadataResponse
	40, // [40:58] is the sub-list for method output_type
	22, // [22:40] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_VolumeService_proto_init() }
func file_VolumeService_proto_init() {
	if File_VolumeService_proto != nil {
		return
	}
	file_Shutdown_proto_init()
	file_FileInfo_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_VolumeService_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_VolumeService_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicationClient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_VolumeService_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_VolumeService_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_VolumeService_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_VolumeService_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectedVolumeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_VolumeService_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCScheduleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_VolumeService_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCScheduleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_VolumeService_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudVolumesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_VolumeService_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudVolumesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_VolumeService_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_VolumeService_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DSEInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_VolumeService_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DSERequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_VolumeService_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DSEResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_VolumeService_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthenticationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_VolumeService_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthenticationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_VolumeService_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageQueueInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_VolumeService_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CleanStoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_VolumeService_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CleanStoreResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_VolumeService_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetCacheSizeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_VolumeService_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetCacheSizeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_VolumeService_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCloudVolumeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_VolumeService_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCloudVolumeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_VolumeService_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetVolumeCapacityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_VolumeService_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetVolumeCapacityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_VolumeService_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPasswordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_VolumeService_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPasswordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_VolumeService_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpeedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_VolumeService_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpeedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_VolumeService_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncFromVolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_VolumeService_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncFromVolResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_VolumeService_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncVolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_VolumeService_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncVolResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_VolumeService_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMaxAgeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_VolumeService_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMaxAgeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_VolumeService_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReconcileCloudMetadataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_VolumeService_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReconcileCloudMetadataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_VolumeService_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   37,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_VolumeService_proto_goTypes,
		DependencyIndexes: file_VolumeService_proto_depIdxs,
		EnumInfos:         file_VolumeService_proto_enumTypes,
		MessageInfos:      file_VolumeService_proto_msgTypes,
	}.Build()
	File_VolumeService_proto = out.File
	file_VolumeService_proto_rawDesc = nil
	file_VolumeService_proto_goTypes = nil
	file_VolumeService_proto_depIdxs = nil
}
