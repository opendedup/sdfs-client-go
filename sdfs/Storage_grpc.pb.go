// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.0
// source: Storage.proto

package sdfs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StorageServiceClient is the client API for StorageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StorageServiceClient interface {
	HashingInfo(ctx context.Context, in *HashingInfoRequest, opts ...grpc.CallOption) (*HashingInfoResponse, error)
	CheckHashes(ctx context.Context, in *CheckHashesRequest, opts ...grpc.CallOption) (*CheckHashesResponse, error)
	WriteChunks(ctx context.Context, in *WriteChunksRequest, opts ...grpc.CallOption) (*WriteChunksResponse, error)
	GetChunks(ctx context.Context, in *GetChunksRequest, opts ...grpc.CallOption) (StorageService_GetChunksClient, error)
	SubscribeToVolume(ctx context.Context, in *VolumeEventListenRequest, opts ...grpc.CallOption) (StorageService_SubscribeToVolumeClient, error)
	WriteSparseDataChunk(ctx context.Context, in *SparseDedupeChunkWriteRequest, opts ...grpc.CallOption) (*SparseDedupeChunkWriteResponse, error)
	ReadSparseDataChunk(ctx context.Context, in *SparseDedupeChunkReadRequest, opts ...grpc.CallOption) (*SparseDedupeChunkReadResponse, error)
	GetMetaDataDedupeFile(ctx context.Context, in *MetaDataDedupeFileRequest, opts ...grpc.CallOption) (*MetaDataDedupeFileResponse, error)
	GetSparseDedupeFile(ctx context.Context, in *SparseDedupeFileRequest, opts ...grpc.CallOption) (StorageService_GetSparseDedupeFileClient, error)
	ReplicateRemoteFile(ctx context.Context, in *FileReplicationRequest, opts ...grpc.CallOption) (*FileReplicationResponse, error)
	RestoreArchives(ctx context.Context, in *RestoreArchivesRequest, opts ...grpc.CallOption) (*RestoreArchivesResponse, error)
	CancelReplication(ctx context.Context, in *CancelReplicationRequest, opts ...grpc.CallOption) (*CancelReplicationResponse, error)
	PauseReplication(ctx context.Context, in *PauseReplicationRequest, opts ...grpc.CallOption) (*PauseReplicationResponse, error)
	ListReplLogs(ctx context.Context, in *VolumeEventListenRequest, opts ...grpc.CallOption) (StorageService_ListReplLogsClient, error)
	AddReplicaSource(ctx context.Context, in *AddReplicaSourceRequest, opts ...grpc.CallOption) (*AddReplicaSourceResponse, error)
	RemoveReplicaSource(ctx context.Context, in *RemoveReplicaSourceRequest, opts ...grpc.CallOption) (*RemoveReplicaSourceResponse, error)
}

type storageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStorageServiceClient(cc grpc.ClientConnInterface) StorageServiceClient {
	return &storageServiceClient{cc}
}

func (c *storageServiceClient) HashingInfo(ctx context.Context, in *HashingInfoRequest, opts ...grpc.CallOption) (*HashingInfoResponse, error) {
	out := new(HashingInfoResponse)
	err := c.cc.Invoke(ctx, "/org.opendedup.grpc.StorageService/HashingInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) CheckHashes(ctx context.Context, in *CheckHashesRequest, opts ...grpc.CallOption) (*CheckHashesResponse, error) {
	out := new(CheckHashesResponse)
	err := c.cc.Invoke(ctx, "/org.opendedup.grpc.StorageService/CheckHashes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) WriteChunks(ctx context.Context, in *WriteChunksRequest, opts ...grpc.CallOption) (*WriteChunksResponse, error) {
	out := new(WriteChunksResponse)
	err := c.cc.Invoke(ctx, "/org.opendedup.grpc.StorageService/WriteChunks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) GetChunks(ctx context.Context, in *GetChunksRequest, opts ...grpc.CallOption) (StorageService_GetChunksClient, error) {
	stream, err := c.cc.NewStream(ctx, &StorageService_ServiceDesc.Streams[0], "/org.opendedup.grpc.StorageService/GetChunks", opts...)
	if err != nil {
		return nil, err
	}
	x := &storageServiceGetChunksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StorageService_GetChunksClient interface {
	Recv() (*ChunkEntry, error)
	grpc.ClientStream
}

type storageServiceGetChunksClient struct {
	grpc.ClientStream
}

func (x *storageServiceGetChunksClient) Recv() (*ChunkEntry, error) {
	m := new(ChunkEntry)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storageServiceClient) SubscribeToVolume(ctx context.Context, in *VolumeEventListenRequest, opts ...grpc.CallOption) (StorageService_SubscribeToVolumeClient, error) {
	stream, err := c.cc.NewStream(ctx, &StorageService_ServiceDesc.Streams[1], "/org.opendedup.grpc.StorageService/SubscribeToVolume", opts...)
	if err != nil {
		return nil, err
	}
	x := &storageServiceSubscribeToVolumeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StorageService_SubscribeToVolumeClient interface {
	Recv() (*VolumeEvent, error)
	grpc.ClientStream
}

type storageServiceSubscribeToVolumeClient struct {
	grpc.ClientStream
}

func (x *storageServiceSubscribeToVolumeClient) Recv() (*VolumeEvent, error) {
	m := new(VolumeEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storageServiceClient) WriteSparseDataChunk(ctx context.Context, in *SparseDedupeChunkWriteRequest, opts ...grpc.CallOption) (*SparseDedupeChunkWriteResponse, error) {
	out := new(SparseDedupeChunkWriteResponse)
	err := c.cc.Invoke(ctx, "/org.opendedup.grpc.StorageService/WriteSparseDataChunk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) ReadSparseDataChunk(ctx context.Context, in *SparseDedupeChunkReadRequest, opts ...grpc.CallOption) (*SparseDedupeChunkReadResponse, error) {
	out := new(SparseDedupeChunkReadResponse)
	err := c.cc.Invoke(ctx, "/org.opendedup.grpc.StorageService/ReadSparseDataChunk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) GetMetaDataDedupeFile(ctx context.Context, in *MetaDataDedupeFileRequest, opts ...grpc.CallOption) (*MetaDataDedupeFileResponse, error) {
	out := new(MetaDataDedupeFileResponse)
	err := c.cc.Invoke(ctx, "/org.opendedup.grpc.StorageService/GetMetaDataDedupeFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) GetSparseDedupeFile(ctx context.Context, in *SparseDedupeFileRequest, opts ...grpc.CallOption) (StorageService_GetSparseDedupeFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &StorageService_ServiceDesc.Streams[2], "/org.opendedup.grpc.StorageService/GetSparseDedupeFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &storageServiceGetSparseDedupeFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StorageService_GetSparseDedupeFileClient interface {
	Recv() (*SparseDataChunkP, error)
	grpc.ClientStream
}

type storageServiceGetSparseDedupeFileClient struct {
	grpc.ClientStream
}

func (x *storageServiceGetSparseDedupeFileClient) Recv() (*SparseDataChunkP, error) {
	m := new(SparseDataChunkP)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storageServiceClient) ReplicateRemoteFile(ctx context.Context, in *FileReplicationRequest, opts ...grpc.CallOption) (*FileReplicationResponse, error) {
	out := new(FileReplicationResponse)
	err := c.cc.Invoke(ctx, "/org.opendedup.grpc.StorageService/ReplicateRemoteFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) RestoreArchives(ctx context.Context, in *RestoreArchivesRequest, opts ...grpc.CallOption) (*RestoreArchivesResponse, error) {
	out := new(RestoreArchivesResponse)
	err := c.cc.Invoke(ctx, "/org.opendedup.grpc.StorageService/RestoreArchives", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) CancelReplication(ctx context.Context, in *CancelReplicationRequest, opts ...grpc.CallOption) (*CancelReplicationResponse, error) {
	out := new(CancelReplicationResponse)
	err := c.cc.Invoke(ctx, "/org.opendedup.grpc.StorageService/CancelReplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) PauseReplication(ctx context.Context, in *PauseReplicationRequest, opts ...grpc.CallOption) (*PauseReplicationResponse, error) {
	out := new(PauseReplicationResponse)
	err := c.cc.Invoke(ctx, "/org.opendedup.grpc.StorageService/PauseReplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) ListReplLogs(ctx context.Context, in *VolumeEventListenRequest, opts ...grpc.CallOption) (StorageService_ListReplLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &StorageService_ServiceDesc.Streams[3], "/org.opendedup.grpc.StorageService/ListReplLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &storageServiceListReplLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StorageService_ListReplLogsClient interface {
	Recv() (*VolumeEvent, error)
	grpc.ClientStream
}

type storageServiceListReplLogsClient struct {
	grpc.ClientStream
}

func (x *storageServiceListReplLogsClient) Recv() (*VolumeEvent, error) {
	m := new(VolumeEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storageServiceClient) AddReplicaSource(ctx context.Context, in *AddReplicaSourceRequest, opts ...grpc.CallOption) (*AddReplicaSourceResponse, error) {
	out := new(AddReplicaSourceResponse)
	err := c.cc.Invoke(ctx, "/org.opendedup.grpc.StorageService/AddReplicaSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) RemoveReplicaSource(ctx context.Context, in *RemoveReplicaSourceRequest, opts ...grpc.CallOption) (*RemoveReplicaSourceResponse, error) {
	out := new(RemoveReplicaSourceResponse)
	err := c.cc.Invoke(ctx, "/org.opendedup.grpc.StorageService/RemoveReplicaSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorageServiceServer is the server API for StorageService service.
// All implementations must embed UnimplementedStorageServiceServer
// for forward compatibility
type StorageServiceServer interface {
	HashingInfo(context.Context, *HashingInfoRequest) (*HashingInfoResponse, error)
	CheckHashes(context.Context, *CheckHashesRequest) (*CheckHashesResponse, error)
	WriteChunks(context.Context, *WriteChunksRequest) (*WriteChunksResponse, error)
	GetChunks(*GetChunksRequest, StorageService_GetChunksServer) error
	SubscribeToVolume(*VolumeEventListenRequest, StorageService_SubscribeToVolumeServer) error
	WriteSparseDataChunk(context.Context, *SparseDedupeChunkWriteRequest) (*SparseDedupeChunkWriteResponse, error)
	ReadSparseDataChunk(context.Context, *SparseDedupeChunkReadRequest) (*SparseDedupeChunkReadResponse, error)
	GetMetaDataDedupeFile(context.Context, *MetaDataDedupeFileRequest) (*MetaDataDedupeFileResponse, error)
	GetSparseDedupeFile(*SparseDedupeFileRequest, StorageService_GetSparseDedupeFileServer) error
	ReplicateRemoteFile(context.Context, *FileReplicationRequest) (*FileReplicationResponse, error)
	RestoreArchives(context.Context, *RestoreArchivesRequest) (*RestoreArchivesResponse, error)
	CancelReplication(context.Context, *CancelReplicationRequest) (*CancelReplicationResponse, error)
	PauseReplication(context.Context, *PauseReplicationRequest) (*PauseReplicationResponse, error)
	ListReplLogs(*VolumeEventListenRequest, StorageService_ListReplLogsServer) error
	AddReplicaSource(context.Context, *AddReplicaSourceRequest) (*AddReplicaSourceResponse, error)
	RemoveReplicaSource(context.Context, *RemoveReplicaSourceRequest) (*RemoveReplicaSourceResponse, error)
	mustEmbedUnimplementedStorageServiceServer()
}

// UnimplementedStorageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStorageServiceServer struct {
}

func (UnimplementedStorageServiceServer) HashingInfo(context.Context, *HashingInfoRequest) (*HashingInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HashingInfo not implemented")
}
func (UnimplementedStorageServiceServer) CheckHashes(context.Context, *CheckHashesRequest) (*CheckHashesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckHashes not implemented")
}
func (UnimplementedStorageServiceServer) WriteChunks(context.Context, *WriteChunksRequest) (*WriteChunksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteChunks not implemented")
}
func (UnimplementedStorageServiceServer) GetChunks(*GetChunksRequest, StorageService_GetChunksServer) error {
	return status.Errorf(codes.Unimplemented, "method GetChunks not implemented")
}
func (UnimplementedStorageServiceServer) SubscribeToVolume(*VolumeEventListenRequest, StorageService_SubscribeToVolumeServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToVolume not implemented")
}
func (UnimplementedStorageServiceServer) WriteSparseDataChunk(context.Context, *SparseDedupeChunkWriteRequest) (*SparseDedupeChunkWriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteSparseDataChunk not implemented")
}
func (UnimplementedStorageServiceServer) ReadSparseDataChunk(context.Context, *SparseDedupeChunkReadRequest) (*SparseDedupeChunkReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadSparseDataChunk not implemented")
}
func (UnimplementedStorageServiceServer) GetMetaDataDedupeFile(context.Context, *MetaDataDedupeFileRequest) (*MetaDataDedupeFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetaDataDedupeFile not implemented")
}
func (UnimplementedStorageServiceServer) GetSparseDedupeFile(*SparseDedupeFileRequest, StorageService_GetSparseDedupeFileServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSparseDedupeFile not implemented")
}
func (UnimplementedStorageServiceServer) ReplicateRemoteFile(context.Context, *FileReplicationRequest) (*FileReplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplicateRemoteFile not implemented")
}
func (UnimplementedStorageServiceServer) RestoreArchives(context.Context, *RestoreArchivesRequest) (*RestoreArchivesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreArchives not implemented")
}
func (UnimplementedStorageServiceServer) CancelReplication(context.Context, *CancelReplicationRequest) (*CancelReplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelReplication not implemented")
}
func (UnimplementedStorageServiceServer) PauseReplication(context.Context, *PauseReplicationRequest) (*PauseReplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseReplication not implemented")
}
func (UnimplementedStorageServiceServer) ListReplLogs(*VolumeEventListenRequest, StorageService_ListReplLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListReplLogs not implemented")
}
func (UnimplementedStorageServiceServer) AddReplicaSource(context.Context, *AddReplicaSourceRequest) (*AddReplicaSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddReplicaSource not implemented")
}
func (UnimplementedStorageServiceServer) RemoveReplicaSource(context.Context, *RemoveReplicaSourceRequest) (*RemoveReplicaSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveReplicaSource not implemented")
}
func (UnimplementedStorageServiceServer) mustEmbedUnimplementedStorageServiceServer() {}

// UnsafeStorageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StorageServiceServer will
// result in compilation errors.
type UnsafeStorageServiceServer interface {
	mustEmbedUnimplementedStorageServiceServer()
}

func RegisterStorageServiceServer(s grpc.ServiceRegistrar, srv StorageServiceServer) {
	s.RegisterService(&StorageService_ServiceDesc, srv)
}

func _StorageService_HashingInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HashingInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).HashingInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.opendedup.grpc.StorageService/HashingInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).HashingInfo(ctx, req.(*HashingInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_CheckHashes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckHashesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).CheckHashes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.opendedup.grpc.StorageService/CheckHashes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).CheckHashes(ctx, req.(*CheckHashesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_WriteChunks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteChunksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).WriteChunks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.opendedup.grpc.StorageService/WriteChunks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).WriteChunks(ctx, req.(*WriteChunksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_GetChunks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetChunksRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StorageServiceServer).GetChunks(m, &storageServiceGetChunksServer{stream})
}

type StorageService_GetChunksServer interface {
	Send(*ChunkEntry) error
	grpc.ServerStream
}

type storageServiceGetChunksServer struct {
	grpc.ServerStream
}

func (x *storageServiceGetChunksServer) Send(m *ChunkEntry) error {
	return x.ServerStream.SendMsg(m)
}

func _StorageService_SubscribeToVolume_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(VolumeEventListenRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StorageServiceServer).SubscribeToVolume(m, &storageServiceSubscribeToVolumeServer{stream})
}

type StorageService_SubscribeToVolumeServer interface {
	Send(*VolumeEvent) error
	grpc.ServerStream
}

type storageServiceSubscribeToVolumeServer struct {
	grpc.ServerStream
}

func (x *storageServiceSubscribeToVolumeServer) Send(m *VolumeEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _StorageService_WriteSparseDataChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SparseDedupeChunkWriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).WriteSparseDataChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.opendedup.grpc.StorageService/WriteSparseDataChunk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).WriteSparseDataChunk(ctx, req.(*SparseDedupeChunkWriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_ReadSparseDataChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SparseDedupeChunkReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).ReadSparseDataChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.opendedup.grpc.StorageService/ReadSparseDataChunk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).ReadSparseDataChunk(ctx, req.(*SparseDedupeChunkReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_GetMetaDataDedupeFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetaDataDedupeFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).GetMetaDataDedupeFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.opendedup.grpc.StorageService/GetMetaDataDedupeFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).GetMetaDataDedupeFile(ctx, req.(*MetaDataDedupeFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_GetSparseDedupeFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SparseDedupeFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StorageServiceServer).GetSparseDedupeFile(m, &storageServiceGetSparseDedupeFileServer{stream})
}

type StorageService_GetSparseDedupeFileServer interface {
	Send(*SparseDataChunkP) error
	grpc.ServerStream
}

type storageServiceGetSparseDedupeFileServer struct {
	grpc.ServerStream
}

func (x *storageServiceGetSparseDedupeFileServer) Send(m *SparseDataChunkP) error {
	return x.ServerStream.SendMsg(m)
}

func _StorageService_ReplicateRemoteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileReplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).ReplicateRemoteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.opendedup.grpc.StorageService/ReplicateRemoteFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).ReplicateRemoteFile(ctx, req.(*FileReplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_RestoreArchives_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreArchivesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).RestoreArchives(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.opendedup.grpc.StorageService/RestoreArchives",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).RestoreArchives(ctx, req.(*RestoreArchivesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_CancelReplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelReplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).CancelReplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.opendedup.grpc.StorageService/CancelReplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).CancelReplication(ctx, req.(*CancelReplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_PauseReplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PauseReplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).PauseReplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.opendedup.grpc.StorageService/PauseReplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).PauseReplication(ctx, req.(*PauseReplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_ListReplLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(VolumeEventListenRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StorageServiceServer).ListReplLogs(m, &storageServiceListReplLogsServer{stream})
}

type StorageService_ListReplLogsServer interface {
	Send(*VolumeEvent) error
	grpc.ServerStream
}

type storageServiceListReplLogsServer struct {
	grpc.ServerStream
}

func (x *storageServiceListReplLogsServer) Send(m *VolumeEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _StorageService_AddReplicaSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddReplicaSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).AddReplicaSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.opendedup.grpc.StorageService/AddReplicaSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).AddReplicaSource(ctx, req.(*AddReplicaSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_RemoveReplicaSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveReplicaSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).RemoveReplicaSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.opendedup.grpc.StorageService/RemoveReplicaSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).RemoveReplicaSource(ctx, req.(*RemoveReplicaSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StorageService_ServiceDesc is the grpc.ServiceDesc for StorageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StorageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "org.opendedup.grpc.StorageService",
	HandlerType: (*StorageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HashingInfo",
			Handler:    _StorageService_HashingInfo_Handler,
		},
		{
			MethodName: "CheckHashes",
			Handler:    _StorageService_CheckHashes_Handler,
		},
		{
			MethodName: "WriteChunks",
			Handler:    _StorageService_WriteChunks_Handler,
		},
		{
			MethodName: "WriteSparseDataChunk",
			Handler:    _StorageService_WriteSparseDataChunk_Handler,
		},
		{
			MethodName: "ReadSparseDataChunk",
			Handler:    _StorageService_ReadSparseDataChunk_Handler,
		},
		{
			MethodName: "GetMetaDataDedupeFile",
			Handler:    _StorageService_GetMetaDataDedupeFile_Handler,
		},
		{
			MethodName: "ReplicateRemoteFile",
			Handler:    _StorageService_ReplicateRemoteFile_Handler,
		},
		{
			MethodName: "RestoreArchives",
			Handler:    _StorageService_RestoreArchives_Handler,
		},
		{
			MethodName: "CancelReplication",
			Handler:    _StorageService_CancelReplication_Handler,
		},
		{
			MethodName: "PauseReplication",
			Handler:    _StorageService_PauseReplication_Handler,
		},
		{
			MethodName: "AddReplicaSource",
			Handler:    _StorageService_AddReplicaSource_Handler,
		},
		{
			MethodName: "RemoveReplicaSource",
			Handler:    _StorageService_RemoveReplicaSource_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetChunks",
			Handler:       _StorageService_GetChunks_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeToVolume",
			Handler:       _StorageService_SubscribeToVolume_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetSparseDedupeFile",
			Handler:       _StorageService_GetSparseDedupeFile_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListReplLogs",
			Handler:       _StorageService_ListReplLogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "Storage.proto",
}
