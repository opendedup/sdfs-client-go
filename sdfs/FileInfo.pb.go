// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.20.1
// source: FileInfo.proto

package sdfs

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Syncaction int32

const (
	Syncaction_DOWNLOAD  Syncaction = 0 //Sync from Cloud
	Syncaction_WRITE     Syncaction = 1 //Write Locally
	Syncaction_DELETE    Syncaction = 2 //Delete
	Syncaction_UPLOAD    Syncaction = 3 //Upload Data To Cloud
	Syncaction_KEEPALIVE Syncaction = 4 //A Keepalive message
)

// Enum value maps for Syncaction.
var (
	Syncaction_name = map[int32]string{
		0: "DOWNLOAD",
		1: "WRITE",
		2: "DELETE",
		3: "UPLOAD",
		4: "KEEPALIVE",
	}
	Syncaction_value = map[string]int32{
		"DOWNLOAD":  0,
		"WRITE":     1,
		"DELETE":    2,
		"UPLOAD":    3,
		"KEEPALIVE": 4,
	}
)

func (x Syncaction) Enum() *Syncaction {
	p := new(Syncaction)
	*p = x
	return p
}

func (x Syncaction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Syncaction) Descriptor() protoreflect.EnumDescriptor {
	return file_FileInfo_proto_enumTypes[0].Descriptor()
}

func (Syncaction) Type() protoreflect.EnumType {
	return &file_FileInfo_proto_enumTypes[0]
}

func (x Syncaction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Syncaction.Descriptor instead.
func (Syncaction) EnumDescriptor() ([]byte, []int) {
	return file_FileInfo_proto_rawDescGZIP(), []int{0}
}

type ErrorCodes int32

const (
	ErrorCodes_NOERR           ErrorCodes = 0
	ErrorCodes_EPERM           ErrorCodes = 1   // Operation not permitted
	ErrorCodes_ENOENT          ErrorCodes = 2   // No such file or directory
	ErrorCodes_ESRCH           ErrorCodes = 3   // No such process
	ErrorCodes_EINTR           ErrorCodes = 4   // Interrupted system call
	ErrorCodes_EIO             ErrorCodes = 5   // I/O error
	ErrorCodes_ENXIO           ErrorCodes = 6   // No such device or address
	ErrorCodes_E2BIG           ErrorCodes = 7   // Arg list too long
	ErrorCodes_ENOEXEC         ErrorCodes = 8   // Exec format error
	ErrorCodes_EBADF           ErrorCodes = 9   // Bad file number
	ErrorCodes_ECHILD          ErrorCodes = 10  // No child processes
	ErrorCodes_EAGAIN          ErrorCodes = 11  // Try again
	ErrorCodes_ENOMEM          ErrorCodes = 12  // Out of memory
	ErrorCodes_EACCES          ErrorCodes = 13  // Permission denied
	ErrorCodes_EFAULT          ErrorCodes = 14  // Bad address
	ErrorCodes_ENOTBLK         ErrorCodes = 15  // Block device required
	ErrorCodes_EBUSY           ErrorCodes = 16  // Device or resource busy
	ErrorCodes_EEXIST          ErrorCodes = 17  // File exists
	ErrorCodes_EXDEV           ErrorCodes = 18  // Cross-device link
	ErrorCodes_ENODEV          ErrorCodes = 19  // No such device
	ErrorCodes_ENOTDIR         ErrorCodes = 20  // Not a directory
	ErrorCodes_EISDIR          ErrorCodes = 21  // Is a directory
	ErrorCodes_EINVAL          ErrorCodes = 22  // Invalid argument
	ErrorCodes_ENFILE          ErrorCodes = 23  // File table overflow
	ErrorCodes_EMFILE          ErrorCodes = 24  // Too many open files
	ErrorCodes_ENOTTY          ErrorCodes = 25  // Not a typewriter
	ErrorCodes_ETXTBSY         ErrorCodes = 26  // Text file busy
	ErrorCodes_EFBIG           ErrorCodes = 27  // File too large
	ErrorCodes_ENOSPC          ErrorCodes = 28  // No space left on device
	ErrorCodes_ESPIPE          ErrorCodes = 29  // Illegal seek
	ErrorCodes_EROFS           ErrorCodes = 30  // Read-only file system
	ErrorCodes_EMLINK          ErrorCodes = 31  // Too many links
	ErrorCodes_EPIPE           ErrorCodes = 32  // Broken pipe
	ErrorCodes_EDOM            ErrorCodes = 33  // Math argument out of domain of func
	ErrorCodes_ERANGE          ErrorCodes = 34  // Math result not representable
	ErrorCodes_EDEADLK         ErrorCodes = 35  // Resource deadlock would occur
	ErrorCodes_ENAMETOOLONG    ErrorCodes = 36  // File name too long
	ErrorCodes_ENOLCK          ErrorCodes = 37  // No record locks available
	ErrorCodes_ENOSYS          ErrorCodes = 38  // Function not implemented
	ErrorCodes_ENOTEMPTY       ErrorCodes = 39  // Directory not empty
	ErrorCodes_ELOOP           ErrorCodes = 40  // Too many symbolic links encountered
	ErrorCodes_EWOULDBLOCK     ErrorCodes = 41  // Operation would block
	ErrorCodes_ENOMSG          ErrorCodes = 42  // No message of desired type
	ErrorCodes_EIDRM           ErrorCodes = 43  // Identifier removed
	ErrorCodes_ECHRNG          ErrorCodes = 44  // Channel number out of range
	ErrorCodes_EL2NSYNC        ErrorCodes = 45  // Level 2 not synchronized
	ErrorCodes_EL3HLT          ErrorCodes = 46  // Level 3 halted
	ErrorCodes_EL3RST          ErrorCodes = 47  // Level 3 reset
	ErrorCodes_ELNRNG          ErrorCodes = 48  // Link number out of range
	ErrorCodes_EUNATCH         ErrorCodes = 49  // Protocol driver not attached
	ErrorCodes_ENOCSI          ErrorCodes = 50  // No CSI structure available
	ErrorCodes_EL2HLT          ErrorCodes = 51  // Level 2 halted
	ErrorCodes_EBADE           ErrorCodes = 52  // Invalid exchange
	ErrorCodes_EBADR           ErrorCodes = 53  // Invalid request descriptor
	ErrorCodes_EXFULL          ErrorCodes = 54  // Exchange full
	ErrorCodes_ENOANO          ErrorCodes = 55  // No anode
	ErrorCodes_EBADRQC         ErrorCodes = 56  // Invalid request code
	ErrorCodes_EBADSLT         ErrorCodes = 57  // Invalid slot
	ErrorCodes_EDEADLOCK       ErrorCodes = 58  // File locking deadlock error
	ErrorCodes_EBFONT          ErrorCodes = 59  // Bad font file format
	ErrorCodes_ENOSTR          ErrorCodes = 60  // Device not a stream
	ErrorCodes_ENODATA         ErrorCodes = 61  // No data available
	ErrorCodes_ETIME           ErrorCodes = 62  // Timer expired
	ErrorCodes_ENOSR           ErrorCodes = 63  // Out of streams resources
	ErrorCodes_ENONET          ErrorCodes = 64  // Machine is not on the network
	ErrorCodes_ENOPKG          ErrorCodes = 65  // Package not installed
	ErrorCodes_EREMOTE         ErrorCodes = 66  // Object is remote
	ErrorCodes_ENOLINK         ErrorCodes = 67  // Link has been severed
	ErrorCodes_EADV            ErrorCodes = 68  // Advertise error
	ErrorCodes_ESRMNT          ErrorCodes = 69  // Srmount error
	ErrorCodes_ECOMM           ErrorCodes = 70  // Communication error on send
	ErrorCodes_EPROTO          ErrorCodes = 71  // Protocol error
	ErrorCodes_EMULTIHOP       ErrorCodes = 72  // Multihop attempted
	ErrorCodes_EDOTDOT         ErrorCodes = 73  // RFS specific error
	ErrorCodes_EBADMSG         ErrorCodes = 74  // Not a data message
	ErrorCodes_EOVERFLOW       ErrorCodes = 75  // Value too large for defined data type
	ErrorCodes_ENOTUNIQ        ErrorCodes = 76  // Name not unique on network
	ErrorCodes_EBADFD          ErrorCodes = 77  // File descriptor in bad state
	ErrorCodes_EREMCHG         ErrorCodes = 78  // Remote address changed
	ErrorCodes_ELIBACC         ErrorCodes = 79  // Can not access a needed shared library
	ErrorCodes_ELIBBAD         ErrorCodes = 80  // Accessing a corrupted shared library
	ErrorCodes_ELIBSCN         ErrorCodes = 81  // .lib section in a.out corrupted
	ErrorCodes_ELIBMAX         ErrorCodes = 82  // Attempting to link in too many shared libraries
	ErrorCodes_ELIBEXEC        ErrorCodes = 83  // Cannot exec a shared library directly
	ErrorCodes_EILSEQ          ErrorCodes = 84  // Illegal byte sequence
	ErrorCodes_ERESTART        ErrorCodes = 85  // Interrupted system call should be restarted
	ErrorCodes_ESTRPIPE        ErrorCodes = 86  // Streams pipe error
	ErrorCodes_EUSERS          ErrorCodes = 87  // Too many users
	ErrorCodes_ENOTSOCK        ErrorCodes = 88  // Socket operation on non-socket
	ErrorCodes_EDESTADDRREQ    ErrorCodes = 89  // Destination address required
	ErrorCodes_EMSGSIZE        ErrorCodes = 90  // Message too long
	ErrorCodes_EPROTOTYPE      ErrorCodes = 91  // Protocol wrong type for socket
	ErrorCodes_ENOPROTOOPT     ErrorCodes = 92  // Protocol not available
	ErrorCodes_EPROTONOSUPPORT ErrorCodes = 93  // Protocol not supported
	ErrorCodes_ESOCKTNOSUPPORT ErrorCodes = 94  // Socket type not supported
	ErrorCodes_EOPNOTSUPP      ErrorCodes = 95  // Operation not supported on transport endpoint
	ErrorCodes_EPFNOSUPPORT    ErrorCodes = 96  // Protocol family not supported
	ErrorCodes_EAFNOSUPPORT    ErrorCodes = 97  // Address family not supported by protocol
	ErrorCodes_EADDRINUSE      ErrorCodes = 98  // Address already in use
	ErrorCodes_EADDRNOTAVAIL   ErrorCodes = 99  // Cannot assign requested address
	ErrorCodes_ENETDOWN        ErrorCodes = 100 // Network is down
	ErrorCodes_ENETUNREACH     ErrorCodes = 101 // Network is unreachable
	ErrorCodes_ENETRESET       ErrorCodes = 102 // Network dropped connection because of reset
	ErrorCodes_ECONNABORTED    ErrorCodes = 103 // Software caused connection abort
	ErrorCodes_ECONNRESET      ErrorCodes = 104 // Connection reset by peer
	ErrorCodes_ENOBUFS         ErrorCodes = 105 // No buffer space available
	ErrorCodes_EISCONN         ErrorCodes = 106 // Transport endpoint is already connected
	ErrorCodes_ENOTCONN        ErrorCodes = 107 // Transport endpoint is not connected
	ErrorCodes_ESHUTDOWN       ErrorCodes = 108 // Cannot send after transport endpoint shutdown
	ErrorCodes_ETOOMANYREFS    ErrorCodes = 109 // Too many references: cannot splice
	ErrorCodes_ETIMEDOUT       ErrorCodes = 110 // Connection timed out
	ErrorCodes_ECONNREFUSED    ErrorCodes = 111 // Connection refused
	ErrorCodes_EHOSTDOWN       ErrorCodes = 112 // Host is down
	ErrorCodes_EHOSTUNREACH    ErrorCodes = 113 // No route to host
	ErrorCodes_EALREADY        ErrorCodes = 114 // Operation already in progress
	ErrorCodes_EINPROGRESS     ErrorCodes = 115 // Operation now in progress
	ErrorCodes_ESTALE          ErrorCodes = 116 // Stale NFS file handle
	ErrorCodes_EUCLEAN         ErrorCodes = 117 // Structure needs cleaning
	ErrorCodes_ENOTNAM         ErrorCodes = 118 // Not a XENIX named type file
	ErrorCodes_ENAVAIL         ErrorCodes = 119 // No XENIX semaphores available
	ErrorCodes_EISNAM          ErrorCodes = 120 // Is a named type file
	ErrorCodes_EREMOTEIO       ErrorCodes = 121 // Remote I/O error
	ErrorCodes_EARCHIVEIO      ErrorCodes = 122 // Block Archived
)

// Enum value maps for ErrorCodes.
var (
	ErrorCodes_name = map[int32]string{
		0:   "NOERR",
		1:   "EPERM",
		2:   "ENOENT",
		3:   "ESRCH",
		4:   "EINTR",
		5:   "EIO",
		6:   "ENXIO",
		7:   "E2BIG",
		8:   "ENOEXEC",
		9:   "EBADF",
		10:  "ECHILD",
		11:  "EAGAIN",
		12:  "ENOMEM",
		13:  "EACCES",
		14:  "EFAULT",
		15:  "ENOTBLK",
		16:  "EBUSY",
		17:  "EEXIST",
		18:  "EXDEV",
		19:  "ENODEV",
		20:  "ENOTDIR",
		21:  "EISDIR",
		22:  "EINVAL",
		23:  "ENFILE",
		24:  "EMFILE",
		25:  "ENOTTY",
		26:  "ETXTBSY",
		27:  "EFBIG",
		28:  "ENOSPC",
		29:  "ESPIPE",
		30:  "EROFS",
		31:  "EMLINK",
		32:  "EPIPE",
		33:  "EDOM",
		34:  "ERANGE",
		35:  "EDEADLK",
		36:  "ENAMETOOLONG",
		37:  "ENOLCK",
		38:  "ENOSYS",
		39:  "ENOTEMPTY",
		40:  "ELOOP",
		41:  "EWOULDBLOCK",
		42:  "ENOMSG",
		43:  "EIDRM",
		44:  "ECHRNG",
		45:  "EL2NSYNC",
		46:  "EL3HLT",
		47:  "EL3RST",
		48:  "ELNRNG",
		49:  "EUNATCH",
		50:  "ENOCSI",
		51:  "EL2HLT",
		52:  "EBADE",
		53:  "EBADR",
		54:  "EXFULL",
		55:  "ENOANO",
		56:  "EBADRQC",
		57:  "EBADSLT",
		58:  "EDEADLOCK",
		59:  "EBFONT",
		60:  "ENOSTR",
		61:  "ENODATA",
		62:  "ETIME",
		63:  "ENOSR",
		64:  "ENONET",
		65:  "ENOPKG",
		66:  "EREMOTE",
		67:  "ENOLINK",
		68:  "EADV",
		69:  "ESRMNT",
		70:  "ECOMM",
		71:  "EPROTO",
		72:  "EMULTIHOP",
		73:  "EDOTDOT",
		74:  "EBADMSG",
		75:  "EOVERFLOW",
		76:  "ENOTUNIQ",
		77:  "EBADFD",
		78:  "EREMCHG",
		79:  "ELIBACC",
		80:  "ELIBBAD",
		81:  "ELIBSCN",
		82:  "ELIBMAX",
		83:  "ELIBEXEC",
		84:  "EILSEQ",
		85:  "ERESTART",
		86:  "ESTRPIPE",
		87:  "EUSERS",
		88:  "ENOTSOCK",
		89:  "EDESTADDRREQ",
		90:  "EMSGSIZE",
		91:  "EPROTOTYPE",
		92:  "ENOPROTOOPT",
		93:  "EPROTONOSUPPORT",
		94:  "ESOCKTNOSUPPORT",
		95:  "EOPNOTSUPP",
		96:  "EPFNOSUPPORT",
		97:  "EAFNOSUPPORT",
		98:  "EADDRINUSE",
		99:  "EADDRNOTAVAIL",
		100: "ENETDOWN",
		101: "ENETUNREACH",
		102: "ENETRESET",
		103: "ECONNABORTED",
		104: "ECONNRESET",
		105: "ENOBUFS",
		106: "EISCONN",
		107: "ENOTCONN",
		108: "ESHUTDOWN",
		109: "ETOOMANYREFS",
		110: "ETIMEDOUT",
		111: "ECONNREFUSED",
		112: "EHOSTDOWN",
		113: "EHOSTUNREACH",
		114: "EALREADY",
		115: "EINPROGRESS",
		116: "ESTALE",
		117: "EUCLEAN",
		118: "ENOTNAM",
		119: "ENAVAIL",
		120: "EISNAM",
		121: "EREMOTEIO",
		122: "EARCHIVEIO",
	}
	ErrorCodes_value = map[string]int32{
		"NOERR":           0,
		"EPERM":           1,
		"ENOENT":          2,
		"ESRCH":           3,
		"EINTR":           4,
		"EIO":             5,
		"ENXIO":           6,
		"E2BIG":           7,
		"ENOEXEC":         8,
		"EBADF":           9,
		"ECHILD":          10,
		"EAGAIN":          11,
		"ENOMEM":          12,
		"EACCES":          13,
		"EFAULT":          14,
		"ENOTBLK":         15,
		"EBUSY":           16,
		"EEXIST":          17,
		"EXDEV":           18,
		"ENODEV":          19,
		"ENOTDIR":         20,
		"EISDIR":          21,
		"EINVAL":          22,
		"ENFILE":          23,
		"EMFILE":          24,
		"ENOTTY":          25,
		"ETXTBSY":         26,
		"EFBIG":           27,
		"ENOSPC":          28,
		"ESPIPE":          29,
		"EROFS":           30,
		"EMLINK":          31,
		"EPIPE":           32,
		"EDOM":            33,
		"ERANGE":          34,
		"EDEADLK":         35,
		"ENAMETOOLONG":    36,
		"ENOLCK":          37,
		"ENOSYS":          38,
		"ENOTEMPTY":       39,
		"ELOOP":           40,
		"EWOULDBLOCK":     41,
		"ENOMSG":          42,
		"EIDRM":           43,
		"ECHRNG":          44,
		"EL2NSYNC":        45,
		"EL3HLT":          46,
		"EL3RST":          47,
		"ELNRNG":          48,
		"EUNATCH":         49,
		"ENOCSI":          50,
		"EL2HLT":          51,
		"EBADE":           52,
		"EBADR":           53,
		"EXFULL":          54,
		"ENOANO":          55,
		"EBADRQC":         56,
		"EBADSLT":         57,
		"EDEADLOCK":       58,
		"EBFONT":          59,
		"ENOSTR":          60,
		"ENODATA":         61,
		"ETIME":           62,
		"ENOSR":           63,
		"ENONET":          64,
		"ENOPKG":          65,
		"EREMOTE":         66,
		"ENOLINK":         67,
		"EADV":            68,
		"ESRMNT":          69,
		"ECOMM":           70,
		"EPROTO":          71,
		"EMULTIHOP":       72,
		"EDOTDOT":         73,
		"EBADMSG":         74,
		"EOVERFLOW":       75,
		"ENOTUNIQ":        76,
		"EBADFD":          77,
		"EREMCHG":         78,
		"ELIBACC":         79,
		"ELIBBAD":         80,
		"ELIBSCN":         81,
		"ELIBMAX":         82,
		"ELIBEXEC":        83,
		"EILSEQ":          84,
		"ERESTART":        85,
		"ESTRPIPE":        86,
		"EUSERS":          87,
		"ENOTSOCK":        88,
		"EDESTADDRREQ":    89,
		"EMSGSIZE":        90,
		"EPROTOTYPE":      91,
		"ENOPROTOOPT":     92,
		"EPROTONOSUPPORT": 93,
		"ESOCKTNOSUPPORT": 94,
		"EOPNOTSUPP":      95,
		"EPFNOSUPPORT":    96,
		"EAFNOSUPPORT":    97,
		"EADDRINUSE":      98,
		"EADDRNOTAVAIL":   99,
		"ENETDOWN":        100,
		"ENETUNREACH":     101,
		"ENETRESET":       102,
		"ECONNABORTED":    103,
		"ECONNRESET":      104,
		"ENOBUFS":         105,
		"EISCONN":         106,
		"ENOTCONN":        107,
		"ESHUTDOWN":       108,
		"ETOOMANYREFS":    109,
		"ETIMEDOUT":       110,
		"ECONNREFUSED":    111,
		"EHOSTDOWN":       112,
		"EHOSTUNREACH":    113,
		"EALREADY":        114,
		"EINPROGRESS":     115,
		"ESTALE":          116,
		"EUCLEAN":         117,
		"ENOTNAM":         118,
		"ENAVAIL":         119,
		"EISNAM":          120,
		"EREMOTEIO":       121,
		"EARCHIVEIO":      122,
	}
)

func (x ErrorCodes) Enum() *ErrorCodes {
	p := new(ErrorCodes)
	*p = x
	return p
}

func (x ErrorCodes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCodes) Descriptor() protoreflect.EnumDescriptor {
	return file_FileInfo_proto_enumTypes[1].Descriptor()
}

func (ErrorCodes) Type() protoreflect.EnumType {
	return &file_FileInfo_proto_enumTypes[1]
}

func (x ErrorCodes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCodes.Descriptor instead.
func (ErrorCodes) EnumDescriptor() ([]byte, []int) {
	return file_FileInfo_proto_rawDescGZIP(), []int{1}
}

type FileInfoResponseFileType int32

const (
	FileInfoResponse_FILE FileInfoResponseFileType = 0
	FileInfoResponse_DIR  FileInfoResponseFileType = 1
)

// Enum value maps for FileInfoResponseFileType.
var (
	FileInfoResponseFileType_name = map[int32]string{
		0: "FILE",
		1: "DIR",
	}
	FileInfoResponseFileType_value = map[string]int32{
		"FILE": 0,
		"DIR":  1,
	}
)

func (x FileInfoResponseFileType) Enum() *FileInfoResponseFileType {
	p := new(FileInfoResponseFileType)
	*p = x
	return p
}

func (x FileInfoResponseFileType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileInfoResponseFileType) Descriptor() protoreflect.EnumDescriptor {
	return file_FileInfo_proto_enumTypes[2].Descriptor()
}

func (FileInfoResponseFileType) Type() protoreflect.EnumType {
	return &file_FileInfo_proto_enumTypes[2]
}

func (x FileInfoResponseFileType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileInfoResponseFileType.Descriptor instead.
func (FileInfoResponseFileType) EnumDescriptor() ([]byte, []int) {
	return file_FileInfo_proto_rawDescGZIP(), []int{2, 0}
}

// Request payload
type FileInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName      string `protobuf:"bytes,1,opt,name=fileName,proto3" json:"fileName,omitempty"`
	Compact       bool   `protobuf:"varint,2,opt,name=compact,proto3" json:"compact,omitempty"`
	NumberOfFiles int32  `protobuf:"varint,3,opt,name=numberOfFiles,proto3" json:"numberOfFiles,omitempty"`
	ListGuid      string `protobuf:"bytes,4,opt,name=listGuid,proto3" json:"listGuid,omitempty"`
	PvolumeID     int64  `protobuf:"varint,5,opt,name=pvolumeID,proto3" json:"pvolumeID,omitempty"`
}

func (x *FileInfoRequest) Reset() {
	*x = FileInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FileInfo_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileInfoRequest) ProtoMessage() {}

func (x *FileInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_FileInfo_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileInfoRequest.ProtoReflect.Descriptor instead.
func (*FileInfoRequest) Descriptor() ([]byte, []int) {
	return file_FileInfo_proto_rawDescGZIP(), []int{0}
}

func (x *FileInfoRequest) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *FileInfoRequest) GetCompact() bool {
	if x != nil {
		return x.Compact
	}
	return false
}

func (x *FileInfoRequest) GetNumberOfFiles() int32 {
	if x != nil {
		return x.NumberOfFiles
	}
	return 0
}

func (x *FileInfoRequest) GetListGuid() string {
	if x != nil {
		return x.ListGuid
	}
	return ""
}

func (x *FileInfoRequest) GetPvolumeID() int64 {
	if x != nil {
		return x.PvolumeID
	}
	return 0
}

type FileMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error            string              `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	ListGuid         string              `protobuf:"bytes,2,opt,name=listGuid,proto3" json:"listGuid,omitempty"`
	Response         []*FileInfoResponse `protobuf:"bytes,3,rep,name=response,proto3" json:"response,omitempty"`
	ErrorCode        ErrorCodes          `protobuf:"varint,4,opt,name=errorCode,proto3,enum=org.opendedup.grpc.ErrorCodes" json:"errorCode,omitempty"`
	MaxNumberOfFiles int32               `protobuf:"varint,5,opt,name=maxNumberOfFiles,proto3" json:"maxNumberOfFiles,omitempty"`
	Action           Syncaction          `protobuf:"varint,6,opt,name=action,proto3,enum=org.opendedup.grpc.Syncaction" json:"action,omitempty"`
}

func (x *FileMessageResponse) Reset() {
	*x = FileMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FileInfo_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileMessageResponse) ProtoMessage() {}

func (x *FileMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_FileInfo_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileMessageResponse.ProtoReflect.Descriptor instead.
func (*FileMessageResponse) Descriptor() ([]byte, []int) {
	return file_FileInfo_proto_rawDescGZIP(), []int{1}
}

func (x *FileMessageResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *FileMessageResponse) GetListGuid() string {
	if x != nil {
		return x.ListGuid
	}
	return ""
}

func (x *FileMessageResponse) GetResponse() []*FileInfoResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *FileMessageResponse) GetErrorCode() ErrorCodes {
	if x != nil {
		return x.ErrorCode
	}
	return ErrorCodes_NOERR
}

func (x *FileMessageResponse) GetMaxNumberOfFiles() int32 {
	if x != nil {
		return x.MaxNumberOfFiles
	}
	return 0
}

func (x *FileMessageResponse) GetAction() Syncaction {
	if x != nil {
		return x.Action
	}
	return Syncaction_DOWNLOAD
}

type FileInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName       string                   `protobuf:"bytes,1,opt,name=fileName,proto3" json:"fileName,omitempty"`
	FilePath       string                   `protobuf:"bytes,2,opt,name=filePath,proto3" json:"filePath,omitempty"`
	Type           FileInfoResponseFileType `protobuf:"varint,3,opt,name=type,proto3,enum=org.opendedup.grpc.FileInfoResponseFileType" json:"type,omitempty"`
	SdfsPath       string                   `protobuf:"bytes,4,opt,name=sdfsPath,proto3" json:"sdfsPath,omitempty"`
	Atime          int64                    `protobuf:"varint,5,opt,name=atime,proto3" json:"atime,omitempty"`
	Mtime          int64                    `protobuf:"varint,6,opt,name=mtime,proto3" json:"mtime,omitempty"`
	Ctime          int64                    `protobuf:"varint,7,opt,name=ctime,proto3" json:"ctime,omitempty"`
	Hidden         bool                     `protobuf:"varint,8,opt,name=hidden,proto3" json:"hidden,omitempty"`
	Size           int64                    `protobuf:"varint,9,opt,name=size,proto3" json:"size,omitempty"`
	Open           bool                     `protobuf:"varint,10,opt,name=open,proto3" json:"open,omitempty"`
	FileGuild      string                   `protobuf:"bytes,11,opt,name=fileGuild,proto3" json:"fileGuild,omitempty"`
	MapGuid        string                   `protobuf:"bytes,12,opt,name=mapGuid,proto3" json:"mapGuid,omitempty"`
	LocalOwner     bool                     `protobuf:"varint,13,opt,name=localOwner,proto3" json:"localOwner,omitempty"`
	Execute        bool                     `protobuf:"varint,14,opt,name=execute,proto3" json:"execute,omitempty"`
	Read           bool                     `protobuf:"varint,15,opt,name=read,proto3" json:"read,omitempty"`
	Write          bool                     `protobuf:"varint,16,opt,name=write,proto3" json:"write,omitempty"`
	Importing      bool                     `protobuf:"varint,17,opt,name=importing,proto3" json:"importing,omitempty"`
	Symlink        bool                     `protobuf:"varint,18,opt,name=symlink,proto3" json:"symlink,omitempty"`
	FileAttributes []*FileAttributes        `protobuf:"bytes,19,rep,name=fileAttributes,proto3" json:"fileAttributes,omitempty"`
	Id             string                   `protobuf:"bytes,20,opt,name=id,proto3" json:"id,omitempty"`
	Files          []*FileInfoResponse      `protobuf:"bytes,21,rep,name=files,proto3" json:"files,omitempty"`
	ParentPath     string                   `protobuf:"bytes,22,opt,name=parentPath,proto3" json:"parentPath,omitempty"`
	PvolumeID      int64                    `protobuf:"varint,23,opt,name=pvolumeID,proto3" json:"pvolumeID,omitempty"`
	IoMonitor      *IOMonitorResponse       `protobuf:"bytes,24,opt,name=ioMonitor,proto3" json:"ioMonitor,omitempty"`
	SymlinkPath    string                   `protobuf:"bytes,25,opt,name=symlinkPath,proto3" json:"symlinkPath,omitempty"`
	GroupId        int64                    `protobuf:"varint,26,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	UserId         int64                    `protobuf:"varint,27,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Permissions    int32                    `protobuf:"varint,28,opt,name=permissions,proto3" json:"permissions,omitempty"`
	Hashcode       int64                    `protobuf:"varint,29,opt,name=hashcode,proto3" json:"hashcode,omitempty"`
	RetentionLock  int64                    `protobuf:"varint,30,opt,name=retentionLock,proto3" json:"retentionLock,omitempty"`
	Attributes     int64                    `protobuf:"varint,31,opt,name=attributes,proto3" json:"attributes,omitempty"`
	Version        string                   `protobuf:"bytes,32,opt,name=version,proto3" json:"version,omitempty"`
	Mode           int32                    `protobuf:"varint,33,opt,name=mode,proto3" json:"mode,omitempty"`
	DeleteOnClose  bool                     `protobuf:"varint,34,opt,name=delete_on_close,json=deleteOnClose,proto3" json:"delete_on_close,omitempty"`
}

func (x *FileInfoResponse) Reset() {
	*x = FileInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FileInfo_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileInfoResponse) ProtoMessage() {}

func (x *FileInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_FileInfo_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileInfoResponse.ProtoReflect.Descriptor instead.
func (*FileInfoResponse) Descriptor() ([]byte, []int) {
	return file_FileInfo_proto_rawDescGZIP(), []int{2}
}

func (x *FileInfoResponse) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *FileInfoResponse) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *FileInfoResponse) GetType() FileInfoResponseFileType {
	if x != nil {
		return x.Type
	}
	return FileInfoResponse_FILE
}

func (x *FileInfoResponse) GetSdfsPath() string {
	if x != nil {
		return x.SdfsPath
	}
	return ""
}

func (x *FileInfoResponse) GetAtime() int64 {
	if x != nil {
		return x.Atime
	}
	return 0
}

func (x *FileInfoResponse) GetMtime() int64 {
	if x != nil {
		return x.Mtime
	}
	return 0
}

func (x *FileInfoResponse) GetCtime() int64 {
	if x != nil {
		return x.Ctime
	}
	return 0
}

func (x *FileInfoResponse) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *FileInfoResponse) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *FileInfoResponse) GetOpen() bool {
	if x != nil {
		return x.Open
	}
	return false
}

func (x *FileInfoResponse) GetFileGuild() string {
	if x != nil {
		return x.FileGuild
	}
	return ""
}

func (x *FileInfoResponse) GetMapGuid() string {
	if x != nil {
		return x.MapGuid
	}
	return ""
}

func (x *FileInfoResponse) GetLocalOwner() bool {
	if x != nil {
		return x.LocalOwner
	}
	return false
}

func (x *FileInfoResponse) GetExecute() bool {
	if x != nil {
		return x.Execute
	}
	return false
}

func (x *FileInfoResponse) GetRead() bool {
	if x != nil {
		return x.Read
	}
	return false
}

func (x *FileInfoResponse) GetWrite() bool {
	if x != nil {
		return x.Write
	}
	return false
}

func (x *FileInfoResponse) GetImporting() bool {
	if x != nil {
		return x.Importing
	}
	return false
}

func (x *FileInfoResponse) GetSymlink() bool {
	if x != nil {
		return x.Symlink
	}
	return false
}

func (x *FileInfoResponse) GetFileAttributes() []*FileAttributes {
	if x != nil {
		return x.FileAttributes
	}
	return nil
}

func (x *FileInfoResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FileInfoResponse) GetFiles() []*FileInfoResponse {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *FileInfoResponse) GetParentPath() string {
	if x != nil {
		return x.ParentPath
	}
	return ""
}

func (x *FileInfoResponse) GetPvolumeID() int64 {
	if x != nil {
		return x.PvolumeID
	}
	return 0
}

func (x *FileInfoResponse) GetIoMonitor() *IOMonitorResponse {
	if x != nil {
		return x.IoMonitor
	}
	return nil
}

func (x *FileInfoResponse) GetSymlinkPath() string {
	if x != nil {
		return x.SymlinkPath
	}
	return ""
}

func (x *FileInfoResponse) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *FileInfoResponse) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *FileInfoResponse) GetPermissions() int32 {
	if x != nil {
		return x.Permissions
	}
	return 0
}

func (x *FileInfoResponse) GetHashcode() int64 {
	if x != nil {
		return x.Hashcode
	}
	return 0
}

func (x *FileInfoResponse) GetRetentionLock() int64 {
	if x != nil {
		return x.RetentionLock
	}
	return 0
}

func (x *FileInfoResponse) GetAttributes() int64 {
	if x != nil {
		return x.Attributes
	}
	return 0
}

func (x *FileInfoResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *FileInfoResponse) GetMode() int32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *FileInfoResponse) GetDeleteOnClose() bool {
	if x != nil {
		return x.DeleteOnClose
	}
	return false
}

type IOMonitorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VirtualBytesWritten int64  `protobuf:"varint,1,opt,name=virtualBytesWritten,proto3" json:"virtualBytesWritten,omitempty"`
	ActualBytesWritten  int64  `protobuf:"varint,2,opt,name=actualBytesWritten,proto3" json:"actualBytesWritten,omitempty"`
	BytesRead           int64  `protobuf:"varint,3,opt,name=bytesRead,proto3" json:"bytesRead,omitempty"`
	DuplicateBlocks     int64  `protobuf:"varint,4,opt,name=duplicateBlocks,proto3" json:"duplicateBlocks,omitempty"`
	WriteOpts           int64  `protobuf:"varint,5,opt,name=writeOpts,proto3" json:"writeOpts,omitempty"`
	ReadOpts            int64  `protobuf:"varint,6,opt,name=readOpts,proto3" json:"readOpts,omitempty"`
	MaxReadOps          int64  `protobuf:"varint,7,opt,name=maxReadOps,proto3" json:"maxReadOps,omitempty"`
	MaxWriteOps         int64  `protobuf:"varint,8,opt,name=maxWriteOps,proto3" json:"maxWriteOps,omitempty"`
	MaxIops             int64  `protobuf:"varint,9,opt,name=maxIops,proto3" json:"maxIops,omitempty"`
	MaxReadMbps         int64  `protobuf:"varint,10,opt,name=maxReadMbps,proto3" json:"maxReadMbps,omitempty"`
	MaxWriteMbps        int64  `protobuf:"varint,11,opt,name=maxWriteMbps,proto3" json:"maxWriteMbps,omitempty"`
	MaxMbps             int64  `protobuf:"varint,12,opt,name=maxMbps,proto3" json:"maxMbps,omitempty"`
	IoQos               int32  `protobuf:"varint,13,opt,name=ioQos,proto3" json:"ioQos,omitempty"`
	IoProfile           string `protobuf:"bytes,14,opt,name=ioProfile,proto3" json:"ioProfile,omitempty"`
	MaxRbps             int64  `protobuf:"varint,15,opt,name=maxRbps,proto3" json:"maxRbps,omitempty"`
	MaxWbps             int64  `protobuf:"varint,16,opt,name=maxWbps,proto3" json:"maxWbps,omitempty"`
	MaxBps              int64  `protobuf:"varint,17,opt,name=maxBps,proto3" json:"maxBps,omitempty"`
}

func (x *IOMonitorResponse) Reset() {
	*x = IOMonitorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FileInfo_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IOMonitorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IOMonitorResponse) ProtoMessage() {}

func (x *IOMonitorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_FileInfo_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IOMonitorResponse.ProtoReflect.Descriptor instead.
func (*IOMonitorResponse) Descriptor() ([]byte, []int) {
	return file_FileInfo_proto_rawDescGZIP(), []int{3}
}

func (x *IOMonitorResponse) GetVirtualBytesWritten() int64 {
	if x != nil {
		return x.VirtualBytesWritten
	}
	return 0
}

func (x *IOMonitorResponse) GetActualBytesWritten() int64 {
	if x != nil {
		return x.ActualBytesWritten
	}
	return 0
}

func (x *IOMonitorResponse) GetBytesRead() int64 {
	if x != nil {
		return x.BytesRead
	}
	return 0
}

func (x *IOMonitorResponse) GetDuplicateBlocks() int64 {
	if x != nil {
		return x.DuplicateBlocks
	}
	return 0
}

func (x *IOMonitorResponse) GetWriteOpts() int64 {
	if x != nil {
		return x.WriteOpts
	}
	return 0
}

func (x *IOMonitorResponse) GetReadOpts() int64 {
	if x != nil {
		return x.ReadOpts
	}
	return 0
}

func (x *IOMonitorResponse) GetMaxReadOps() int64 {
	if x != nil {
		return x.MaxReadOps
	}
	return 0
}

func (x *IOMonitorResponse) GetMaxWriteOps() int64 {
	if x != nil {
		return x.MaxWriteOps
	}
	return 0
}

func (x *IOMonitorResponse) GetMaxIops() int64 {
	if x != nil {
		return x.MaxIops
	}
	return 0
}

func (x *IOMonitorResponse) GetMaxReadMbps() int64 {
	if x != nil {
		return x.MaxReadMbps
	}
	return 0
}

func (x *IOMonitorResponse) GetMaxWriteMbps() int64 {
	if x != nil {
		return x.MaxWriteMbps
	}
	return 0
}

func (x *IOMonitorResponse) GetMaxMbps() int64 {
	if x != nil {
		return x.MaxMbps
	}
	return 0
}

func (x *IOMonitorResponse) GetIoQos() int32 {
	if x != nil {
		return x.IoQos
	}
	return 0
}

func (x *IOMonitorResponse) GetIoProfile() string {
	if x != nil {
		return x.IoProfile
	}
	return ""
}

func (x *IOMonitorResponse) GetMaxRbps() int64 {
	if x != nil {
		return x.MaxRbps
	}
	return 0
}

func (x *IOMonitorResponse) GetMaxWbps() int64 {
	if x != nil {
		return x.MaxWbps
	}
	return 0
}

func (x *IOMonitorResponse) GetMaxBps() int64 {
	if x != nil {
		return x.MaxBps
	}
	return 0
}

type WFileAttributesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileAttributes []*FileAttributes `protobuf:"bytes,1,rep,name=fileAttributes,proto3" json:"fileAttributes,omitempty"`
	FilePath       string            `protobuf:"bytes,2,opt,name=filePath,proto3" json:"filePath,omitempty"`
	PvolumeID      int64             `protobuf:"varint,3,opt,name=pvolumeID,proto3" json:"pvolumeID,omitempty"`
}

func (x *WFileAttributesRequest) Reset() {
	*x = WFileAttributesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FileInfo_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WFileAttributesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WFileAttributesRequest) ProtoMessage() {}

func (x *WFileAttributesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_FileInfo_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WFileAttributesRequest.ProtoReflect.Descriptor instead.
func (*WFileAttributesRequest) Descriptor() ([]byte, []int) {
	return file_FileInfo_proto_rawDescGZIP(), []int{4}
}

func (x *WFileAttributesRequest) GetFileAttributes() []*FileAttributes {
	if x != nil {
		return x.FileAttributes
	}
	return nil
}

func (x *WFileAttributesRequest) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *WFileAttributesRequest) GetPvolumeID() int64 {
	if x != nil {
		return x.PvolumeID
	}
	return 0
}

type WFileAttributesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error     string     `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	ErrorCode ErrorCodes `protobuf:"varint,2,opt,name=errorCode,proto3,enum=org.opendedup.grpc.ErrorCodes" json:"errorCode,omitempty"`
}

func (x *WFileAttributesResponse) Reset() {
	*x = WFileAttributesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FileInfo_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WFileAttributesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WFileAttributesResponse) ProtoMessage() {}

func (x *WFileAttributesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_FileInfo_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WFileAttributesResponse.ProtoReflect.Descriptor instead.
func (*WFileAttributesResponse) Descriptor() ([]byte, []int) {
	return file_FileInfo_proto_rawDescGZIP(), []int{5}
}

func (x *WFileAttributesResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *WFileAttributesResponse) GetErrorCode() ErrorCodes {
	if x != nil {
		return x.ErrorCode
	}
	return ErrorCodes_NOERR
}

type RFileAttributesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilePath  string `protobuf:"bytes,1,opt,name=filePath,proto3" json:"filePath,omitempty"`
	PvolumeID int64  `protobuf:"varint,2,opt,name=pvolumeID,proto3" json:"pvolumeID,omitempty"`
}

func (x *RFileAttributesRequest) Reset() {
	*x = RFileAttributesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FileInfo_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RFileAttributesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RFileAttributesRequest) ProtoMessage() {}

func (x *RFileAttributesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_FileInfo_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RFileAttributesRequest.ProtoReflect.Descriptor instead.
func (*RFileAttributesRequest) Descriptor() ([]byte, []int) {
	return file_FileInfo_proto_rawDescGZIP(), []int{6}
}

func (x *RFileAttributesRequest) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *RFileAttributesRequest) GetPvolumeID() int64 {
	if x != nil {
		return x.PvolumeID
	}
	return 0
}

type RFileAttributesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileAttributes []*FileAttributes `protobuf:"bytes,1,rep,name=fileAttributes,proto3" json:"fileAttributes,omitempty"`
	Error          string            `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	ErrorCode      ErrorCodes        `protobuf:"varint,3,opt,name=errorCode,proto3,enum=org.opendedup.grpc.ErrorCodes" json:"errorCode,omitempty"`
}

func (x *RFileAttributesResponse) Reset() {
	*x = RFileAttributesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FileInfo_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RFileAttributesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RFileAttributesResponse) ProtoMessage() {}

func (x *RFileAttributesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_FileInfo_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RFileAttributesResponse.ProtoReflect.Descriptor instead.
func (*RFileAttributesResponse) Descriptor() ([]byte, []int) {
	return file_FileInfo_proto_rawDescGZIP(), []int{7}
}

func (x *RFileAttributesResponse) GetFileAttributes() []*FileAttributes {
	if x != nil {
		return x.FileAttributes
	}
	return nil
}

func (x *RFileAttributesResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *RFileAttributesResponse) GetErrorCode() ErrorCodes {
	if x != nil {
		return x.ErrorCode
	}
	return ErrorCodes_NOERR
}

type FileAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *FileAttributes) Reset() {
	*x = FileAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FileInfo_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileAttributes) ProtoMessage() {}

func (x *FileAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_FileInfo_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileAttributes.ProtoReflect.Descriptor instead.
func (*FileAttributes) Descriptor() ([]byte, []int) {
	return file_FileInfo_proto_rawDescGZIP(), []int{8}
}

func (x *FileAttributes) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *FileAttributes) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

var File_FileInfo_proto protoreflect.FileDescriptor

var file_FileInfo_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x12, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x22, 0xa7, 0x01, 0x0a, 0x0f, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x12, 0x24,
	0x0a, 0x0d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x47, 0x75, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x47, 0x75, 0x69, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x44, 0x22, 0xab,
	0x02, 0x0a, 0x13, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x69, 0x73, 0x74, 0x47, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x69, 0x73, 0x74, 0x47, 0x75, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x09, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe9, 0x08, 0x0a,
	0x10, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x41, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x66, 0x69,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x64, 0x66, 0x73, 0x50, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x64, 0x66, 0x73, 0x50, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x61, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6d, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x69,
	0x64, 0x64, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x69, 0x64, 0x64,
	0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69,
	0x6c, 0x65, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66,
	0x69, 0x6c, 0x65, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x70, 0x47,
	0x75, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x47, 0x75,
	0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x65, 0x61, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x72, 0x65, 0x61, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x77, 0x72, 0x69, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x79, 0x6d, 0x6c, 0x69, 0x6e, 0x6b, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x79, 0x6d, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x4a,
	0x0a, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x65,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x05, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x50, 0x61, 0x74, 0x68, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x49, 0x44, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x49, 0x44, 0x12, 0x43, 0x0a, 0x09, 0x69, 0x6f, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x4f, 0x4d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09,
	0x69, 0x6f, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x79, 0x6d,
	0x6c, 0x69, 0x6e, 0x6b, 0x50, 0x61, 0x74, 0x68, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x79, 0x6d, 0x6c, 0x69, 0x6e, 0x6b, 0x50, 0x61, 0x74, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x68, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x6b, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x6f, 0x63, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4f, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x22, 0x1d, 0x0a, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x00, 0x12,
	0x07, 0x0a, 0x03, 0x44, 0x49, 0x52, 0x10, 0x01, 0x22, 0xb3, 0x04, 0x0a, 0x11, 0x49, 0x4f, 0x4d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30,
	0x0a, 0x13, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x57, 0x72,
	0x69, 0x74, 0x74, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x76, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x57, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e,
	0x12, 0x2e, 0x0a, 0x12, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x57,
	0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x61, 0x63,
	0x74, 0x75, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x57, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x61, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x61, 0x64, 0x12, 0x28,
	0x0a, 0x0f, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x4f, 0x70, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x4f, 0x70, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x70,
	0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x70,
	0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x70, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x61, 0x64, 0x4f,
	0x70, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4f, 0x70,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x4f, 0x70, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x49, 0x6f, 0x70, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x49, 0x6f, 0x70, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x62, 0x70, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x62, 0x70, 0x73,
	0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x62, 0x70, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x4d, 0x62, 0x70, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x4d, 0x62, 0x70, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x4d, 0x62, 0x70, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6f, 0x51, 0x6f, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69,
	0x6f, 0x51, 0x6f, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6f, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6f, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x52, 0x62, 0x70, 0x73, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x52, 0x62, 0x70, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x61, 0x78, 0x57, 0x62, 0x70, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d,
	0x61, 0x78, 0x57, 0x62, 0x70, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x42, 0x70, 0x73,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x42, 0x70, 0x73, 0x22, 0x9e,
	0x01, 0x0a, 0x16, 0x57, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x0e, 0x66, 0x69, 0x6c,
	0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75,
	0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x44, 0x22,
	0x6d, 0x0a, 0x17, 0x57, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x3c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x73, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x52,
	0x0a, 0x16, 0x52, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x49, 0x44, 0x22, 0xb9, 0x01, 0x0a, 0x17, 0x52, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a,
	0x0a, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x65,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x3c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x73, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x38,
	0x0a, 0x0e, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2a, 0x4c, 0x0a, 0x0a, 0x73, 0x79, 0x6e, 0x63,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f,
	0x41, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x55,
	0x50, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x4b, 0x45, 0x45, 0x50, 0x41,
	0x4c, 0x49, 0x56, 0x45, 0x10, 0x04, 0x2a, 0xed, 0x0c, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x09, 0x0a, 0x05, 0x4e, 0x4f, 0x45, 0x52, 0x52, 0x10, 0x00,
	0x12, 0x09, 0x0a, 0x05, 0x45, 0x50, 0x45, 0x52, 0x4d, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x45,
	0x4e, 0x4f, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x53, 0x52, 0x43, 0x48,
	0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x49, 0x4e, 0x54, 0x52, 0x10, 0x04, 0x12, 0x07, 0x0a,
	0x03, 0x45, 0x49, 0x4f, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x4e, 0x58, 0x49, 0x4f, 0x10,
	0x06, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x32, 0x42, 0x49, 0x47, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07,
	0x45, 0x4e, 0x4f, 0x45, 0x58, 0x45, 0x43, 0x10, 0x08, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x42, 0x41,
	0x44, 0x46, 0x10, 0x09, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x43, 0x48, 0x49, 0x4c, 0x44, 0x10, 0x0a,
	0x12, 0x0a, 0x0a, 0x06, 0x45, 0x41, 0x47, 0x41, 0x49, 0x4e, 0x10, 0x0b, 0x12, 0x0a, 0x0a, 0x06,
	0x45, 0x4e, 0x4f, 0x4d, 0x45, 0x4d, 0x10, 0x0c, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x41, 0x43, 0x43,
	0x45, 0x53, 0x10, 0x0d, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x0e,
	0x12, 0x0b, 0x0a, 0x07, 0x45, 0x4e, 0x4f, 0x54, 0x42, 0x4c, 0x4b, 0x10, 0x0f, 0x12, 0x09, 0x0a,
	0x05, 0x45, 0x42, 0x55, 0x53, 0x59, 0x10, 0x10, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x45, 0x58, 0x49,
	0x53, 0x54, 0x10, 0x11, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x58, 0x44, 0x45, 0x56, 0x10, 0x12, 0x12,
	0x0a, 0x0a, 0x06, 0x45, 0x4e, 0x4f, 0x44, 0x45, 0x56, 0x10, 0x13, 0x12, 0x0b, 0x0a, 0x07, 0x45,
	0x4e, 0x4f, 0x54, 0x44, 0x49, 0x52, 0x10, 0x14, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x49, 0x53, 0x44,
	0x49, 0x52, 0x10, 0x15, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x10, 0x16,
	0x12, 0x0a, 0x0a, 0x06, 0x45, 0x4e, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x17, 0x12, 0x0a, 0x0a, 0x06,
	0x45, 0x4d, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x18, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x4e, 0x4f, 0x54,
	0x54, 0x59, 0x10, 0x19, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x54, 0x58, 0x54, 0x42, 0x53, 0x59, 0x10,
	0x1a, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x46, 0x42, 0x49, 0x47, 0x10, 0x1b, 0x12, 0x0a, 0x0a, 0x06,
	0x45, 0x4e, 0x4f, 0x53, 0x50, 0x43, 0x10, 0x1c, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x53, 0x50, 0x49,
	0x50, 0x45, 0x10, 0x1d, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x4f, 0x46, 0x53, 0x10, 0x1e, 0x12,
	0x0a, 0x0a, 0x06, 0x45, 0x4d, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x1f, 0x12, 0x09, 0x0a, 0x05, 0x45,
	0x50, 0x49, 0x50, 0x45, 0x10, 0x20, 0x12, 0x08, 0x0a, 0x04, 0x45, 0x44, 0x4f, 0x4d, 0x10, 0x21,
	0x12, 0x0a, 0x0a, 0x06, 0x45, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x22, 0x12, 0x0b, 0x0a, 0x07,
	0x45, 0x44, 0x45, 0x41, 0x44, 0x4c, 0x4b, 0x10, 0x23, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x4e, 0x41,
	0x4d, 0x45, 0x54, 0x4f, 0x4f, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x24, 0x12, 0x0a, 0x0a, 0x06, 0x45,
	0x4e, 0x4f, 0x4c, 0x43, 0x4b, 0x10, 0x25, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x4e, 0x4f, 0x53, 0x59,
	0x53, 0x10, 0x26, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x4e, 0x4f, 0x54, 0x45, 0x4d, 0x50, 0x54, 0x59,
	0x10, 0x27, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x4c, 0x4f, 0x4f, 0x50, 0x10, 0x28, 0x12, 0x0f, 0x0a,
	0x0b, 0x45, 0x57, 0x4f, 0x55, 0x4c, 0x44, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x29, 0x12, 0x0a,
	0x0a, 0x06, 0x45, 0x4e, 0x4f, 0x4d, 0x53, 0x47, 0x10, 0x2a, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x49,
	0x44, 0x52, 0x4d, 0x10, 0x2b, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x43, 0x48, 0x52, 0x4e, 0x47, 0x10,
	0x2c, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x4c, 0x32, 0x4e, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x2d, 0x12,
	0x0a, 0x0a, 0x06, 0x45, 0x4c, 0x33, 0x48, 0x4c, 0x54, 0x10, 0x2e, 0x12, 0x0a, 0x0a, 0x06, 0x45,
	0x4c, 0x33, 0x52, 0x53, 0x54, 0x10, 0x2f, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x4c, 0x4e, 0x52, 0x4e,
	0x47, 0x10, 0x30, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x55, 0x4e, 0x41, 0x54, 0x43, 0x48, 0x10, 0x31,
	0x12, 0x0a, 0x0a, 0x06, 0x45, 0x4e, 0x4f, 0x43, 0x53, 0x49, 0x10, 0x32, 0x12, 0x0a, 0x0a, 0x06,
	0x45, 0x4c, 0x32, 0x48, 0x4c, 0x54, 0x10, 0x33, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x42, 0x41, 0x44,
	0x45, 0x10, 0x34, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x42, 0x41, 0x44, 0x52, 0x10, 0x35, 0x12, 0x0a,
	0x0a, 0x06, 0x45, 0x58, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x36, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x4e,
	0x4f, 0x41, 0x4e, 0x4f, 0x10, 0x37, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x42, 0x41, 0x44, 0x52, 0x51,
	0x43, 0x10, 0x38, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x42, 0x41, 0x44, 0x53, 0x4c, 0x54, 0x10, 0x39,
	0x12, 0x0d, 0x0a, 0x09, 0x45, 0x44, 0x45, 0x41, 0x44, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x3a, 0x12,
	0x0a, 0x0a, 0x06, 0x45, 0x42, 0x46, 0x4f, 0x4e, 0x54, 0x10, 0x3b, 0x12, 0x0a, 0x0a, 0x06, 0x45,
	0x4e, 0x4f, 0x53, 0x54, 0x52, 0x10, 0x3c, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x4e, 0x4f, 0x44, 0x41,
	0x54, 0x41, 0x10, 0x3d, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x3e, 0x12,
	0x09, 0x0a, 0x05, 0x45, 0x4e, 0x4f, 0x53, 0x52, 0x10, 0x3f, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x4e,
	0x4f, 0x4e, 0x45, 0x54, 0x10, 0x40, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x4e, 0x4f, 0x50, 0x4b, 0x47,
	0x10, 0x41, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x10, 0x42, 0x12,
	0x0b, 0x0a, 0x07, 0x45, 0x4e, 0x4f, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x43, 0x12, 0x08, 0x0a, 0x04,
	0x45, 0x41, 0x44, 0x56, 0x10, 0x44, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x53, 0x52, 0x4d, 0x4e, 0x54,
	0x10, 0x45, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x10, 0x46, 0x12, 0x0a, 0x0a,
	0x06, 0x45, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x10, 0x47, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x4d, 0x55,
	0x4c, 0x54, 0x49, 0x48, 0x4f, 0x50, 0x10, 0x48, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x44, 0x4f, 0x54,
	0x44, 0x4f, 0x54, 0x10, 0x49, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x42, 0x41, 0x44, 0x4d, 0x53, 0x47,
	0x10, 0x4a, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x4f, 0x56, 0x45, 0x52, 0x46, 0x4c, 0x4f, 0x57, 0x10,
	0x4b, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x4e, 0x4f, 0x54, 0x55, 0x4e, 0x49, 0x51, 0x10, 0x4c, 0x12,
	0x0a, 0x0a, 0x06, 0x45, 0x42, 0x41, 0x44, 0x46, 0x44, 0x10, 0x4d, 0x12, 0x0b, 0x0a, 0x07, 0x45,
	0x52, 0x45, 0x4d, 0x43, 0x48, 0x47, 0x10, 0x4e, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x4c, 0x49, 0x42,
	0x41, 0x43, 0x43, 0x10, 0x4f, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x4c, 0x49, 0x42, 0x42, 0x41, 0x44,
	0x10, 0x50, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x4c, 0x49, 0x42, 0x53, 0x43, 0x4e, 0x10, 0x51, 0x12,
	0x0b, 0x0a, 0x07, 0x45, 0x4c, 0x49, 0x42, 0x4d, 0x41, 0x58, 0x10, 0x52, 0x12, 0x0c, 0x0a, 0x08,
	0x45, 0x4c, 0x49, 0x42, 0x45, 0x58, 0x45, 0x43, 0x10, 0x53, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x49,
	0x4c, 0x53, 0x45, 0x51, 0x10, 0x54, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x52, 0x45, 0x53, 0x54, 0x41,
	0x52, 0x54, 0x10, 0x55, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x53, 0x54, 0x52, 0x50, 0x49, 0x50, 0x45,
	0x10, 0x56, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x55, 0x53, 0x45, 0x52, 0x53, 0x10, 0x57, 0x12, 0x0c,
	0x0a, 0x08, 0x45, 0x4e, 0x4f, 0x54, 0x53, 0x4f, 0x43, 0x4b, 0x10, 0x58, 0x12, 0x10, 0x0a, 0x0c,
	0x45, 0x44, 0x45, 0x53, 0x54, 0x41, 0x44, 0x44, 0x52, 0x52, 0x45, 0x51, 0x10, 0x59, 0x12, 0x0c,
	0x0a, 0x08, 0x45, 0x4d, 0x53, 0x47, 0x53, 0x49, 0x5a, 0x45, 0x10, 0x5a, 0x12, 0x0e, 0x0a, 0x0a,
	0x45, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x5b, 0x12, 0x0f, 0x0a, 0x0b,
	0x45, 0x4e, 0x4f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x4f, 0x50, 0x54, 0x10, 0x5c, 0x12, 0x13, 0x0a,
	0x0f, 0x45, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x4e, 0x4f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54,
	0x10, 0x5d, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x53, 0x4f, 0x43, 0x4b, 0x54, 0x4e, 0x4f, 0x53, 0x55,
	0x50, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x5e, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x4f, 0x50, 0x4e, 0x4f,
	0x54, 0x53, 0x55, 0x50, 0x50, 0x10, 0x5f, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x50, 0x46, 0x4e, 0x4f,
	0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x60, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x41, 0x46,
	0x4e, 0x4f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x61, 0x12, 0x0e, 0x0a, 0x0a, 0x45,
	0x41, 0x44, 0x44, 0x52, 0x49, 0x4e, 0x55, 0x53, 0x45, 0x10, 0x62, 0x12, 0x11, 0x0a, 0x0d, 0x45,
	0x41, 0x44, 0x44, 0x52, 0x4e, 0x4f, 0x54, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x10, 0x63, 0x12, 0x0c,
	0x0a, 0x08, 0x45, 0x4e, 0x45, 0x54, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x64, 0x12, 0x0f, 0x0a, 0x0b,
	0x45, 0x4e, 0x45, 0x54, 0x55, 0x4e, 0x52, 0x45, 0x41, 0x43, 0x48, 0x10, 0x65, 0x12, 0x0d, 0x0a,
	0x09, 0x45, 0x4e, 0x45, 0x54, 0x52, 0x45, 0x53, 0x45, 0x54, 0x10, 0x66, 0x12, 0x10, 0x0a, 0x0c,
	0x45, 0x43, 0x4f, 0x4e, 0x4e, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x67, 0x12, 0x0e,
	0x0a, 0x0a, 0x45, 0x43, 0x4f, 0x4e, 0x4e, 0x52, 0x45, 0x53, 0x45, 0x54, 0x10, 0x68, 0x12, 0x0b,
	0x0a, 0x07, 0x45, 0x4e, 0x4f, 0x42, 0x55, 0x46, 0x53, 0x10, 0x69, 0x12, 0x0b, 0x0a, 0x07, 0x45,
	0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x10, 0x6a, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x4e, 0x4f, 0x54,
	0x43, 0x4f, 0x4e, 0x4e, 0x10, 0x6b, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x53, 0x48, 0x55, 0x54, 0x44,
	0x4f, 0x57, 0x4e, 0x10, 0x6c, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x54, 0x4f, 0x4f, 0x4d, 0x41, 0x4e,
	0x59, 0x52, 0x45, 0x46, 0x53, 0x10, 0x6d, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x54, 0x49, 0x4d, 0x45,
	0x44, 0x4f, 0x55, 0x54, 0x10, 0x6e, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x43, 0x4f, 0x4e, 0x4e, 0x52,
	0x45, 0x46, 0x55, 0x53, 0x45, 0x44, 0x10, 0x6f, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x48, 0x4f, 0x53,
	0x54, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x70, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x48, 0x4f, 0x53, 0x54,
	0x55, 0x4e, 0x52, 0x45, 0x41, 0x43, 0x48, 0x10, 0x71, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x41, 0x4c,
	0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x72, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x49, 0x4e, 0x50, 0x52,
	0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x73, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x53, 0x54, 0x41,
	0x4c, 0x45, 0x10, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x55, 0x43, 0x4c, 0x45, 0x41, 0x4e, 0x10,
	0x75, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x4e, 0x4f, 0x54, 0x4e, 0x41, 0x4d, 0x10, 0x76, 0x12, 0x0b,
	0x0a, 0x07, 0x45, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x10, 0x77, 0x12, 0x0a, 0x0a, 0x06, 0x45,
	0x49, 0x53, 0x4e, 0x41, 0x4d, 0x10, 0x78, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x52, 0x45, 0x4d, 0x4f,
	0x54, 0x45, 0x49, 0x4f, 0x10, 0x79, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x41, 0x52, 0x43, 0x48, 0x49,
	0x56, 0x45, 0x49, 0x4f, 0x10, 0x7a, 0x42, 0x30, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2f, 0x73,
	0x64, 0x66, 0x73, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2d, 0x67, 0x6f, 0x2f, 0x73, 0x64,
	0x66, 0x73, 0x2f, 0x3b, 0x73, 0x64, 0x66, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_FileInfo_proto_rawDescOnce sync.Once
	file_FileInfo_proto_rawDescData = file_FileInfo_proto_rawDesc
)

func file_FileInfo_proto_rawDescGZIP() []byte {
	file_FileInfo_proto_rawDescOnce.Do(func() {
		file_FileInfo_proto_rawDescData = protoimpl.X.CompressGZIP(file_FileInfo_proto_rawDescData)
	})
	return file_FileInfo_proto_rawDescData
}

var file_FileInfo_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_FileInfo_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_FileInfo_proto_goTypes = []interface{}{
	(Syncaction)(0),                 // 0: org.opendedup.grpc.syncaction
	(ErrorCodes)(0),                 // 1: org.opendedup.grpc.errorCodes
	(FileInfoResponseFileType)(0),   // 2: org.opendedup.grpc.FileInfoResponse.fileType
	(*FileInfoRequest)(nil),         // 3: org.opendedup.grpc.FileInfoRequest
	(*FileMessageResponse)(nil),     // 4: org.opendedup.grpc.FileMessageResponse
	(*FileInfoResponse)(nil),        // 5: org.opendedup.grpc.FileInfoResponse
	(*IOMonitorResponse)(nil),       // 6: org.opendedup.grpc.IOMonitorResponse
	(*WFileAttributesRequest)(nil),  // 7: org.opendedup.grpc.WFileAttributesRequest
	(*WFileAttributesResponse)(nil), // 8: org.opendedup.grpc.WFileAttributesResponse
	(*RFileAttributesRequest)(nil),  // 9: org.opendedup.grpc.RFileAttributesRequest
	(*RFileAttributesResponse)(nil), // 10: org.opendedup.grpc.RFileAttributesResponse
	(*FileAttributes)(nil),          // 11: org.opendedup.grpc.FileAttributes
}
var file_FileInfo_proto_depIdxs = []int32{
	5,  // 0: org.opendedup.grpc.FileMessageResponse.response:type_name -> org.opendedup.grpc.FileInfoResponse
	1,  // 1: org.opendedup.grpc.FileMessageResponse.errorCode:type_name -> org.opendedup.grpc.errorCodes
	0,  // 2: org.opendedup.grpc.FileMessageResponse.action:type_name -> org.opendedup.grpc.syncaction
	2,  // 3: org.opendedup.grpc.FileInfoResponse.type:type_name -> org.opendedup.grpc.FileInfoResponse.fileType
	11, // 4: org.opendedup.grpc.FileInfoResponse.fileAttributes:type_name -> org.opendedup.grpc.FileAttributes
	5,  // 5: org.opendedup.grpc.FileInfoResponse.files:type_name -> org.opendedup.grpc.FileInfoResponse
	6,  // 6: org.opendedup.grpc.FileInfoResponse.ioMonitor:type_name -> org.opendedup.grpc.IOMonitorResponse
	11, // 7: org.opendedup.grpc.WFileAttributesRequest.fileAttributes:type_name -> org.opendedup.grpc.FileAttributes
	1,  // 8: org.opendedup.grpc.WFileAttributesResponse.errorCode:type_name -> org.opendedup.grpc.errorCodes
	11, // 9: org.opendedup.grpc.RFileAttributesResponse.fileAttributes:type_name -> org.opendedup.grpc.FileAttributes
	1,  // 10: org.opendedup.grpc.RFileAttributesResponse.errorCode:type_name -> org.opendedup.grpc.errorCodes
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_FileInfo_proto_init() }
func file_FileInfo_proto_init() {
	if File_FileInfo_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_FileInfo_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FileInfo_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FileInfo_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FileInfo_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IOMonitorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FileInfo_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WFileAttributesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FileInfo_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WFileAttributesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FileInfo_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RFileAttributesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FileInfo_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RFileAttributesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FileInfo_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_FileInfo_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_FileInfo_proto_goTypes,
		DependencyIndexes: file_FileInfo_proto_depIdxs,
		EnumInfos:         file_FileInfo_proto_enumTypes,
		MessageInfos:      file_FileInfo_proto_msgTypes,
	}.Build()
	File_FileInfo_proto = out.File
	file_FileInfo_proto_rawDesc = nil
	file_FileInfo_proto_goTypes = nil
	file_FileInfo_proto_depIdxs = nil
}
