// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.6.0
// source: SDFSCli.proto

package sdfs

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SdfsUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User            string           `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Description     string           `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	PasswordHash    string           `protobuf:"bytes,3,opt,name=passwordHash,proto3" json:"passwordHash,omitempty"`
	Salt            string           `protobuf:"bytes,4,opt,name=salt,proto3" json:"salt,omitempty"`
	Permissions     *SdfsPermissions `protobuf:"bytes,5,opt,name=permissions,proto3" json:"permissions,omitempty"`
	LastLogin       int64            `protobuf:"varint,6,opt,name=lastLogin,proto3" json:"lastLogin,omitempty"`
	LastFailedLogin int64            `protobuf:"varint,7,opt,name=lastFailedLogin,proto3" json:"lastFailedLogin,omitempty"`
}

func (x *SdfsUser) Reset() {
	*x = SdfsUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SDFSCli_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdfsUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdfsUser) ProtoMessage() {}

func (x *SdfsUser) ProtoReflect() protoreflect.Message {
	mi := &file_SDFSCli_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdfsUser.ProtoReflect.Descriptor instead.
func (*SdfsUser) Descriptor() ([]byte, []int) {
	return file_SDFSCli_proto_rawDescGZIP(), []int{0}
}

func (x *SdfsUser) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *SdfsUser) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SdfsUser) GetPasswordHash() string {
	if x != nil {
		return x.PasswordHash
	}
	return ""
}

func (x *SdfsUser) GetSalt() string {
	if x != nil {
		return x.Salt
	}
	return ""
}

func (x *SdfsUser) GetPermissions() *SdfsPermissions {
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *SdfsUser) GetLastLogin() int64 {
	if x != nil {
		return x.LastLogin
	}
	return 0
}

func (x *SdfsUser) GetLastFailedLogin() int64 {
	if x != nil {
		return x.LastFailedLogin
	}
	return 0
}

type SdfsPermissions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	METADATA_READ  bool `protobuf:"varint,1,opt,name=METADATA_READ,json=METADATAREAD,proto3" json:"METADATA_READ,omitempty"`
	METADATA_WRITE bool `protobuf:"varint,2,opt,name=METADATA_WRITE,json=METADATAWRITE,proto3" json:"METADATA_WRITE,omitempty"`
	FILE_READ      bool `protobuf:"varint,3,opt,name=FILE_READ,json=FILEREAD,proto3" json:"FILE_READ,omitempty"`
	FILE_WRITE     bool `protobuf:"varint,4,opt,name=FILE_WRITE,json=FILEWRITE,proto3" json:"FILE_WRITE,omitempty"`
	FILE_DELETE    bool `protobuf:"varint,5,opt,name=FILE_DELETE,json=FILEDELETE,proto3" json:"FILE_DELETE,omitempty"`
	VOLUME_READ    bool `protobuf:"varint,6,opt,name=VOLUME_READ,json=VOLUMEREAD,proto3" json:"VOLUME_READ,omitempty"`
	CONFIG_READ    bool `protobuf:"varint,7,opt,name=CONFIG_READ,json=CONFIGREAD,proto3" json:"CONFIG_READ,omitempty"`
	CONFIG_WRITE   bool `protobuf:"varint,8,opt,name=CONFIG_WRITE,json=CONFIGWRITE,proto3" json:"CONFIG_WRITE,omitempty"`
	EVENT_READ     bool `protobuf:"varint,9,opt,name=EVENT_READ,json=EVENTREAD,proto3" json:"EVENT_READ,omitempty"`
	AUTH_READ      bool `protobuf:"varint,10,opt,name=AUTH_READ,json=AUTHREAD,proto3" json:"AUTH_READ,omitempty"`
	AUTH_WRITE     bool `protobuf:"varint,11,opt,name=AUTH_WRITE,json=AUTHWRITE,proto3" json:"AUTH_WRITE,omitempty"`
	ADMIN          bool `protobuf:"varint,12,opt,name=ADMIN,proto3" json:"ADMIN,omitempty"`
}

func (x *SdfsPermissions) Reset() {
	*x = SdfsPermissions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SDFSCli_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdfsPermissions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdfsPermissions) ProtoMessage() {}

func (x *SdfsPermissions) ProtoReflect() protoreflect.Message {
	mi := &file_SDFSCli_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdfsPermissions.ProtoReflect.Descriptor instead.
func (*SdfsPermissions) Descriptor() ([]byte, []int) {
	return file_SDFSCli_proto_rawDescGZIP(), []int{1}
}

func (x *SdfsPermissions) GetMETADATA_READ() bool {
	if x != nil {
		return x.METADATA_READ
	}
	return false
}

func (x *SdfsPermissions) GetMETADATA_WRITE() bool {
	if x != nil {
		return x.METADATA_WRITE
	}
	return false
}

func (x *SdfsPermissions) GetFILE_READ() bool {
	if x != nil {
		return x.FILE_READ
	}
	return false
}

func (x *SdfsPermissions) GetFILE_WRITE() bool {
	if x != nil {
		return x.FILE_WRITE
	}
	return false
}

func (x *SdfsPermissions) GetFILE_DELETE() bool {
	if x != nil {
		return x.FILE_DELETE
	}
	return false
}

func (x *SdfsPermissions) GetVOLUME_READ() bool {
	if x != nil {
		return x.VOLUME_READ
	}
	return false
}

func (x *SdfsPermissions) GetCONFIG_READ() bool {
	if x != nil {
		return x.CONFIG_READ
	}
	return false
}

func (x *SdfsPermissions) GetCONFIG_WRITE() bool {
	if x != nil {
		return x.CONFIG_WRITE
	}
	return false
}

func (x *SdfsPermissions) GetEVENT_READ() bool {
	if x != nil {
		return x.EVENT_READ
	}
	return false
}

func (x *SdfsPermissions) GetAUTH_READ() bool {
	if x != nil {
		return x.AUTH_READ
	}
	return false
}

func (x *SdfsPermissions) GetAUTH_WRITE() bool {
	if x != nil {
		return x.AUTH_WRITE
	}
	return false
}

func (x *SdfsPermissions) GetADMIN() bool {
	if x != nil {
		return x.ADMIN
	}
	return false
}

type SdfsUsers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users map[string]*SdfsUser `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SdfsUsers) Reset() {
	*x = SdfsUsers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SDFSCli_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdfsUsers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdfsUsers) ProtoMessage() {}

func (x *SdfsUsers) ProtoReflect() protoreflect.Message {
	mi := &file_SDFSCli_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdfsUsers.ProtoReflect.Descriptor instead.
func (*SdfsUsers) Descriptor() ([]byte, []int) {
	return file_SDFSCli_proto_rawDescGZIP(), []int{2}
}

func (x *SdfsUsers) GetUsers() map[string]*SdfsUser {
	if x != nil {
		return x.Users
	}
	return nil
}

type AddUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User        string           `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Password    string           `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Description string           `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Permissions *SdfsPermissions `protobuf:"bytes,5,opt,name=permissions,proto3" json:"permissions,omitempty"`
	PvolumeID   int64            `protobuf:"varint,6,opt,name=pvolumeID,proto3" json:"pvolumeID,omitempty"`
}

func (x *AddUserRequest) Reset() {
	*x = AddUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SDFSCli_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUserRequest) ProtoMessage() {}

func (x *AddUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_SDFSCli_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUserRequest.ProtoReflect.Descriptor instead.
func (*AddUserRequest) Descriptor() ([]byte, []int) {
	return file_SDFSCli_proto_rawDescGZIP(), []int{3}
}

func (x *AddUserRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *AddUserRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *AddUserRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AddUserRequest) GetPermissions() *SdfsPermissions {
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *AddUserRequest) GetPvolumeID() int64 {
	if x != nil {
		return x.PvolumeID
	}
	return 0
}

type AddUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error     string     `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	ErrorCode ErrorCodes `protobuf:"varint,2,opt,name=errorCode,proto3,enum=org.opendedup.grpc.ErrorCodes" json:"errorCode,omitempty"`
}

func (x *AddUserResponse) Reset() {
	*x = AddUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SDFSCli_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUserResponse) ProtoMessage() {}

func (x *AddUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_SDFSCli_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUserResponse.ProtoReflect.Descriptor instead.
func (*AddUserResponse) Descriptor() ([]byte, []int) {
	return file_SDFSCli_proto_rawDescGZIP(), []int{4}
}

func (x *AddUserResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *AddUserResponse) GetErrorCode() ErrorCodes {
	if x != nil {
		return x.ErrorCode
	}
	return ErrorCodes_NOERR
}

type DeleteUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User      string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	PvolumeID int64  `protobuf:"varint,2,opt,name=pvolumeID,proto3" json:"pvolumeID,omitempty"`
}

func (x *DeleteUserRequest) Reset() {
	*x = DeleteUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SDFSCli_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserRequest) ProtoMessage() {}

func (x *DeleteUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_SDFSCli_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserRequest.ProtoReflect.Descriptor instead.
func (*DeleteUserRequest) Descriptor() ([]byte, []int) {
	return file_SDFSCli_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteUserRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *DeleteUserRequest) GetPvolumeID() int64 {
	if x != nil {
		return x.PvolumeID
	}
	return 0
}

type DeleteUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error     string     `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	ErrorCode ErrorCodes `protobuf:"varint,2,opt,name=errorCode,proto3,enum=org.opendedup.grpc.ErrorCodes" json:"errorCode,omitempty"`
}

func (x *DeleteUserResponse) Reset() {
	*x = DeleteUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SDFSCli_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserResponse) ProtoMessage() {}

func (x *DeleteUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_SDFSCli_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserResponse.ProtoReflect.Descriptor instead.
func (*DeleteUserResponse) Descriptor() ([]byte, []int) {
	return file_SDFSCli_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteUserResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *DeleteUserResponse) GetErrorCode() ErrorCodes {
	if x != nil {
		return x.ErrorCode
	}
	return ErrorCodes_NOERR
}

type SetPermissionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User        string           `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Permissions *SdfsPermissions `protobuf:"bytes,2,opt,name=permissions,proto3" json:"permissions,omitempty"`
	PvolumeID   int64            `protobuf:"varint,3,opt,name=pvolumeID,proto3" json:"pvolumeID,omitempty"`
}

func (x *SetPermissionsRequest) Reset() {
	*x = SetPermissionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SDFSCli_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPermissionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPermissionsRequest) ProtoMessage() {}

func (x *SetPermissionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_SDFSCli_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPermissionsRequest.ProtoReflect.Descriptor instead.
func (*SetPermissionsRequest) Descriptor() ([]byte, []int) {
	return file_SDFSCli_proto_rawDescGZIP(), []int{7}
}

func (x *SetPermissionsRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *SetPermissionsRequest) GetPermissions() *SdfsPermissions {
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *SetPermissionsRequest) GetPvolumeID() int64 {
	if x != nil {
		return x.PvolumeID
	}
	return 0
}

type SetPermissionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error     string     `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	ErrorCode ErrorCodes `protobuf:"varint,2,opt,name=errorCode,proto3,enum=org.opendedup.grpc.ErrorCodes" json:"errorCode,omitempty"`
}

func (x *SetPermissionsResponse) Reset() {
	*x = SetPermissionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SDFSCli_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPermissionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPermissionsResponse) ProtoMessage() {}

func (x *SetPermissionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_SDFSCli_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPermissionsResponse.ProtoReflect.Descriptor instead.
func (*SetPermissionsResponse) Descriptor() ([]byte, []int) {
	return file_SDFSCli_proto_rawDescGZIP(), []int{8}
}

func (x *SetPermissionsResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *SetPermissionsResponse) GetErrorCode() ErrorCodes {
	if x != nil {
		return x.ErrorCode
	}
	return ErrorCodes_NOERR
}

type SetUserPasswordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User      string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Password  string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	PvolumeID int64  `protobuf:"varint,3,opt,name=pvolumeID,proto3" json:"pvolumeID,omitempty"`
}

func (x *SetUserPasswordRequest) Reset() {
	*x = SetUserPasswordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SDFSCli_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetUserPasswordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUserPasswordRequest) ProtoMessage() {}

func (x *SetUserPasswordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_SDFSCli_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUserPasswordRequest.ProtoReflect.Descriptor instead.
func (*SetUserPasswordRequest) Descriptor() ([]byte, []int) {
	return file_SDFSCli_proto_rawDescGZIP(), []int{9}
}

func (x *SetUserPasswordRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *SetUserPasswordRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *SetUserPasswordRequest) GetPvolumeID() int64 {
	if x != nil {
		return x.PvolumeID
	}
	return 0
}

type SetUserPasswordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error     string     `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	ErrorCode ErrorCodes `protobuf:"varint,2,opt,name=errorCode,proto3,enum=org.opendedup.grpc.ErrorCodes" json:"errorCode,omitempty"`
}

func (x *SetUserPasswordResponse) Reset() {
	*x = SetUserPasswordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SDFSCli_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetUserPasswordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUserPasswordResponse) ProtoMessage() {}

func (x *SetUserPasswordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_SDFSCli_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUserPasswordResponse.ProtoReflect.Descriptor instead.
func (*SetUserPasswordResponse) Descriptor() ([]byte, []int) {
	return file_SDFSCli_proto_rawDescGZIP(), []int{10}
}

func (x *SetUserPasswordResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *SetUserPasswordResponse) GetErrorCode() ErrorCodes {
	if x != nil {
		return x.ErrorCode
	}
	return ErrorCodes_NOERR
}

type ListUsersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PvolumeID int64 `protobuf:"varint,1,opt,name=pvolumeID,proto3" json:"pvolumeID,omitempty"`
}

func (x *ListUsersRequest) Reset() {
	*x = ListUsersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SDFSCli_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUsersRequest) ProtoMessage() {}

func (x *ListUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_SDFSCli_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUsersRequest.ProtoReflect.Descriptor instead.
func (*ListUsersRequest) Descriptor() ([]byte, []int) {
	return file_SDFSCli_proto_rawDescGZIP(), []int{11}
}

func (x *ListUsersRequest) GetPvolumeID() int64 {
	if x != nil {
		return x.PvolumeID
	}
	return 0
}

type ListUsersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users     []*SdfsUser `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	Error     string      `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	ErrorCode ErrorCodes  `protobuf:"varint,3,opt,name=errorCode,proto3,enum=org.opendedup.grpc.ErrorCodes" json:"errorCode,omitempty"`
}

func (x *ListUsersResponse) Reset() {
	*x = ListUsersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SDFSCli_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUsersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUsersResponse) ProtoMessage() {}

func (x *ListUsersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_SDFSCli_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUsersResponse.ProtoReflect.Descriptor instead.
func (*ListUsersResponse) Descriptor() ([]byte, []int) {
	return file_SDFSCli_proto_rawDescGZIP(), []int{12}
}

func (x *ListUsersResponse) GetUsers() []*SdfsUser {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *ListUsersResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *ListUsersResponse) GetErrorCode() ErrorCodes {
	if x != nil {
		return x.ErrorCode
	}
	return ErrorCodes_NOERR
}

var File_SDFSCli_proto protoreflect.FileDescriptor

var file_SDFSCli_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x53, 0x44, 0x46, 0x53, 0x43, 0x6c, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x12, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x1a, 0x0e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x87, 0x02, 0x0a, 0x08, 0x53, 0x64, 0x66, 0x73, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x48, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x61,
	0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x12, 0x45,
	0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x64, 0x66, 0x73, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6c, 0x61,
	0x73, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x22, 0x90, 0x03,
	0x0a, 0x0f, 0x53, 0x64, 0x66, 0x73, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x52, 0x45,
	0x41, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41,
	0x54, 0x41, 0x52, 0x45, 0x41, 0x44, 0x12, 0x25, 0x0a, 0x0e, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41,
	0x54, 0x41, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x57, 0x52, 0x49, 0x54, 0x45, 0x12, 0x1b, 0x0a,
	0x09, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x46, 0x49, 0x4c, 0x45, 0x52, 0x45, 0x41, 0x44, 0x12, 0x1d, 0x0a, 0x0a, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x46, 0x49, 0x4c, 0x45, 0x57, 0x52, 0x49, 0x54, 0x45, 0x12, 0x1f, 0x0a, 0x0b, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x46, 0x49, 0x4c, 0x45, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x12, 0x1f, 0x0a, 0x0b, 0x56, 0x4f,
	0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x52, 0x45, 0x41, 0x44, 0x12, 0x1f, 0x0a, 0x0b, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x52, 0x45, 0x41, 0x44, 0x12, 0x21, 0x0a, 0x0c,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x57, 0x52, 0x49, 0x54, 0x45, 0x12,
	0x1d, 0x0a, 0x0a, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x52, 0x45, 0x41, 0x44, 0x12, 0x1b,
	0x0a, 0x09, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x41, 0x55, 0x54, 0x48, 0x52, 0x45, 0x41, 0x44, 0x12, 0x1d, 0x0a, 0x0a, 0x41,
	0x55, 0x54, 0x48, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x41, 0x55, 0x54, 0x48, 0x57, 0x52, 0x49, 0x54, 0x45, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x44,
	0x4d, 0x49, 0x4e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x41, 0x44, 0x4d, 0x49, 0x4e,
	0x22, 0xa3, 0x01, 0x0a, 0x09, 0x53, 0x64, 0x66, 0x73, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x3e,
	0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x53, 0x64, 0x66, 0x73, 0x55, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x1a, 0x56,
	0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x53, 0x64, 0x66, 0x73, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc7, 0x01, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x0b, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x64, 0x66, 0x73, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x44, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x44,
	0x22, 0x65, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x09, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x45, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x44, 0x22, 0x68,
	0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x09, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x90, 0x01, 0x0a, 0x15, 0x53, 0x65, 0x74,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x53, 0x64, 0x66, 0x73, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x70, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x44, 0x22, 0x6c, 0x0a, 0x16, 0x53,
	0x65, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3c, 0x0a, 0x09, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x09,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x66, 0x0a, 0x16, 0x53, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49,
	0x44, 0x22, 0x6d, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0x30, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x49, 0x44, 0x22, 0x9b, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x64, 0x66,
	0x73, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x32, 0xf5, 0x03, 0x0a, 0x0f, 0x53, 0x64, 0x66, 0x73, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x52, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x22, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x25, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x53, 0x64, 0x66, 0x73,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x29, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x53, 0x65, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x74, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x6a, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x53, 0x64, 0x66, 0x73, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x2a, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2b, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75,
	0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58,
	0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x24, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x25, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75,
	0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x30, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70,
	0x2f, 0x73, 0x64, 0x66, 0x73, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2d, 0x67, 0x6f, 0x2f,
	0x73, 0x64, 0x66, 0x73, 0x2f, 0x3b, 0x73, 0x64, 0x66, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_SDFSCli_proto_rawDescOnce sync.Once
	file_SDFSCli_proto_rawDescData = file_SDFSCli_proto_rawDesc
)

func file_SDFSCli_proto_rawDescGZIP() []byte {
	file_SDFSCli_proto_rawDescOnce.Do(func() {
		file_SDFSCli_proto_rawDescData = protoimpl.X.CompressGZIP(file_SDFSCli_proto_rawDescData)
	})
	return file_SDFSCli_proto_rawDescData
}

var file_SDFSCli_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_SDFSCli_proto_goTypes = []interface{}{
	(*SdfsUser)(nil),                // 0: org.opendedup.grpc.SdfsUser
	(*SdfsPermissions)(nil),         // 1: org.opendedup.grpc.SdfsPermissions
	(*SdfsUsers)(nil),               // 2: org.opendedup.grpc.SdfsUsers
	(*AddUserRequest)(nil),          // 3: org.opendedup.grpc.AddUserRequest
	(*AddUserResponse)(nil),         // 4: org.opendedup.grpc.AddUserResponse
	(*DeleteUserRequest)(nil),       // 5: org.opendedup.grpc.DeleteUserRequest
	(*DeleteUserResponse)(nil),      // 6: org.opendedup.grpc.DeleteUserResponse
	(*SetPermissionsRequest)(nil),   // 7: org.opendedup.grpc.SetPermissionsRequest
	(*SetPermissionsResponse)(nil),  // 8: org.opendedup.grpc.SetPermissionsResponse
	(*SetUserPasswordRequest)(nil),  // 9: org.opendedup.grpc.SetUserPasswordRequest
	(*SetUserPasswordResponse)(nil), // 10: org.opendedup.grpc.SetUserPasswordResponse
	(*ListUsersRequest)(nil),        // 11: org.opendedup.grpc.ListUsersRequest
	(*ListUsersResponse)(nil),       // 12: org.opendedup.grpc.ListUsersResponse
	nil,                             // 13: org.opendedup.grpc.SdfsUsers.UsersEntry
	(ErrorCodes)(0),                 // 14: org.opendedup.grpc.errorCodes
}
var file_SDFSCli_proto_depIdxs = []int32{
	1,  // 0: org.opendedup.grpc.SdfsUser.permissions:type_name -> org.opendedup.grpc.SdfsPermissions
	13, // 1: org.opendedup.grpc.SdfsUsers.users:type_name -> org.opendedup.grpc.SdfsUsers.UsersEntry
	1,  // 2: org.opendedup.grpc.AddUserRequest.permissions:type_name -> org.opendedup.grpc.SdfsPermissions
	14, // 3: org.opendedup.grpc.AddUserResponse.errorCode:type_name -> org.opendedup.grpc.errorCodes
	14, // 4: org.opendedup.grpc.DeleteUserResponse.errorCode:type_name -> org.opendedup.grpc.errorCodes
	1,  // 5: org.opendedup.grpc.SetPermissionsRequest.permissions:type_name -> org.opendedup.grpc.SdfsPermissions
	14, // 6: org.opendedup.grpc.SetPermissionsResponse.errorCode:type_name -> org.opendedup.grpc.errorCodes
	14, // 7: org.opendedup.grpc.SetUserPasswordResponse.errorCode:type_name -> org.opendedup.grpc.errorCodes
	0,  // 8: org.opendedup.grpc.ListUsersResponse.users:type_name -> org.opendedup.grpc.SdfsUser
	14, // 9: org.opendedup.grpc.ListUsersResponse.errorCode:type_name -> org.opendedup.grpc.errorCodes
	0,  // 10: org.opendedup.grpc.SdfsUsers.UsersEntry.value:type_name -> org.opendedup.grpc.SdfsUser
	3,  // 11: org.opendedup.grpc.SdfsUserService.AddUser:input_type -> org.opendedup.grpc.AddUserRequest
	5,  // 12: org.opendedup.grpc.SdfsUserService.DeleteUser:input_type -> org.opendedup.grpc.DeleteUserRequest
	7,  // 13: org.opendedup.grpc.SdfsUserService.SetSdfsPermissions:input_type -> org.opendedup.grpc.SetPermissionsRequest
	9,  // 14: org.opendedup.grpc.SdfsUserService.SetSdfsPassword:input_type -> org.opendedup.grpc.SetUserPasswordRequest
	11, // 15: org.opendedup.grpc.SdfsUserService.ListUsers:input_type -> org.opendedup.grpc.ListUsersRequest
	4,  // 16: org.opendedup.grpc.SdfsUserService.AddUser:output_type -> org.opendedup.grpc.AddUserResponse
	6,  // 17: org.opendedup.grpc.SdfsUserService.DeleteUser:output_type -> org.opendedup.grpc.DeleteUserResponse
	8,  // 18: org.opendedup.grpc.SdfsUserService.SetSdfsPermissions:output_type -> org.opendedup.grpc.SetPermissionsResponse
	10, // 19: org.opendedup.grpc.SdfsUserService.SetSdfsPassword:output_type -> org.opendedup.grpc.SetUserPasswordResponse
	12, // 20: org.opendedup.grpc.SdfsUserService.ListUsers:output_type -> org.opendedup.grpc.ListUsersResponse
	16, // [16:21] is the sub-list for method output_type
	11, // [11:16] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_SDFSCli_proto_init() }
func file_SDFSCli_proto_init() {
	if File_SDFSCli_proto != nil {
		return
	}
	file_FileInfo_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_SDFSCli_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdfsUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SDFSCli_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdfsPermissions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SDFSCli_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdfsUsers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SDFSCli_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SDFSCli_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SDFSCli_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SDFSCli_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SDFSCli_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPermissionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SDFSCli_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPermissionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SDFSCli_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetUserPasswordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SDFSCli_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetUserPasswordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SDFSCli_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUsersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SDFSCli_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUsersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_SDFSCli_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_SDFSCli_proto_goTypes,
		DependencyIndexes: file_SDFSCli_proto_depIdxs,
		MessageInfos:      file_SDFSCli_proto_msgTypes,
	}.Build()
	File_SDFSCli_proto = out.File
	file_SDFSCli_proto_rawDesc = nil
	file_SDFSCli_proto_goTypes = nil
	file_SDFSCli_proto_depIdxs = nil
}
