// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: SDFSCli.proto

package sdfs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SdfsUserServiceClient is the client API for SdfsUserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SdfsUserServiceClient interface {
	AddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*AddUserResponse, error)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
	SetSdfsPermissions(ctx context.Context, in *SetPermissionsRequest, opts ...grpc.CallOption) (*SetPermissionsResponse, error)
	SetSdfsPassword(ctx context.Context, in *SetUserPasswordRequest, opts ...grpc.CallOption) (*SetUserPasswordResponse, error)
	ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error)
}

type sdfsUserServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSdfsUserServiceClient(cc grpc.ClientConnInterface) SdfsUserServiceClient {
	return &sdfsUserServiceClient{cc}
}

func (c *sdfsUserServiceClient) AddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*AddUserResponse, error) {
	out := new(AddUserResponse)
	err := c.cc.Invoke(ctx, "/org.opendedup.grpc.SdfsUserService/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sdfsUserServiceClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	out := new(DeleteUserResponse)
	err := c.cc.Invoke(ctx, "/org.opendedup.grpc.SdfsUserService/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sdfsUserServiceClient) SetSdfsPermissions(ctx context.Context, in *SetPermissionsRequest, opts ...grpc.CallOption) (*SetPermissionsResponse, error) {
	out := new(SetPermissionsResponse)
	err := c.cc.Invoke(ctx, "/org.opendedup.grpc.SdfsUserService/SetSdfsPermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sdfsUserServiceClient) SetSdfsPassword(ctx context.Context, in *SetUserPasswordRequest, opts ...grpc.CallOption) (*SetUserPasswordResponse, error) {
	out := new(SetUserPasswordResponse)
	err := c.cc.Invoke(ctx, "/org.opendedup.grpc.SdfsUserService/SetSdfsPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sdfsUserServiceClient) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error) {
	out := new(ListUsersResponse)
	err := c.cc.Invoke(ctx, "/org.opendedup.grpc.SdfsUserService/ListUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SdfsUserServiceServer is the server API for SdfsUserService service.
// All implementations must embed UnimplementedSdfsUserServiceServer
// for forward compatibility
type SdfsUserServiceServer interface {
	AddUser(context.Context, *AddUserRequest) (*AddUserResponse, error)
	DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error)
	SetSdfsPermissions(context.Context, *SetPermissionsRequest) (*SetPermissionsResponse, error)
	SetSdfsPassword(context.Context, *SetUserPasswordRequest) (*SetUserPasswordResponse, error)
	ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error)
	mustEmbedUnimplementedSdfsUserServiceServer()
}

// UnimplementedSdfsUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSdfsUserServiceServer struct {
}

func (UnimplementedSdfsUserServiceServer) AddUser(context.Context, *AddUserRequest) (*AddUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedSdfsUserServiceServer) DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedSdfsUserServiceServer) SetSdfsPermissions(context.Context, *SetPermissionsRequest) (*SetPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSdfsPermissions not implemented")
}
func (UnimplementedSdfsUserServiceServer) SetSdfsPassword(context.Context, *SetUserPasswordRequest) (*SetUserPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSdfsPassword not implemented")
}
func (UnimplementedSdfsUserServiceServer) ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedSdfsUserServiceServer) mustEmbedUnimplementedSdfsUserServiceServer() {}

// UnsafeSdfsUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SdfsUserServiceServer will
// result in compilation errors.
type UnsafeSdfsUserServiceServer interface {
	mustEmbedUnimplementedSdfsUserServiceServer()
}

func RegisterSdfsUserServiceServer(s grpc.ServiceRegistrar, srv SdfsUserServiceServer) {
	s.RegisterService(&SdfsUserService_ServiceDesc, srv)
}

func _SdfsUserService_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdfsUserServiceServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.opendedup.grpc.SdfsUserService/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdfsUserServiceServer).AddUser(ctx, req.(*AddUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SdfsUserService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdfsUserServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.opendedup.grpc.SdfsUserService/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdfsUserServiceServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SdfsUserService_SetSdfsPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdfsUserServiceServer).SetSdfsPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.opendedup.grpc.SdfsUserService/SetSdfsPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdfsUserServiceServer).SetSdfsPermissions(ctx, req.(*SetPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SdfsUserService_SetSdfsPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdfsUserServiceServer).SetSdfsPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.opendedup.grpc.SdfsUserService/SetSdfsPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdfsUserServiceServer).SetSdfsPassword(ctx, req.(*SetUserPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SdfsUserService_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdfsUserServiceServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.opendedup.grpc.SdfsUserService/ListUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdfsUserServiceServer).ListUsers(ctx, req.(*ListUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SdfsUserService_ServiceDesc is the grpc.ServiceDesc for SdfsUserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SdfsUserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "org.opendedup.grpc.SdfsUserService",
	HandlerType: (*SdfsUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddUser",
			Handler:    _SdfsUserService_AddUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _SdfsUserService_DeleteUser_Handler,
		},
		{
			MethodName: "SetSdfsPermissions",
			Handler:    _SdfsUserService_SetSdfsPermissions_Handler,
		},
		{
			MethodName: "SetSdfsPassword",
			Handler:    _SdfsUserService_SetSdfsPassword_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _SdfsUserService_ListUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "SDFSCli.proto",
}
