// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: IOService.proto

package sdfs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileIOServiceClient is the client API for FileIOService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileIOServiceClient interface {
	// Define a RPC operation
	GetXAttrSize(ctx context.Context, in *GetXAttrSizeRequest, opts ...grpc.CallOption) (*GetXAttrSizeResponse, error)
	Fsync(ctx context.Context, in *FsyncRequest, opts ...grpc.CallOption) (*FsyncResponse, error)
	SetXAttr(ctx context.Context, in *SetXAttrRequest, opts ...grpc.CallOption) (*SetXAttrResponse, error)
	RemoveXAttr(ctx context.Context, in *RemoveXAttrRequest, opts ...grpc.CallOption) (*RemoveXAttrResponse, error)
	GetXAttr(ctx context.Context, in *GetXAttrRequest, opts ...grpc.CallOption) (*GetXAttrResponse, error)
	Utime(ctx context.Context, in *UtimeRequest, opts ...grpc.CallOption) (*UtimeResponse, error)
	Truncate(ctx context.Context, in *TruncateRequest, opts ...grpc.CallOption) (*TruncateResponse, error)
	SymLink(ctx context.Context, in *SymLinkRequest, opts ...grpc.CallOption) (*SymLinkResponse, error)
	ReadLink(ctx context.Context, in *LinkRequest, opts ...grpc.CallOption) (*LinkResponse, error)
	GetAttr(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (*StatResponse, error)
	Flush(ctx context.Context, in *FlushRequest, opts ...grpc.CallOption) (*FlushResponse, error)
	Chown(ctx context.Context, in *ChownRequest, opts ...grpc.CallOption) (*ChownResponse, error)
	Chmod(ctx context.Context, in *ChmodRequest, opts ...grpc.CallOption) (*ChmodResponse, error)
	MkDir(ctx context.Context, in *MkDirRequest, opts ...grpc.CallOption) (*MkDirResponse, error)
	RmDir(ctx context.Context, in *RmDirRequest, opts ...grpc.CallOption) (*RmDirResponse, error)
	Unlink(ctx context.Context, in *UnlinkRequest, opts ...grpc.CallOption) (*UnlinkResponse, error)
	Write(ctx context.Context, in *DataWriteRequest, opts ...grpc.CallOption) (*DataWriteResponse, error)
	StreamWrite(ctx context.Context, opts ...grpc.CallOption) (FileIOService_StreamWriteClient, error)
	Read(ctx context.Context, in *DataReadRequest, opts ...grpc.CallOption) (*DataReadResponse, error)
	Release(ctx context.Context, in *FileCloseRequest, opts ...grpc.CallOption) (*FileCloseResponse, error)
	Mknod(ctx context.Context, in *MkNodRequest, opts ...grpc.CallOption) (*MkNodResponse, error)
	Open(ctx context.Context, in *FileOpenRequest, opts ...grpc.CallOption) (*FileOpenResponse, error)
	GetFileInfo(ctx context.Context, in *FileInfoRequest, opts ...grpc.CallOption) (*FileMessageResponse, error)
	GetaAllFileInfo(ctx context.Context, in *FileInfoRequest, opts ...grpc.CallOption) (FileIOService_GetaAllFileInfoClient, error)
	CreateCopy(ctx context.Context, in *FileSnapshotRequest, opts ...grpc.CallOption) (*FileSnapshotResponse, error)
	FileExists(ctx context.Context, in *FileExistsRequest, opts ...grpc.CallOption) (*FileExistsResponse, error)
	MkDirAll(ctx context.Context, in *MkDirRequest, opts ...grpc.CallOption) (*MkDirResponse, error)
	Stat(ctx context.Context, in *FileInfoRequest, opts ...grpc.CallOption) (*FileMessageResponse, error)
	Rename(ctx context.Context, in *FileRenameRequest, opts ...grpc.CallOption) (*FileRenameResponse, error)
	CopyExtent(ctx context.Context, in *CopyExtentRequest, opts ...grpc.CallOption) (*CopyExtentResponse, error)
	SetUserMetaData(ctx context.Context, in *SetUserMetaDataRequest, opts ...grpc.CallOption) (*SetUserMetaDataResponse, error)
	GetCloudFile(ctx context.Context, in *GetCloudFileRequest, opts ...grpc.CallOption) (*GetCloudFileResponse, error)
	GetCloudMetaFile(ctx context.Context, in *GetCloudFileRequest, opts ...grpc.CallOption) (*GetCloudFileResponse, error)
	StatFS(ctx context.Context, in *StatFSRequest, opts ...grpc.CallOption) (*StatFSResponse, error)
	FileNotification(ctx context.Context, in *SyncNotificationSubscription, opts ...grpc.CallOption) (FileIOService_FileNotificationClient, error)
	SetRetrievalTier(ctx context.Context, in *SetRetrievalTierRequest, opts ...grpc.CallOption) (*SetRetrievalTierResponse, error)
	GetRetrievalTier(ctx context.Context, in *GetRetrievalTierRequest, opts ...grpc.CallOption) (*GetRetrievalTierResponse, error)
}

type fileIOServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileIOServiceClient(cc grpc.ClientConnInterface) FileIOServiceClient {
	return &fileIOServiceClient{cc}
}

func (c *fileIOServiceClient) GetXAttrSize(ctx context.Context, in *GetXAttrSizeRequest, opts ...grpc.CallOption) (*GetXAttrSizeResponse, error) {
	out := new(GetXAttrSizeResponse)
	err := c.cc.Invoke(ctx, "/org.opendedup.grpc.FileIOService/GetXAttrSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileIOServiceClient) Fsync(ctx context.Context, in *FsyncRequest, opts ...grpc.CallOption) (*FsyncResponse, error) {
	out := new(FsyncResponse)
	err := c.cc.Invoke(ctx, "/org.opendedup.grpc.FileIOService/Fsync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileIOServiceClient) SetXAttr(ctx context.Context, in *SetXAttrRequest, opts ...grpc.CallOption) (*SetXAttrResponse, error) {
	out := new(SetXAttrResponse)
	err := c.cc.Invoke(ctx, "/org.opendedup.grpc.FileIOService/SetXAttr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileIOServiceClient) RemoveXAttr(ctx context.Context, in *RemoveXAttrRequest, opts ...grpc.CallOption) (*RemoveXAttrResponse, error) {
	out := new(RemoveXAttrResponse)
	err := c.cc.Invoke(ctx, "/org.opendedup.grpc.FileIOService/RemoveXAttr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileIOServiceClient) GetXAttr(ctx context.Context, in *GetXAttrRequest, opts ...grpc.CallOption) (*GetXAttrResponse, error) {
	out := new(GetXAttrResponse)
	err := c.cc.Invoke(ctx, "/org.opendedup.grpc.FileIOService/GetXAttr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileIOServiceClient) Utime(ctx context.Context, in *UtimeRequest, opts ...grpc.CallOption) (*UtimeResponse, error) {
	out := new(UtimeResponse)
	err := c.cc.Invoke(ctx, "/org.opendedup.grpc.FileIOService/Utime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileIOServiceClient) Truncate(ctx context.Context, in *TruncateRequest, opts ...grpc.CallOption) (*TruncateResponse, error) {
	out := new(TruncateResponse)
	err := c.cc.Invoke(ctx, "/org.opendedup.grpc.FileIOService/Truncate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileIOServiceClient) SymLink(ctx context.Context, in *SymLinkRequest, opts ...grpc.CallOption) (*SymLinkResponse, error) {
	out := new(SymLinkResponse)
	err := c.cc.Invoke(ctx, "/org.opendedup.grpc.FileIOService/SymLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileIOServiceClient) ReadLink(ctx context.Context, in *LinkRequest, opts ...grpc.CallOption) (*LinkResponse, error) {
	out := new(LinkResponse)
	err := c.cc.Invoke(ctx, "/org.opendedup.grpc.FileIOService/ReadLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileIOServiceClient) GetAttr(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (*StatResponse, error) {
	out := new(StatResponse)
	err := c.cc.Invoke(ctx, "/org.opendedup.grpc.FileIOService/GetAttr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileIOServiceClient) Flush(ctx context.Context, in *FlushRequest, opts ...grpc.CallOption) (*FlushResponse, error) {
	out := new(FlushResponse)
	err := c.cc.Invoke(ctx, "/org.opendedup.grpc.FileIOService/Flush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileIOServiceClient) Chown(ctx context.Context, in *ChownRequest, opts ...grpc.CallOption) (*ChownResponse, error) {
	out := new(ChownResponse)
	err := c.cc.Invoke(ctx, "/org.opendedup.grpc.FileIOService/Chown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileIOServiceClient) Chmod(ctx context.Context, in *ChmodRequest, opts ...grpc.CallOption) (*ChmodResponse, error) {
	out := new(ChmodResponse)
	err := c.cc.Invoke(ctx, "/org.opendedup.grpc.FileIOService/Chmod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileIOServiceClient) MkDir(ctx context.Context, in *MkDirRequest, opts ...grpc.CallOption) (*MkDirResponse, error) {
	out := new(MkDirResponse)
	err := c.cc.Invoke(ctx, "/org.opendedup.grpc.FileIOService/MkDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileIOServiceClient) RmDir(ctx context.Context, in *RmDirRequest, opts ...grpc.CallOption) (*RmDirResponse, error) {
	out := new(RmDirResponse)
	err := c.cc.Invoke(ctx, "/org.opendedup.grpc.FileIOService/RmDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileIOServiceClient) Unlink(ctx context.Context, in *UnlinkRequest, opts ...grpc.CallOption) (*UnlinkResponse, error) {
	out := new(UnlinkResponse)
	err := c.cc.Invoke(ctx, "/org.opendedup.grpc.FileIOService/Unlink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileIOServiceClient) Write(ctx context.Context, in *DataWriteRequest, opts ...grpc.CallOption) (*DataWriteResponse, error) {
	out := new(DataWriteResponse)
	err := c.cc.Invoke(ctx, "/org.opendedup.grpc.FileIOService/Write", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileIOServiceClient) StreamWrite(ctx context.Context, opts ...grpc.CallOption) (FileIOService_StreamWriteClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileIOService_ServiceDesc.Streams[0], "/org.opendedup.grpc.FileIOService/StreamWrite", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileIOServiceStreamWriteClient{stream}
	return x, nil
}

type FileIOService_StreamWriteClient interface {
	Send(*DataWriteRequest) error
	CloseAndRecv() (*DataWriteResponse, error)
	grpc.ClientStream
}

type fileIOServiceStreamWriteClient struct {
	grpc.ClientStream
}

func (x *fileIOServiceStreamWriteClient) Send(m *DataWriteRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileIOServiceStreamWriteClient) CloseAndRecv() (*DataWriteResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(DataWriteResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileIOServiceClient) Read(ctx context.Context, in *DataReadRequest, opts ...grpc.CallOption) (*DataReadResponse, error) {
	out := new(DataReadResponse)
	err := c.cc.Invoke(ctx, "/org.opendedup.grpc.FileIOService/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileIOServiceClient) Release(ctx context.Context, in *FileCloseRequest, opts ...grpc.CallOption) (*FileCloseResponse, error) {
	out := new(FileCloseResponse)
	err := c.cc.Invoke(ctx, "/org.opendedup.grpc.FileIOService/Release", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileIOServiceClient) Mknod(ctx context.Context, in *MkNodRequest, opts ...grpc.CallOption) (*MkNodResponse, error) {
	out := new(MkNodResponse)
	err := c.cc.Invoke(ctx, "/org.opendedup.grpc.FileIOService/Mknod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileIOServiceClient) Open(ctx context.Context, in *FileOpenRequest, opts ...grpc.CallOption) (*FileOpenResponse, error) {
	out := new(FileOpenResponse)
	err := c.cc.Invoke(ctx, "/org.opendedup.grpc.FileIOService/Open", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileIOServiceClient) GetFileInfo(ctx context.Context, in *FileInfoRequest, opts ...grpc.CallOption) (*FileMessageResponse, error) {
	out := new(FileMessageResponse)
	err := c.cc.Invoke(ctx, "/org.opendedup.grpc.FileIOService/GetFileInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileIOServiceClient) GetaAllFileInfo(ctx context.Context, in *FileInfoRequest, opts ...grpc.CallOption) (FileIOService_GetaAllFileInfoClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileIOService_ServiceDesc.Streams[1], "/org.opendedup.grpc.FileIOService/GetaAllFileInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileIOServiceGetaAllFileInfoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FileIOService_GetaAllFileInfoClient interface {
	Recv() (*FileMessageResponse, error)
	grpc.ClientStream
}

type fileIOServiceGetaAllFileInfoClient struct {
	grpc.ClientStream
}

func (x *fileIOServiceGetaAllFileInfoClient) Recv() (*FileMessageResponse, error) {
	m := new(FileMessageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileIOServiceClient) CreateCopy(ctx context.Context, in *FileSnapshotRequest, opts ...grpc.CallOption) (*FileSnapshotResponse, error) {
	out := new(FileSnapshotResponse)
	err := c.cc.Invoke(ctx, "/org.opendedup.grpc.FileIOService/CreateCopy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileIOServiceClient) FileExists(ctx context.Context, in *FileExistsRequest, opts ...grpc.CallOption) (*FileExistsResponse, error) {
	out := new(FileExistsResponse)
	err := c.cc.Invoke(ctx, "/org.opendedup.grpc.FileIOService/FileExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileIOServiceClient) MkDirAll(ctx context.Context, in *MkDirRequest, opts ...grpc.CallOption) (*MkDirResponse, error) {
	out := new(MkDirResponse)
	err := c.cc.Invoke(ctx, "/org.opendedup.grpc.FileIOService/MkDirAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileIOServiceClient) Stat(ctx context.Context, in *FileInfoRequest, opts ...grpc.CallOption) (*FileMessageResponse, error) {
	out := new(FileMessageResponse)
	err := c.cc.Invoke(ctx, "/org.opendedup.grpc.FileIOService/Stat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileIOServiceClient) Rename(ctx context.Context, in *FileRenameRequest, opts ...grpc.CallOption) (*FileRenameResponse, error) {
	out := new(FileRenameResponse)
	err := c.cc.Invoke(ctx, "/org.opendedup.grpc.FileIOService/Rename", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileIOServiceClient) CopyExtent(ctx context.Context, in *CopyExtentRequest, opts ...grpc.CallOption) (*CopyExtentResponse, error) {
	out := new(CopyExtentResponse)
	err := c.cc.Invoke(ctx, "/org.opendedup.grpc.FileIOService/CopyExtent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileIOServiceClient) SetUserMetaData(ctx context.Context, in *SetUserMetaDataRequest, opts ...grpc.CallOption) (*SetUserMetaDataResponse, error) {
	out := new(SetUserMetaDataResponse)
	err := c.cc.Invoke(ctx, "/org.opendedup.grpc.FileIOService/SetUserMetaData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileIOServiceClient) GetCloudFile(ctx context.Context, in *GetCloudFileRequest, opts ...grpc.CallOption) (*GetCloudFileResponse, error) {
	out := new(GetCloudFileResponse)
	err := c.cc.Invoke(ctx, "/org.opendedup.grpc.FileIOService/GetCloudFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileIOServiceClient) GetCloudMetaFile(ctx context.Context, in *GetCloudFileRequest, opts ...grpc.CallOption) (*GetCloudFileResponse, error) {
	out := new(GetCloudFileResponse)
	err := c.cc.Invoke(ctx, "/org.opendedup.grpc.FileIOService/GetCloudMetaFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileIOServiceClient) StatFS(ctx context.Context, in *StatFSRequest, opts ...grpc.CallOption) (*StatFSResponse, error) {
	out := new(StatFSResponse)
	err := c.cc.Invoke(ctx, "/org.opendedup.grpc.FileIOService/StatFS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileIOServiceClient) FileNotification(ctx context.Context, in *SyncNotificationSubscription, opts ...grpc.CallOption) (FileIOService_FileNotificationClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileIOService_ServiceDesc.Streams[2], "/org.opendedup.grpc.FileIOService/fileNotification", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileIOServiceFileNotificationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FileIOService_FileNotificationClient interface {
	Recv() (*FileMessageResponse, error)
	grpc.ClientStream
}

type fileIOServiceFileNotificationClient struct {
	grpc.ClientStream
}

func (x *fileIOServiceFileNotificationClient) Recv() (*FileMessageResponse, error) {
	m := new(FileMessageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileIOServiceClient) SetRetrievalTier(ctx context.Context, in *SetRetrievalTierRequest, opts ...grpc.CallOption) (*SetRetrievalTierResponse, error) {
	out := new(SetRetrievalTierResponse)
	err := c.cc.Invoke(ctx, "/org.opendedup.grpc.FileIOService/SetRetrievalTier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileIOServiceClient) GetRetrievalTier(ctx context.Context, in *GetRetrievalTierRequest, opts ...grpc.CallOption) (*GetRetrievalTierResponse, error) {
	out := new(GetRetrievalTierResponse)
	err := c.cc.Invoke(ctx, "/org.opendedup.grpc.FileIOService/GetRetrievalTier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileIOServiceServer is the server API for FileIOService service.
// All implementations must embed UnimplementedFileIOServiceServer
// for forward compatibility
type FileIOServiceServer interface {
	// Define a RPC operation
	GetXAttrSize(context.Context, *GetXAttrSizeRequest) (*GetXAttrSizeResponse, error)
	Fsync(context.Context, *FsyncRequest) (*FsyncResponse, error)
	SetXAttr(context.Context, *SetXAttrRequest) (*SetXAttrResponse, error)
	RemoveXAttr(context.Context, *RemoveXAttrRequest) (*RemoveXAttrResponse, error)
	GetXAttr(context.Context, *GetXAttrRequest) (*GetXAttrResponse, error)
	Utime(context.Context, *UtimeRequest) (*UtimeResponse, error)
	Truncate(context.Context, *TruncateRequest) (*TruncateResponse, error)
	SymLink(context.Context, *SymLinkRequest) (*SymLinkResponse, error)
	ReadLink(context.Context, *LinkRequest) (*LinkResponse, error)
	GetAttr(context.Context, *StatRequest) (*StatResponse, error)
	Flush(context.Context, *FlushRequest) (*FlushResponse, error)
	Chown(context.Context, *ChownRequest) (*ChownResponse, error)
	Chmod(context.Context, *ChmodRequest) (*ChmodResponse, error)
	MkDir(context.Context, *MkDirRequest) (*MkDirResponse, error)
	RmDir(context.Context, *RmDirRequest) (*RmDirResponse, error)
	Unlink(context.Context, *UnlinkRequest) (*UnlinkResponse, error)
	Write(context.Context, *DataWriteRequest) (*DataWriteResponse, error)
	StreamWrite(FileIOService_StreamWriteServer) error
	Read(context.Context, *DataReadRequest) (*DataReadResponse, error)
	Release(context.Context, *FileCloseRequest) (*FileCloseResponse, error)
	Mknod(context.Context, *MkNodRequest) (*MkNodResponse, error)
	Open(context.Context, *FileOpenRequest) (*FileOpenResponse, error)
	GetFileInfo(context.Context, *FileInfoRequest) (*FileMessageResponse, error)
	GetaAllFileInfo(*FileInfoRequest, FileIOService_GetaAllFileInfoServer) error
	CreateCopy(context.Context, *FileSnapshotRequest) (*FileSnapshotResponse, error)
	FileExists(context.Context, *FileExistsRequest) (*FileExistsResponse, error)
	MkDirAll(context.Context, *MkDirRequest) (*MkDirResponse, error)
	Stat(context.Context, *FileInfoRequest) (*FileMessageResponse, error)
	Rename(context.Context, *FileRenameRequest) (*FileRenameResponse, error)
	CopyExtent(context.Context, *CopyExtentRequest) (*CopyExtentResponse, error)
	SetUserMetaData(context.Context, *SetUserMetaDataRequest) (*SetUserMetaDataResponse, error)
	GetCloudFile(context.Context, *GetCloudFileRequest) (*GetCloudFileResponse, error)
	GetCloudMetaFile(context.Context, *GetCloudFileRequest) (*GetCloudFileResponse, error)
	StatFS(context.Context, *StatFSRequest) (*StatFSResponse, error)
	FileNotification(*SyncNotificationSubscription, FileIOService_FileNotificationServer) error
	SetRetrievalTier(context.Context, *SetRetrievalTierRequest) (*SetRetrievalTierResponse, error)
	GetRetrievalTier(context.Context, *GetRetrievalTierRequest) (*GetRetrievalTierResponse, error)
	mustEmbedUnimplementedFileIOServiceServer()
}

// UnimplementedFileIOServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFileIOServiceServer struct {
}

func (UnimplementedFileIOServiceServer) GetXAttrSize(context.Context, *GetXAttrSizeRequest) (*GetXAttrSizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetXAttrSize not implemented")
}
func (UnimplementedFileIOServiceServer) Fsync(context.Context, *FsyncRequest) (*FsyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fsync not implemented")
}
func (UnimplementedFileIOServiceServer) SetXAttr(context.Context, *SetXAttrRequest) (*SetXAttrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetXAttr not implemented")
}
func (UnimplementedFileIOServiceServer) RemoveXAttr(context.Context, *RemoveXAttrRequest) (*RemoveXAttrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveXAttr not implemented")
}
func (UnimplementedFileIOServiceServer) GetXAttr(context.Context, *GetXAttrRequest) (*GetXAttrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetXAttr not implemented")
}
func (UnimplementedFileIOServiceServer) Utime(context.Context, *UtimeRequest) (*UtimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Utime not implemented")
}
func (UnimplementedFileIOServiceServer) Truncate(context.Context, *TruncateRequest) (*TruncateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Truncate not implemented")
}
func (UnimplementedFileIOServiceServer) SymLink(context.Context, *SymLinkRequest) (*SymLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SymLink not implemented")
}
func (UnimplementedFileIOServiceServer) ReadLink(context.Context, *LinkRequest) (*LinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadLink not implemented")
}
func (UnimplementedFileIOServiceServer) GetAttr(context.Context, *StatRequest) (*StatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAttr not implemented")
}
func (UnimplementedFileIOServiceServer) Flush(context.Context, *FlushRequest) (*FlushResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Flush not implemented")
}
func (UnimplementedFileIOServiceServer) Chown(context.Context, *ChownRequest) (*ChownResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Chown not implemented")
}
func (UnimplementedFileIOServiceServer) Chmod(context.Context, *ChmodRequest) (*ChmodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Chmod not implemented")
}
func (UnimplementedFileIOServiceServer) MkDir(context.Context, *MkDirRequest) (*MkDirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MkDir not implemented")
}
func (UnimplementedFileIOServiceServer) RmDir(context.Context, *RmDirRequest) (*RmDirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RmDir not implemented")
}
func (UnimplementedFileIOServiceServer) Unlink(context.Context, *UnlinkRequest) (*UnlinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unlink not implemented")
}
func (UnimplementedFileIOServiceServer) Write(context.Context, *DataWriteRequest) (*DataWriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Write not implemented")
}
func (UnimplementedFileIOServiceServer) StreamWrite(FileIOService_StreamWriteServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamWrite not implemented")
}
func (UnimplementedFileIOServiceServer) Read(context.Context, *DataReadRequest) (*DataReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedFileIOServiceServer) Release(context.Context, *FileCloseRequest) (*FileCloseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Release not implemented")
}
func (UnimplementedFileIOServiceServer) Mknod(context.Context, *MkNodRequest) (*MkNodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mknod not implemented")
}
func (UnimplementedFileIOServiceServer) Open(context.Context, *FileOpenRequest) (*FileOpenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Open not implemented")
}
func (UnimplementedFileIOServiceServer) GetFileInfo(context.Context, *FileInfoRequest) (*FileMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileInfo not implemented")
}
func (UnimplementedFileIOServiceServer) GetaAllFileInfo(*FileInfoRequest, FileIOService_GetaAllFileInfoServer) error {
	return status.Errorf(codes.Unimplemented, "method GetaAllFileInfo not implemented")
}
func (UnimplementedFileIOServiceServer) CreateCopy(context.Context, *FileSnapshotRequest) (*FileSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCopy not implemented")
}
func (UnimplementedFileIOServiceServer) FileExists(context.Context, *FileExistsRequest) (*FileExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileExists not implemented")
}
func (UnimplementedFileIOServiceServer) MkDirAll(context.Context, *MkDirRequest) (*MkDirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MkDirAll not implemented")
}
func (UnimplementedFileIOServiceServer) Stat(context.Context, *FileInfoRequest) (*FileMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (UnimplementedFileIOServiceServer) Rename(context.Context, *FileRenameRequest) (*FileRenameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rename not implemented")
}
func (UnimplementedFileIOServiceServer) CopyExtent(context.Context, *CopyExtentRequest) (*CopyExtentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyExtent not implemented")
}
func (UnimplementedFileIOServiceServer) SetUserMetaData(context.Context, *SetUserMetaDataRequest) (*SetUserMetaDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserMetaData not implemented")
}
func (UnimplementedFileIOServiceServer) GetCloudFile(context.Context, *GetCloudFileRequest) (*GetCloudFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCloudFile not implemented")
}
func (UnimplementedFileIOServiceServer) GetCloudMetaFile(context.Context, *GetCloudFileRequest) (*GetCloudFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCloudMetaFile not implemented")
}
func (UnimplementedFileIOServiceServer) StatFS(context.Context, *StatFSRequest) (*StatFSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatFS not implemented")
}
func (UnimplementedFileIOServiceServer) FileNotification(*SyncNotificationSubscription, FileIOService_FileNotificationServer) error {
	return status.Errorf(codes.Unimplemented, "method FileNotification not implemented")
}
func (UnimplementedFileIOServiceServer) SetRetrievalTier(context.Context, *SetRetrievalTierRequest) (*SetRetrievalTierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRetrievalTier not implemented")
}
func (UnimplementedFileIOServiceServer) GetRetrievalTier(context.Context, *GetRetrievalTierRequest) (*GetRetrievalTierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRetrievalTier not implemented")
}
func (UnimplementedFileIOServiceServer) mustEmbedUnimplementedFileIOServiceServer() {}

// UnsafeFileIOServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileIOServiceServer will
// result in compilation errors.
type UnsafeFileIOServiceServer interface {
	mustEmbedUnimplementedFileIOServiceServer()
}

func RegisterFileIOServiceServer(s grpc.ServiceRegistrar, srv FileIOServiceServer) {
	s.RegisterService(&FileIOService_ServiceDesc, srv)
}

func _FileIOService_GetXAttrSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetXAttrSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileIOServiceServer).GetXAttrSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.opendedup.grpc.FileIOService/GetXAttrSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileIOServiceServer).GetXAttrSize(ctx, req.(*GetXAttrSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileIOService_Fsync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FsyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileIOServiceServer).Fsync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.opendedup.grpc.FileIOService/Fsync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileIOServiceServer).Fsync(ctx, req.(*FsyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileIOService_SetXAttr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetXAttrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileIOServiceServer).SetXAttr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.opendedup.grpc.FileIOService/SetXAttr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileIOServiceServer).SetXAttr(ctx, req.(*SetXAttrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileIOService_RemoveXAttr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveXAttrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileIOServiceServer).RemoveXAttr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.opendedup.grpc.FileIOService/RemoveXAttr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileIOServiceServer).RemoveXAttr(ctx, req.(*RemoveXAttrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileIOService_GetXAttr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetXAttrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileIOServiceServer).GetXAttr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.opendedup.grpc.FileIOService/GetXAttr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileIOServiceServer).GetXAttr(ctx, req.(*GetXAttrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileIOService_Utime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UtimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileIOServiceServer).Utime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.opendedup.grpc.FileIOService/Utime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileIOServiceServer).Utime(ctx, req.(*UtimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileIOService_Truncate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TruncateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileIOServiceServer).Truncate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.opendedup.grpc.FileIOService/Truncate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileIOServiceServer).Truncate(ctx, req.(*TruncateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileIOService_SymLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SymLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileIOServiceServer).SymLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.opendedup.grpc.FileIOService/SymLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileIOServiceServer).SymLink(ctx, req.(*SymLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileIOService_ReadLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileIOServiceServer).ReadLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.opendedup.grpc.FileIOService/ReadLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileIOServiceServer).ReadLink(ctx, req.(*LinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileIOService_GetAttr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileIOServiceServer).GetAttr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.opendedup.grpc.FileIOService/GetAttr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileIOServiceServer).GetAttr(ctx, req.(*StatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileIOService_Flush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileIOServiceServer).Flush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.opendedup.grpc.FileIOService/Flush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileIOServiceServer).Flush(ctx, req.(*FlushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileIOService_Chown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileIOServiceServer).Chown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.opendedup.grpc.FileIOService/Chown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileIOServiceServer).Chown(ctx, req.(*ChownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileIOService_Chmod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChmodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileIOServiceServer).Chmod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.opendedup.grpc.FileIOService/Chmod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileIOServiceServer).Chmod(ctx, req.(*ChmodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileIOService_MkDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MkDirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileIOServiceServer).MkDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.opendedup.grpc.FileIOService/MkDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileIOServiceServer).MkDir(ctx, req.(*MkDirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileIOService_RmDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RmDirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileIOServiceServer).RmDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.opendedup.grpc.FileIOService/RmDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileIOServiceServer).RmDir(ctx, req.(*RmDirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileIOService_Unlink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileIOServiceServer).Unlink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.opendedup.grpc.FileIOService/Unlink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileIOServiceServer).Unlink(ctx, req.(*UnlinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileIOService_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataWriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileIOServiceServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.opendedup.grpc.FileIOService/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileIOServiceServer).Write(ctx, req.(*DataWriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileIOService_StreamWrite_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileIOServiceServer).StreamWrite(&fileIOServiceStreamWriteServer{stream})
}

type FileIOService_StreamWriteServer interface {
	SendAndClose(*DataWriteResponse) error
	Recv() (*DataWriteRequest, error)
	grpc.ServerStream
}

type fileIOServiceStreamWriteServer struct {
	grpc.ServerStream
}

func (x *fileIOServiceStreamWriteServer) SendAndClose(m *DataWriteResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileIOServiceStreamWriteServer) Recv() (*DataWriteRequest, error) {
	m := new(DataWriteRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FileIOService_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileIOServiceServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.opendedup.grpc.FileIOService/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileIOServiceServer).Read(ctx, req.(*DataReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileIOService_Release_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileCloseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileIOServiceServer).Release(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.opendedup.grpc.FileIOService/Release",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileIOServiceServer).Release(ctx, req.(*FileCloseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileIOService_Mknod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MkNodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileIOServiceServer).Mknod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.opendedup.grpc.FileIOService/Mknod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileIOServiceServer).Mknod(ctx, req.(*MkNodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileIOService_Open_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileOpenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileIOServiceServer).Open(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.opendedup.grpc.FileIOService/Open",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileIOServiceServer).Open(ctx, req.(*FileOpenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileIOService_GetFileInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileIOServiceServer).GetFileInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.opendedup.grpc.FileIOService/GetFileInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileIOServiceServer).GetFileInfo(ctx, req.(*FileInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileIOService_GetaAllFileInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FileInfoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileIOServiceServer).GetaAllFileInfo(m, &fileIOServiceGetaAllFileInfoServer{stream})
}

type FileIOService_GetaAllFileInfoServer interface {
	Send(*FileMessageResponse) error
	grpc.ServerStream
}

type fileIOServiceGetaAllFileInfoServer struct {
	grpc.ServerStream
}

func (x *fileIOServiceGetaAllFileInfoServer) Send(m *FileMessageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _FileIOService_CreateCopy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileIOServiceServer).CreateCopy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.opendedup.grpc.FileIOService/CreateCopy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileIOServiceServer).CreateCopy(ctx, req.(*FileSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileIOService_FileExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileIOServiceServer).FileExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.opendedup.grpc.FileIOService/FileExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileIOServiceServer).FileExists(ctx, req.(*FileExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileIOService_MkDirAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MkDirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileIOServiceServer).MkDirAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.opendedup.grpc.FileIOService/MkDirAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileIOServiceServer).MkDirAll(ctx, req.(*MkDirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileIOService_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileIOServiceServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.opendedup.grpc.FileIOService/Stat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileIOServiceServer).Stat(ctx, req.(*FileInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileIOService_Rename_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRenameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileIOServiceServer).Rename(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.opendedup.grpc.FileIOService/Rename",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileIOServiceServer).Rename(ctx, req.(*FileRenameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileIOService_CopyExtent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyExtentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileIOServiceServer).CopyExtent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.opendedup.grpc.FileIOService/CopyExtent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileIOServiceServer).CopyExtent(ctx, req.(*CopyExtentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileIOService_SetUserMetaData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserMetaDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileIOServiceServer).SetUserMetaData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.opendedup.grpc.FileIOService/SetUserMetaData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileIOServiceServer).SetUserMetaData(ctx, req.(*SetUserMetaDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileIOService_GetCloudFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCloudFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileIOServiceServer).GetCloudFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.opendedup.grpc.FileIOService/GetCloudFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileIOServiceServer).GetCloudFile(ctx, req.(*GetCloudFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileIOService_GetCloudMetaFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCloudFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileIOServiceServer).GetCloudMetaFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.opendedup.grpc.FileIOService/GetCloudMetaFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileIOServiceServer).GetCloudMetaFile(ctx, req.(*GetCloudFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileIOService_StatFS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatFSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileIOServiceServer).StatFS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.opendedup.grpc.FileIOService/StatFS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileIOServiceServer).StatFS(ctx, req.(*StatFSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileIOService_FileNotification_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SyncNotificationSubscription)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileIOServiceServer).FileNotification(m, &fileIOServiceFileNotificationServer{stream})
}

type FileIOService_FileNotificationServer interface {
	Send(*FileMessageResponse) error
	grpc.ServerStream
}

type fileIOServiceFileNotificationServer struct {
	grpc.ServerStream
}

func (x *fileIOServiceFileNotificationServer) Send(m *FileMessageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _FileIOService_SetRetrievalTier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRetrievalTierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileIOServiceServer).SetRetrievalTier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.opendedup.grpc.FileIOService/SetRetrievalTier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileIOServiceServer).SetRetrievalTier(ctx, req.(*SetRetrievalTierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileIOService_GetRetrievalTier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRetrievalTierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileIOServiceServer).GetRetrievalTier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.opendedup.grpc.FileIOService/GetRetrievalTier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileIOServiceServer).GetRetrievalTier(ctx, req.(*GetRetrievalTierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FileIOService_ServiceDesc is the grpc.ServiceDesc for FileIOService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileIOService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "org.opendedup.grpc.FileIOService",
	HandlerType: (*FileIOServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetXAttrSize",
			Handler:    _FileIOService_GetXAttrSize_Handler,
		},
		{
			MethodName: "Fsync",
			Handler:    _FileIOService_Fsync_Handler,
		},
		{
			MethodName: "SetXAttr",
			Handler:    _FileIOService_SetXAttr_Handler,
		},
		{
			MethodName: "RemoveXAttr",
			Handler:    _FileIOService_RemoveXAttr_Handler,
		},
		{
			MethodName: "GetXAttr",
			Handler:    _FileIOService_GetXAttr_Handler,
		},
		{
			MethodName: "Utime",
			Handler:    _FileIOService_Utime_Handler,
		},
		{
			MethodName: "Truncate",
			Handler:    _FileIOService_Truncate_Handler,
		},
		{
			MethodName: "SymLink",
			Handler:    _FileIOService_SymLink_Handler,
		},
		{
			MethodName: "ReadLink",
			Handler:    _FileIOService_ReadLink_Handler,
		},
		{
			MethodName: "GetAttr",
			Handler:    _FileIOService_GetAttr_Handler,
		},
		{
			MethodName: "Flush",
			Handler:    _FileIOService_Flush_Handler,
		},
		{
			MethodName: "Chown",
			Handler:    _FileIOService_Chown_Handler,
		},
		{
			MethodName: "Chmod",
			Handler:    _FileIOService_Chmod_Handler,
		},
		{
			MethodName: "MkDir",
			Handler:    _FileIOService_MkDir_Handler,
		},
		{
			MethodName: "RmDir",
			Handler:    _FileIOService_RmDir_Handler,
		},
		{
			MethodName: "Unlink",
			Handler:    _FileIOService_Unlink_Handler,
		},
		{
			MethodName: "Write",
			Handler:    _FileIOService_Write_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _FileIOService_Read_Handler,
		},
		{
			MethodName: "Release",
			Handler:    _FileIOService_Release_Handler,
		},
		{
			MethodName: "Mknod",
			Handler:    _FileIOService_Mknod_Handler,
		},
		{
			MethodName: "Open",
			Handler:    _FileIOService_Open_Handler,
		},
		{
			MethodName: "GetFileInfo",
			Handler:    _FileIOService_GetFileInfo_Handler,
		},
		{
			MethodName: "CreateCopy",
			Handler:    _FileIOService_CreateCopy_Handler,
		},
		{
			MethodName: "FileExists",
			Handler:    _FileIOService_FileExists_Handler,
		},
		{
			MethodName: "MkDirAll",
			Handler:    _FileIOService_MkDirAll_Handler,
		},
		{
			MethodName: "Stat",
			Handler:    _FileIOService_Stat_Handler,
		},
		{
			MethodName: "Rename",
			Handler:    _FileIOService_Rename_Handler,
		},
		{
			MethodName: "CopyExtent",
			Handler:    _FileIOService_CopyExtent_Handler,
		},
		{
			MethodName: "SetUserMetaData",
			Handler:    _FileIOService_SetUserMetaData_Handler,
		},
		{
			MethodName: "GetCloudFile",
			Handler:    _FileIOService_GetCloudFile_Handler,
		},
		{
			MethodName: "GetCloudMetaFile",
			Handler:    _FileIOService_GetCloudMetaFile_Handler,
		},
		{
			MethodName: "StatFS",
			Handler:    _FileIOService_StatFS_Handler,
		},
		{
			MethodName: "SetRetrievalTier",
			Handler:    _FileIOService_SetRetrievalTier_Handler,
		},
		{
			MethodName: "GetRetrievalTier",
			Handler:    _FileIOService_GetRetrievalTier_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamWrite",
			Handler:       _FileIOService_StreamWrite_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetaAllFileInfo",
			Handler:       _FileIOService_GetaAllFileInfo_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "fileNotification",
			Handler:       _FileIOService_FileNotification_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "IOService.proto",
}
