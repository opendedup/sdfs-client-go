// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.6.0
// source: Storage.proto

package sdfs

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SparseDataFlags int32

const (
	SparseDataFlags_RECONSTRUCTED SparseDataFlags = 0
)

// Enum value maps for SparseDataFlags.
var (
	SparseDataFlags_name = map[int32]string{
		0: "RECONSTRUCTED",
	}
	SparseDataFlags_value = map[string]int32{
		"RECONSTRUCTED": 0,
	}
)

func (x SparseDataFlags) Enum() *SparseDataFlags {
	p := new(SparseDataFlags)
	*p = x
	return p
}

func (x SparseDataFlags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SparseDataFlags) Descriptor() protoreflect.EnumDescriptor {
	return file_Storage_proto_enumTypes[0].Descriptor()
}

func (SparseDataFlags) Type() protoreflect.EnumType {
	return &file_Storage_proto_enumTypes[0]
}

func (x SparseDataFlags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SparseDataFlags.Descriptor instead.
func (SparseDataFlags) EnumDescriptor() ([]byte, []int) {
	return file_Storage_proto_rawDescGZIP(), []int{0}
}

type ActionType int32

const (
	ActionType_MFILEDELETED ActionType = 0
	ActionType_MFILEWRITTEN ActionType = 1
	ActionType_MFILERENAMED ActionType = 2
	ActionType_SFILEWRITTEN ActionType = 3
	ActionType_SFILEDELETED ActionType = 4
)

// Enum value maps for ActionType.
var (
	ActionType_name = map[int32]string{
		0: "MFILEDELETED",
		1: "MFILEWRITTEN",
		2: "MFILERENAMED",
		3: "SFILEWRITTEN",
		4: "SFILEDELETED",
	}
	ActionType_value = map[string]int32{
		"MFILEDELETED": 0,
		"MFILEWRITTEN": 1,
		"MFILERENAMED": 2,
		"SFILEWRITTEN": 3,
		"SFILEDELETED": 4,
	}
)

func (x ActionType) Enum() *ActionType {
	p := new(ActionType)
	*p = x
	return p
}

func (x ActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_Storage_proto_enumTypes[1].Descriptor()
}

func (ActionType) Type() protoreflect.EnumType {
	return &file_Storage_proto_enumTypes[1]
}

func (x ActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionType.Descriptor instead.
func (ActionType) EnumDescriptor() ([]byte, []int) {
	return file_Storage_proto_rawDescGZIP(), []int{1}
}

type Hashtype int32

const (
	Hashtype_SHA256      Hashtype = 0 //Sha256
	Hashtype_MD5         Hashtype = 1 //md5
	Hashtype_UNSUPPORTED Hashtype = 2 //Sha256 using only the first 160 bits
)

// Enum value maps for Hashtype.
var (
	Hashtype_name = map[int32]string{
		0: "SHA256",
		1: "MD5",
		2: "UNSUPPORTED",
	}
	Hashtype_value = map[string]int32{
		"SHA256":      0,
		"MD5":         1,
		"UNSUPPORTED": 2,
	}
)

func (x Hashtype) Enum() *Hashtype {
	p := new(Hashtype)
	*p = x
	return p
}

func (x Hashtype) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Hashtype) Descriptor() protoreflect.EnumDescriptor {
	return file_Storage_proto_enumTypes[2].Descriptor()
}

func (Hashtype) Type() protoreflect.EnumType {
	return &file_Storage_proto_enumTypes[2]
}

func (x Hashtype) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Hashtype.Descriptor instead.
func (Hashtype) EnumDescriptor() ([]byte, []int) {
	return file_Storage_proto_rawDescGZIP(), []int{2}
}

type CheckHashesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hashes    [][]byte `protobuf:"bytes,1,rep,name=hashes,proto3" json:"hashes,omitempty"`
	PvolumeID int64    `protobuf:"varint,2,opt,name=pvolumeID,proto3" json:"pvolumeID,omitempty"`
}

func (x *CheckHashesRequest) Reset() {
	*x = CheckHashesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Storage_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckHashesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckHashesRequest) ProtoMessage() {}

func (x *CheckHashesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Storage_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckHashesRequest.ProtoReflect.Descriptor instead.
func (*CheckHashesRequest) Descriptor() ([]byte, []int) {
	return file_Storage_proto_rawDescGZIP(), []int{0}
}

func (x *CheckHashesRequest) GetHashes() [][]byte {
	if x != nil {
		return x.Hashes
	}
	return nil
}

func (x *CheckHashesRequest) GetPvolumeID() int64 {
	if x != nil {
		return x.PvolumeID
	}
	return 0
}

type RestoreArchivesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilePath  string `protobuf:"bytes,1,opt,name=filePath,proto3" json:"filePath,omitempty"`
	PvolumeID int64  `protobuf:"varint,2,opt,name=pvolumeID,proto3" json:"pvolumeID,omitempty"`
}

func (x *RestoreArchivesRequest) Reset() {
	*x = RestoreArchivesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Storage_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoreArchivesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreArchivesRequest) ProtoMessage() {}

func (x *RestoreArchivesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Storage_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreArchivesRequest.ProtoReflect.Descriptor instead.
func (*RestoreArchivesRequest) Descriptor() ([]byte, []int) {
	return file_Storage_proto_rawDescGZIP(), []int{1}
}

func (x *RestoreArchivesRequest) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *RestoreArchivesRequest) GetPvolumeID() int64 {
	if x != nil {
		return x.PvolumeID
	}
	return 0
}

type RestoreArchivesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error     string     `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	ErrorCode ErrorCodes `protobuf:"varint,2,opt,name=errorCode,proto3,enum=org.opendedup.grpc.ErrorCodes" json:"errorCode,omitempty"`
	EventID   string     `protobuf:"bytes,3,opt,name=eventID,proto3" json:"eventID,omitempty"`
}

func (x *RestoreArchivesResponse) Reset() {
	*x = RestoreArchivesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Storage_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoreArchivesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreArchivesResponse) ProtoMessage() {}

func (x *RestoreArchivesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Storage_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreArchivesResponse.ProtoReflect.Descriptor instead.
func (*RestoreArchivesResponse) Descriptor() ([]byte, []int) {
	return file_Storage_proto_rawDescGZIP(), []int{2}
}

func (x *RestoreArchivesResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *RestoreArchivesResponse) GetErrorCode() ErrorCodes {
	if x != nil {
		return x.ErrorCode
	}
	return ErrorCodes_NOERR
}

func (x *RestoreArchivesResponse) GetEventID() string {
	if x != nil {
		return x.EventID
	}
	return ""
}

type CheckHashesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Locations []int64    `protobuf:"varint,1,rep,packed,name=locations,proto3" json:"locations,omitempty"`
	Error     string     `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	ErrorCode ErrorCodes `protobuf:"varint,3,opt,name=errorCode,proto3,enum=org.opendedup.grpc.ErrorCodes" json:"errorCode,omitempty"`
}

func (x *CheckHashesResponse) Reset() {
	*x = CheckHashesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Storage_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckHashesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckHashesResponse) ProtoMessage() {}

func (x *CheckHashesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Storage_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckHashesResponse.ProtoReflect.Descriptor instead.
func (*CheckHashesResponse) Descriptor() ([]byte, []int) {
	return file_Storage_proto_rawDescGZIP(), []int{3}
}

func (x *CheckHashesResponse) GetLocations() []int64 {
	if x != nil {
		return x.Locations
	}
	return nil
}

func (x *CheckHashesResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *CheckHashesResponse) GetErrorCode() ErrorCodes {
	if x != nil {
		return x.ErrorCode
	}
	return ErrorCodes_NOERR
}

type FileReplicationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcFilePath string `protobuf:"bytes,1,opt,name=srcFilePath,proto3" json:"srcFilePath,omitempty"`
	DstFilePath string `protobuf:"bytes,2,opt,name=dstFilePath,proto3" json:"dstFilePath,omitempty"`
	PvolumeID   int64  `protobuf:"varint,3,opt,name=pvolumeID,proto3" json:"pvolumeID,omitempty"`
	RvolumeID   int64  `protobuf:"varint,4,opt,name=rvolumeID,proto3" json:"rvolumeID,omitempty"`
	Url         string `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
	Mtls        bool   `protobuf:"varint,6,opt,name=mtls,proto3" json:"mtls,omitempty"`
}

func (x *FileReplicationRequest) Reset() {
	*x = FileReplicationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Storage_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileReplicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileReplicationRequest) ProtoMessage() {}

func (x *FileReplicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Storage_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileReplicationRequest.ProtoReflect.Descriptor instead.
func (*FileReplicationRequest) Descriptor() ([]byte, []int) {
	return file_Storage_proto_rawDescGZIP(), []int{4}
}

func (x *FileReplicationRequest) GetSrcFilePath() string {
	if x != nil {
		return x.SrcFilePath
	}
	return ""
}

func (x *FileReplicationRequest) GetDstFilePath() string {
	if x != nil {
		return x.DstFilePath
	}
	return ""
}

func (x *FileReplicationRequest) GetPvolumeID() int64 {
	if x != nil {
		return x.PvolumeID
	}
	return 0
}

func (x *FileReplicationRequest) GetRvolumeID() int64 {
	if x != nil {
		return x.RvolumeID
	}
	return 0
}

func (x *FileReplicationRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *FileReplicationRequest) GetMtls() bool {
	if x != nil {
		return x.Mtls
	}
	return false
}

type AddReplicaSourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PvolumeID int64  `protobuf:"varint,3,opt,name=pvolumeID,proto3" json:"pvolumeID,omitempty"`
	RvolumeID int64  `protobuf:"varint,4,opt,name=rvolumeID,proto3" json:"rvolumeID,omitempty"`
	Url       string `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
	Mtls      bool   `protobuf:"varint,6,opt,name=mtls,proto3" json:"mtls,omitempty"`
}

func (x *AddReplicaSourceRequest) Reset() {
	*x = AddReplicaSourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Storage_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddReplicaSourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddReplicaSourceRequest) ProtoMessage() {}

func (x *AddReplicaSourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Storage_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddReplicaSourceRequest.ProtoReflect.Descriptor instead.
func (*AddReplicaSourceRequest) Descriptor() ([]byte, []int) {
	return file_Storage_proto_rawDescGZIP(), []int{5}
}

func (x *AddReplicaSourceRequest) GetPvolumeID() int64 {
	if x != nil {
		return x.PvolumeID
	}
	return 0
}

func (x *AddReplicaSourceRequest) GetRvolumeID() int64 {
	if x != nil {
		return x.RvolumeID
	}
	return 0
}

func (x *AddReplicaSourceRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *AddReplicaSourceRequest) GetMtls() bool {
	if x != nil {
		return x.Mtls
	}
	return false
}

type AddReplicaSourceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error     string     `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	ErrorCode ErrorCodes `protobuf:"varint,2,opt,name=errorCode,proto3,enum=org.opendedup.grpc.ErrorCodes" json:"errorCode,omitempty"`
}

func (x *AddReplicaSourceResponse) Reset() {
	*x = AddReplicaSourceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Storage_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddReplicaSourceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddReplicaSourceResponse) ProtoMessage() {}

func (x *AddReplicaSourceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Storage_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddReplicaSourceResponse.ProtoReflect.Descriptor instead.
func (*AddReplicaSourceResponse) Descriptor() ([]byte, []int) {
	return file_Storage_proto_rawDescGZIP(), []int{6}
}

func (x *AddReplicaSourceResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *AddReplicaSourceResponse) GetErrorCode() ErrorCodes {
	if x != nil {
		return x.ErrorCode
	}
	return ErrorCodes_NOERR
}

type RemoveReplicaSourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PvolumeID int64  `protobuf:"varint,3,opt,name=pvolumeID,proto3" json:"pvolumeID,omitempty"`
	RvolumeID int64  `protobuf:"varint,4,opt,name=rvolumeID,proto3" json:"rvolumeID,omitempty"`
	Url       string `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *RemoveReplicaSourceRequest) Reset() {
	*x = RemoveReplicaSourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Storage_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveReplicaSourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveReplicaSourceRequest) ProtoMessage() {}

func (x *RemoveReplicaSourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Storage_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveReplicaSourceRequest.ProtoReflect.Descriptor instead.
func (*RemoveReplicaSourceRequest) Descriptor() ([]byte, []int) {
	return file_Storage_proto_rawDescGZIP(), []int{7}
}

func (x *RemoveReplicaSourceRequest) GetPvolumeID() int64 {
	if x != nil {
		return x.PvolumeID
	}
	return 0
}

func (x *RemoveReplicaSourceRequest) GetRvolumeID() int64 {
	if x != nil {
		return x.RvolumeID
	}
	return 0
}

func (x *RemoveReplicaSourceRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type RemoveReplicaSourceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error     string     `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	ErrorCode ErrorCodes `protobuf:"varint,2,opt,name=errorCode,proto3,enum=org.opendedup.grpc.ErrorCodes" json:"errorCode,omitempty"`
}

func (x *RemoveReplicaSourceResponse) Reset() {
	*x = RemoveReplicaSourceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Storage_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveReplicaSourceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveReplicaSourceResponse) ProtoMessage() {}

func (x *RemoveReplicaSourceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Storage_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveReplicaSourceResponse.ProtoReflect.Descriptor instead.
func (*RemoveReplicaSourceResponse) Descriptor() ([]byte, []int) {
	return file_Storage_proto_rawDescGZIP(), []int{8}
}

func (x *RemoveReplicaSourceResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *RemoveReplicaSourceResponse) GetErrorCode() ErrorCodes {
	if x != nil {
		return x.ErrorCode
	}
	return ErrorCodes_NOERR
}

type FileReplicationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error     string     `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	ErrorCode ErrorCodes `protobuf:"varint,2,opt,name=errorCode,proto3,enum=org.opendedup.grpc.ErrorCodes" json:"errorCode,omitempty"`
	EventID   string     `protobuf:"bytes,3,opt,name=eventID,proto3" json:"eventID,omitempty"`
}

func (x *FileReplicationResponse) Reset() {
	*x = FileReplicationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Storage_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileReplicationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileReplicationResponse) ProtoMessage() {}

func (x *FileReplicationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Storage_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileReplicationResponse.ProtoReflect.Descriptor instead.
func (*FileReplicationResponse) Descriptor() ([]byte, []int) {
	return file_Storage_proto_rawDescGZIP(), []int{9}
}

func (x *FileReplicationResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *FileReplicationResponse) GetErrorCode() ErrorCodes {
	if x != nil {
		return x.ErrorCode
	}
	return ErrorCodes_NOERR
}

func (x *FileReplicationResponse) GetEventID() string {
	if x != nil {
		return x.EventID
	}
	return ""
}

type MetaDataDedupeFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilePath  string `protobuf:"bytes,1,opt,name=filePath,proto3" json:"filePath,omitempty"`
	PvolumeID int64  `protobuf:"varint,2,opt,name=pvolumeID,proto3" json:"pvolumeID,omitempty"`
}

func (x *MetaDataDedupeFileRequest) Reset() {
	*x = MetaDataDedupeFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Storage_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetaDataDedupeFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaDataDedupeFileRequest) ProtoMessage() {}

func (x *MetaDataDedupeFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Storage_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetaDataDedupeFileRequest.ProtoReflect.Descriptor instead.
func (*MetaDataDedupeFileRequest) Descriptor() ([]byte, []int) {
	return file_Storage_proto_rawDescGZIP(), []int{10}
}

func (x *MetaDataDedupeFileRequest) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *MetaDataDedupeFileRequest) GetPvolumeID() int64 {
	if x != nil {
		return x.PvolumeID
	}
	return 0
}

type MetaDataDedupeFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	File      *FileInfoResponse `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	ErrorCode ErrorCodes        `protobuf:"varint,2,opt,name=errorCode,proto3,enum=org.opendedup.grpc.ErrorCodes" json:"errorCode,omitempty"`
	Error     string            `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	EventID   string            `protobuf:"bytes,4,opt,name=eventID,proto3" json:"eventID,omitempty"`
}

func (x *MetaDataDedupeFileResponse) Reset() {
	*x = MetaDataDedupeFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Storage_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetaDataDedupeFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaDataDedupeFileResponse) ProtoMessage() {}

func (x *MetaDataDedupeFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Storage_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetaDataDedupeFileResponse.ProtoReflect.Descriptor instead.
func (*MetaDataDedupeFileResponse) Descriptor() ([]byte, []int) {
	return file_Storage_proto_rawDescGZIP(), []int{11}
}

func (x *MetaDataDedupeFileResponse) GetFile() *FileInfoResponse {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *MetaDataDedupeFileResponse) GetErrorCode() ErrorCodes {
	if x != nil {
		return x.ErrorCode
	}
	return ErrorCodes_NOERR
}

func (x *MetaDataDedupeFileResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *MetaDataDedupeFileResponse) GetEventID() string {
	if x != nil {
		return x.EventID
	}
	return ""
}

type SparseDedupeFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid      string `protobuf:"bytes,1,opt,name=guid,proto3" json:"guid,omitempty"`
	PvolumeID int64  `protobuf:"varint,2,opt,name=pvolumeID,proto3" json:"pvolumeID,omitempty"`
}

func (x *SparseDedupeFileRequest) Reset() {
	*x = SparseDedupeFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Storage_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SparseDedupeFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SparseDedupeFileRequest) ProtoMessage() {}

func (x *SparseDedupeFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Storage_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SparseDedupeFileRequest.ProtoReflect.Descriptor instead.
func (*SparseDedupeFileRequest) Descriptor() ([]byte, []int) {
	return file_Storage_proto_rawDescGZIP(), []int{12}
}

func (x *SparseDedupeFileRequest) GetGuid() string {
	if x != nil {
		return x.Guid
	}
	return ""
}

func (x *SparseDedupeFileRequest) GetPvolumeID() int64 {
	if x != nil {
		return x.PvolumeID
	}
	return 0
}

type SparseDedupeFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chunks    []*SparseDataChunkP `protobuf:"bytes,1,rep,name=chunks,proto3" json:"chunks,omitempty"`
	ErrorCode ErrorCodes          `protobuf:"varint,2,opt,name=errorCode,proto3,enum=org.opendedup.grpc.ErrorCodes" json:"errorCode,omitempty"`
	Error     string              `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *SparseDedupeFileResponse) Reset() {
	*x = SparseDedupeFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Storage_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SparseDedupeFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SparseDedupeFileResponse) ProtoMessage() {}

func (x *SparseDedupeFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Storage_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SparseDedupeFileResponse.ProtoReflect.Descriptor instead.
func (*SparseDedupeFileResponse) Descriptor() ([]byte, []int) {
	return file_Storage_proto_rawDescGZIP(), []int{13}
}

func (x *SparseDedupeFileResponse) GetChunks() []*SparseDataChunkP {
	if x != nil {
		return x.Chunks
	}
	return nil
}

func (x *SparseDedupeFileResponse) GetErrorCode() ErrorCodes {
	if x != nil {
		return x.ErrorCode
	}
	return ErrorCodes_NOERR
}

func (x *SparseDedupeFileResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type ChunkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data       []byte     `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Len        int32      `protobuf:"varint,2,opt,name=len,proto3" json:"len,omitempty"`
	Error      string     `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	ErrorCode  ErrorCodes `protobuf:"varint,4,opt,name=errorCode,proto3,enum=org.opendedup.grpc.ErrorCodes" json:"errorCode,omitempty"`
	Compressed bool       `protobuf:"varint,5,opt,name=compressed,proto3" json:"compressed,omitempty"`
}

func (x *ChunkResponse) Reset() {
	*x = ChunkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Storage_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChunkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkResponse) ProtoMessage() {}

func (x *ChunkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Storage_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkResponse.ProtoReflect.Descriptor instead.
func (*ChunkResponse) Descriptor() ([]byte, []int) {
	return file_Storage_proto_rawDescGZIP(), []int{14}
}

func (x *ChunkResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ChunkResponse) GetLen() int32 {
	if x != nil {
		return x.Len
	}
	return 0
}

func (x *ChunkResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *ChunkResponse) GetErrorCode() ErrorCodes {
	if x != nil {
		return x.ErrorCode
	}
	return ErrorCodes_NOERR
}

func (x *ChunkResponse) GetCompressed() bool {
	if x != nil {
		return x.Compressed
	}
	return false
}

type ChunkEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash             []byte     `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Data             []byte     `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Compressed       bool       `protobuf:"varint,3,opt,name=compressed,proto3" json:"compressed,omitempty"`
	CompressedLength int32      `protobuf:"varint,4,opt,name=compressedLength,proto3" json:"compressedLength,omitempty"`
	Location         int64      `protobuf:"varint,5,opt,name=location,proto3" json:"location,omitempty"`
	ErrorCode        ErrorCodes `protobuf:"varint,6,opt,name=errorCode,proto3,enum=org.opendedup.grpc.ErrorCodes" json:"errorCode,omitempty"`
	Error            string     `protobuf:"bytes,7,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ChunkEntry) Reset() {
	*x = ChunkEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Storage_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChunkEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkEntry) ProtoMessage() {}

func (x *ChunkEntry) ProtoReflect() protoreflect.Message {
	mi := &file_Storage_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkEntry.ProtoReflect.Descriptor instead.
func (*ChunkEntry) Descriptor() ([]byte, []int) {
	return file_Storage_proto_rawDescGZIP(), []int{15}
}

func (x *ChunkEntry) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *ChunkEntry) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ChunkEntry) GetCompressed() bool {
	if x != nil {
		return x.Compressed
	}
	return false
}

func (x *ChunkEntry) GetCompressedLength() int32 {
	if x != nil {
		return x.CompressedLength
	}
	return 0
}

func (x *ChunkEntry) GetLocation() int64 {
	if x != nil {
		return x.Location
	}
	return 0
}

func (x *ChunkEntry) GetErrorCode() ErrorCodes {
	if x != nil {
		return x.ErrorCode
	}
	return ErrorCodes_NOERR
}

func (x *ChunkEntry) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type WriteChunksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chunks     []*ChunkEntry `protobuf:"bytes,1,rep,name=chunks,proto3" json:"chunks,omitempty"`
	FileHandle int64         `protobuf:"varint,2,opt,name=fileHandle,proto3" json:"fileHandle,omitempty"`
	PvolumeID  int64         `protobuf:"varint,3,opt,name=pvolumeID,proto3" json:"pvolumeID,omitempty"`
}

func (x *WriteChunksRequest) Reset() {
	*x = WriteChunksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Storage_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteChunksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteChunksRequest) ProtoMessage() {}

func (x *WriteChunksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Storage_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteChunksRequest.ProtoReflect.Descriptor instead.
func (*WriteChunksRequest) Descriptor() ([]byte, []int) {
	return file_Storage_proto_rawDescGZIP(), []int{16}
}

func (x *WriteChunksRequest) GetChunks() []*ChunkEntry {
	if x != nil {
		return x.Chunks
	}
	return nil
}

func (x *WriteChunksRequest) GetFileHandle() int64 {
	if x != nil {
		return x.FileHandle
	}
	return 0
}

func (x *WriteChunksRequest) GetPvolumeID() int64 {
	if x != nil {
		return x.PvolumeID
	}
	return 0
}

type WriteChunksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error         string          `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	ErrorCode     ErrorCodes      `protobuf:"varint,2,opt,name=errorCode,proto3,enum=org.opendedup.grpc.ErrorCodes" json:"errorCode,omitempty"`
	InsertRecords []*InsertRecord `protobuf:"bytes,3,rep,name=insertRecords,proto3" json:"insertRecords,omitempty"`
}

func (x *WriteChunksResponse) Reset() {
	*x = WriteChunksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Storage_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteChunksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteChunksResponse) ProtoMessage() {}

func (x *WriteChunksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Storage_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteChunksResponse.ProtoReflect.Descriptor instead.
func (*WriteChunksResponse) Descriptor() ([]byte, []int) {
	return file_Storage_proto_rawDescGZIP(), []int{17}
}

func (x *WriteChunksResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *WriteChunksResponse) GetErrorCode() ErrorCodes {
	if x != nil {
		return x.ErrorCode
	}
	return ErrorCodes_NOERR
}

func (x *WriteChunksResponse) GetInsertRecords() []*InsertRecord {
	if x != nil {
		return x.InsertRecords
	}
	return nil
}

type GetChunksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chunks    []*ChunkEntry `protobuf:"bytes,1,rep,name=chunks,proto3" json:"chunks,omitempty"`
	PvolumeID int64         `protobuf:"varint,2,opt,name=pvolumeID,proto3" json:"pvolumeID,omitempty"`
}

func (x *GetChunksRequest) Reset() {
	*x = GetChunksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Storage_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChunksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChunksRequest) ProtoMessage() {}

func (x *GetChunksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Storage_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChunksRequest.ProtoReflect.Descriptor instead.
func (*GetChunksRequest) Descriptor() ([]byte, []int) {
	return file_Storage_proto_rawDescGZIP(), []int{18}
}

func (x *GetChunksRequest) GetChunks() []*ChunkEntry {
	if x != nil {
		return x.Chunks
	}
	return nil
}

func (x *GetChunksRequest) GetPvolumeID() int64 {
	if x != nil {
		return x.PvolumeID
	}
	return 0
}

type HashingInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chunks    []*ChunkEntry `protobuf:"bytes,1,rep,name=chunks,proto3" json:"chunks,omitempty"`
	Error     string        `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	ErrorCode ErrorCodes    `protobuf:"varint,3,opt,name=errorCode,proto3,enum=org.opendedup.grpc.ErrorCodes" json:"errorCode,omitempty"`
	PvolumeID int64         `protobuf:"varint,4,opt,name=pvolumeID,proto3" json:"pvolumeID,omitempty"`
}

func (x *HashingInfoRequest) Reset() {
	*x = HashingInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Storage_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HashingInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HashingInfoRequest) ProtoMessage() {}

func (x *HashingInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Storage_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HashingInfoRequest.ProtoReflect.Descriptor instead.
func (*HashingInfoRequest) Descriptor() ([]byte, []int) {
	return file_Storage_proto_rawDescGZIP(), []int{19}
}

func (x *HashingInfoRequest) GetChunks() []*ChunkEntry {
	if x != nil {
		return x.Chunks
	}
	return nil
}

func (x *HashingInfoRequest) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *HashingInfoRequest) GetErrorCode() ErrorCodes {
	if x != nil {
		return x.ErrorCode
	}
	return ErrorCodes_NOERR
}

func (x *HashingInfoRequest) GetPvolumeID() int64 {
	if x != nil {
		return x.PvolumeID
	}
	return 0
}

type HashLocPairP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash     []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Hashloc  int64  `protobuf:"varint,2,opt,name=hashloc,proto3" json:"hashloc,omitempty"`
	Len      int32  `protobuf:"varint,3,opt,name=len,proto3" json:"len,omitempty"`
	Pos      int32  `protobuf:"varint,4,opt,name=pos,proto3" json:"pos,omitempty"`
	Offset   int32  `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`
	Nlen     int32  `protobuf:"varint,6,opt,name=nlen,proto3" json:"nlen,omitempty"`
	Dup      bool   `protobuf:"varint,7,opt,name=dup,proto3" json:"dup,omitempty"`
	Inserted bool   `protobuf:"varint,8,opt,name=inserted,proto3" json:"inserted,omitempty"`
}

func (x *HashLocPairP) Reset() {
	*x = HashLocPairP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Storage_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HashLocPairP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HashLocPairP) ProtoMessage() {}

func (x *HashLocPairP) ProtoReflect() protoreflect.Message {
	mi := &file_Storage_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HashLocPairP.ProtoReflect.Descriptor instead.
func (*HashLocPairP) Descriptor() ([]byte, []int) {
	return file_Storage_proto_rawDescGZIP(), []int{20}
}

func (x *HashLocPairP) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *HashLocPairP) GetHashloc() int64 {
	if x != nil {
		return x.Hashloc
	}
	return 0
}

func (x *HashLocPairP) GetLen() int32 {
	if x != nil {
		return x.Len
	}
	return 0
}

func (x *HashLocPairP) GetPos() int32 {
	if x != nil {
		return x.Pos
	}
	return 0
}

func (x *HashLocPairP) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *HashLocPairP) GetNlen() int32 {
	if x != nil {
		return x.Nlen
	}
	return 0
}

func (x *HashLocPairP) GetDup() bool {
	if x != nil {
		return x.Dup
	}
	return false
}

func (x *HashLocPairP) GetInserted() bool {
	if x != nil {
		return x.Inserted
	}
	return false
}

type PauseReplicationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventID   string `protobuf:"bytes,1,opt,name=eventID,proto3" json:"eventID,omitempty"`
	Pause     bool   `protobuf:"varint,2,opt,name=pause,proto3" json:"pause,omitempty"`
	PvolumeID int64  `protobuf:"varint,3,opt,name=pvolumeID,proto3" json:"pvolumeID,omitempty"`
}

func (x *PauseReplicationRequest) Reset() {
	*x = PauseReplicationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Storage_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PauseReplicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PauseReplicationRequest) ProtoMessage() {}

func (x *PauseReplicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Storage_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PauseReplicationRequest.ProtoReflect.Descriptor instead.
func (*PauseReplicationRequest) Descriptor() ([]byte, []int) {
	return file_Storage_proto_rawDescGZIP(), []int{21}
}

func (x *PauseReplicationRequest) GetEventID() string {
	if x != nil {
		return x.EventID
	}
	return ""
}

func (x *PauseReplicationRequest) GetPause() bool {
	if x != nil {
		return x.Pause
	}
	return false
}

func (x *PauseReplicationRequest) GetPvolumeID() int64 {
	if x != nil {
		return x.PvolumeID
	}
	return 0
}

type PauseReplicationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error     string     `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	ErrorCode ErrorCodes `protobuf:"varint,2,opt,name=errorCode,proto3,enum=org.opendedup.grpc.ErrorCodes" json:"errorCode,omitempty"`
}

func (x *PauseReplicationResponse) Reset() {
	*x = PauseReplicationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Storage_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PauseReplicationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PauseReplicationResponse) ProtoMessage() {}

func (x *PauseReplicationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Storage_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PauseReplicationResponse.ProtoReflect.Descriptor instead.
func (*PauseReplicationResponse) Descriptor() ([]byte, []int) {
	return file_Storage_proto_rawDescGZIP(), []int{22}
}

func (x *PauseReplicationResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *PauseReplicationResponse) GetErrorCode() ErrorCodes {
	if x != nil {
		return x.ErrorCode
	}
	return ErrorCodes_NOERR
}

type CancelReplicationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventID   string `protobuf:"bytes,1,opt,name=eventID,proto3" json:"eventID,omitempty"`
	PvolumeID int64  `protobuf:"varint,2,opt,name=pvolumeID,proto3" json:"pvolumeID,omitempty"`
}

func (x *CancelReplicationRequest) Reset() {
	*x = CancelReplicationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Storage_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelReplicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelReplicationRequest) ProtoMessage() {}

func (x *CancelReplicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Storage_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelReplicationRequest.ProtoReflect.Descriptor instead.
func (*CancelReplicationRequest) Descriptor() ([]byte, []int) {
	return file_Storage_proto_rawDescGZIP(), []int{23}
}

func (x *CancelReplicationRequest) GetEventID() string {
	if x != nil {
		return x.EventID
	}
	return ""
}

func (x *CancelReplicationRequest) GetPvolumeID() int64 {
	if x != nil {
		return x.PvolumeID
	}
	return 0
}

type CancelReplicationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error     string     `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	ErrorCode ErrorCodes `protobuf:"varint,2,opt,name=errorCode,proto3,enum=org.opendedup.grpc.ErrorCodes" json:"errorCode,omitempty"`
}

func (x *CancelReplicationResponse) Reset() {
	*x = CancelReplicationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Storage_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelReplicationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelReplicationResponse) ProtoMessage() {}

func (x *CancelReplicationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Storage_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelReplicationResponse.ProtoReflect.Descriptor instead.
func (*CancelReplicationResponse) Descriptor() ([]byte, []int) {
	return file_Storage_proto_rawDescGZIP(), []int{24}
}

func (x *CancelReplicationResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *CancelReplicationResponse) GetErrorCode() ErrorCodes {
	if x != nil {
		return x.ErrorCode
	}
	return ErrorCodes_NOERR
}

type SparseDataChunkP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fpos             int64                   `protobuf:"varint,1,opt,name=fpos,proto3" json:"fpos,omitempty"`
	Len              int32                   `protobuf:"varint,2,opt,name=len,proto3" json:"len,omitempty"`
	Flags            []SparseDataFlags       `protobuf:"varint,3,rep,packed,name=flags,proto3,enum=org.opendedup.grpc.SparseDataFlags" json:"flags,omitempty"`
	Version          int32                   `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	Ar               map[int32]*HashLocPairP `protobuf:"bytes,5,rep,name=ar,proto3" json:"ar,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Doop             int32                   `protobuf:"varint,6,opt,name=doop,proto3" json:"doop,omitempty"`
	Prevdoop         int32                   `protobuf:"varint,7,opt,name=prevdoop,proto3" json:"prevdoop,omitempty"`
	CompressedLength int32                   `protobuf:"varint,8,opt,name=compressedLength,proto3" json:"compressedLength,omitempty"`
	Error            string                  `protobuf:"bytes,9,opt,name=error,proto3" json:"error,omitempty"`
	ErrorCode        ErrorCodes              `protobuf:"varint,10,opt,name=errorCode,proto3,enum=org.opendedup.grpc.ErrorCodes" json:"errorCode,omitempty"`
}

func (x *SparseDataChunkP) Reset() {
	*x = SparseDataChunkP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Storage_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SparseDataChunkP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SparseDataChunkP) ProtoMessage() {}

func (x *SparseDataChunkP) ProtoReflect() protoreflect.Message {
	mi := &file_Storage_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SparseDataChunkP.ProtoReflect.Descriptor instead.
func (*SparseDataChunkP) Descriptor() ([]byte, []int) {
	return file_Storage_proto_rawDescGZIP(), []int{25}
}

func (x *SparseDataChunkP) GetFpos() int64 {
	if x != nil {
		return x.Fpos
	}
	return 0
}

func (x *SparseDataChunkP) GetLen() int32 {
	if x != nil {
		return x.Len
	}
	return 0
}

func (x *SparseDataChunkP) GetFlags() []SparseDataFlags {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *SparseDataChunkP) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *SparseDataChunkP) GetAr() map[int32]*HashLocPairP {
	if x != nil {
		return x.Ar
	}
	return nil
}

func (x *SparseDataChunkP) GetDoop() int32 {
	if x != nil {
		return x.Doop
	}
	return 0
}

func (x *SparseDataChunkP) GetPrevdoop() int32 {
	if x != nil {
		return x.Prevdoop
	}
	return 0
}

func (x *SparseDataChunkP) GetCompressedLength() int32 {
	if x != nil {
		return x.CompressedLength
	}
	return 0
}

func (x *SparseDataChunkP) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *SparseDataChunkP) GetErrorCode() ErrorCodes {
	if x != nil {
		return x.ErrorCode
	}
	return ErrorCodes_NOERR
}

type SparseDedupeChunkWriteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chunk           *SparseDataChunkP `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk,omitempty"`
	FileHandle      int64             `protobuf:"varint,2,opt,name=fileHandle,proto3" json:"fileHandle,omitempty"`
	FileLocation    int64             `protobuf:"varint,3,opt,name=fileLocation,proto3" json:"fileLocation,omitempty"`
	PvolumeID       int64             `protobuf:"varint,4,opt,name=pvolumeID,proto3" json:"pvolumeID,omitempty"`
	Compressed      bool              `protobuf:"varint,5,opt,name=compressed,proto3" json:"compressed,omitempty"`
	CompressedChunk []byte            `protobuf:"bytes,6,opt,name=compressedChunk,proto3" json:"compressedChunk,omitempty"`
	UncompressedLen int32             `protobuf:"varint,7,opt,name=uncompressedLen,proto3" json:"uncompressedLen,omitempty"`
}

func (x *SparseDedupeChunkWriteRequest) Reset() {
	*x = SparseDedupeChunkWriteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Storage_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SparseDedupeChunkWriteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SparseDedupeChunkWriteRequest) ProtoMessage() {}

func (x *SparseDedupeChunkWriteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Storage_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SparseDedupeChunkWriteRequest.ProtoReflect.Descriptor instead.
func (*SparseDedupeChunkWriteRequest) Descriptor() ([]byte, []int) {
	return file_Storage_proto_rawDescGZIP(), []int{26}
}

func (x *SparseDedupeChunkWriteRequest) GetChunk() *SparseDataChunkP {
	if x != nil {
		return x.Chunk
	}
	return nil
}

func (x *SparseDedupeChunkWriteRequest) GetFileHandle() int64 {
	if x != nil {
		return x.FileHandle
	}
	return 0
}

func (x *SparseDedupeChunkWriteRequest) GetFileLocation() int64 {
	if x != nil {
		return x.FileLocation
	}
	return 0
}

func (x *SparseDedupeChunkWriteRequest) GetPvolumeID() int64 {
	if x != nil {
		return x.PvolumeID
	}
	return 0
}

func (x *SparseDedupeChunkWriteRequest) GetCompressed() bool {
	if x != nil {
		return x.Compressed
	}
	return false
}

func (x *SparseDedupeChunkWriteRequest) GetCompressedChunk() []byte {
	if x != nil {
		return x.CompressedChunk
	}
	return nil
}

func (x *SparseDedupeChunkWriteRequest) GetUncompressedLen() int32 {
	if x != nil {
		return x.UncompressedLen
	}
	return 0
}

type SparseDedupeChunkWriteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error     string     `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	ErrorCode ErrorCodes `protobuf:"varint,2,opt,name=errorCode,proto3,enum=org.opendedup.grpc.ErrorCodes" json:"errorCode,omitempty"`
}

func (x *SparseDedupeChunkWriteResponse) Reset() {
	*x = SparseDedupeChunkWriteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Storage_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SparseDedupeChunkWriteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SparseDedupeChunkWriteResponse) ProtoMessage() {}

func (x *SparseDedupeChunkWriteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Storage_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SparseDedupeChunkWriteResponse.ProtoReflect.Descriptor instead.
func (*SparseDedupeChunkWriteResponse) Descriptor() ([]byte, []int) {
	return file_Storage_proto_rawDescGZIP(), []int{27}
}

func (x *SparseDedupeChunkWriteResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *SparseDedupeChunkWriteResponse) GetErrorCode() ErrorCodes {
	if x != nil {
		return x.ErrorCode
	}
	return ErrorCodes_NOERR
}

type SparseDedupeChunkReadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset     int64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	FileHandle int64 `protobuf:"varint,2,opt,name=fileHandle,proto3" json:"fileHandle,omitempty"`
	PvolumeID  int64 `protobuf:"varint,3,opt,name=pvolumeID,proto3" json:"pvolumeID,omitempty"`
}

func (x *SparseDedupeChunkReadRequest) Reset() {
	*x = SparseDedupeChunkReadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Storage_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SparseDedupeChunkReadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SparseDedupeChunkReadRequest) ProtoMessage() {}

func (x *SparseDedupeChunkReadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Storage_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SparseDedupeChunkReadRequest.ProtoReflect.Descriptor instead.
func (*SparseDedupeChunkReadRequest) Descriptor() ([]byte, []int) {
	return file_Storage_proto_rawDescGZIP(), []int{28}
}

func (x *SparseDedupeChunkReadRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *SparseDedupeChunkReadRequest) GetFileHandle() int64 {
	if x != nil {
		return x.FileHandle
	}
	return 0
}

func (x *SparseDedupeChunkReadRequest) GetPvolumeID() int64 {
	if x != nil {
		return x.PvolumeID
	}
	return 0
}

type SparseDedupeChunkReadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error     string            `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	ErrorCode ErrorCodes        `protobuf:"varint,2,opt,name=errorCode,proto3,enum=org.opendedup.grpc.ErrorCodes" json:"errorCode,omitempty"`
	Chunk     *SparseDataChunkP `protobuf:"bytes,3,opt,name=chunk,proto3" json:"chunk,omitempty"`
}

func (x *SparseDedupeChunkReadResponse) Reset() {
	*x = SparseDedupeChunkReadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Storage_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SparseDedupeChunkReadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SparseDedupeChunkReadResponse) ProtoMessage() {}

func (x *SparseDedupeChunkReadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Storage_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SparseDedupeChunkReadResponse.ProtoReflect.Descriptor instead.
func (*SparseDedupeChunkReadResponse) Descriptor() ([]byte, []int) {
	return file_Storage_proto_rawDescGZIP(), []int{29}
}

func (x *SparseDedupeChunkReadResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *SparseDedupeChunkReadResponse) GetErrorCode() ErrorCodes {
	if x != nil {
		return x.ErrorCode
	}
	return ErrorCodes_NOERR
}

func (x *SparseDedupeChunkReadResponse) GetChunk() *SparseDataChunkP {
	if x != nil {
		return x.Chunk
	}
	return nil
}

type HashingInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChunkSize      int64      `protobuf:"varint,1,opt,name=chunkSize,proto3" json:"chunkSize,omitempty"`
	MinSegmentSize int64      `protobuf:"varint,2,opt,name=minSegmentSize,proto3" json:"minSegmentSize,omitempty"`
	MaxSegmentSize int64      `protobuf:"varint,3,opt,name=maxSegmentSize,proto3" json:"maxSegmentSize,omitempty"`
	PolyNumber     int64      `protobuf:"varint,4,opt,name=polyNumber,proto3" json:"polyNumber,omitempty"`
	WindowSize     int64      `protobuf:"varint,5,opt,name=windowSize,proto3" json:"windowSize,omitempty"`
	Hashtype       Hashtype   `protobuf:"varint,6,opt,name=hashtype,proto3,enum=org.opendedup.grpc.Hashtype" json:"hashtype,omitempty"`
	MapVersion     int32      `protobuf:"varint,7,opt,name=mapVersion,proto3" json:"mapVersion,omitempty"`
	Error          string     `protobuf:"bytes,8,opt,name=error,proto3" json:"error,omitempty"`
	ErrorCode      ErrorCodes `protobuf:"varint,9,opt,name=errorCode,proto3,enum=org.opendedup.grpc.ErrorCodes" json:"errorCode,omitempty"`
}

func (x *HashingInfoResponse) Reset() {
	*x = HashingInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Storage_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HashingInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HashingInfoResponse) ProtoMessage() {}

func (x *HashingInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Storage_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HashingInfoResponse.ProtoReflect.Descriptor instead.
func (*HashingInfoResponse) Descriptor() ([]byte, []int) {
	return file_Storage_proto_rawDescGZIP(), []int{30}
}

func (x *HashingInfoResponse) GetChunkSize() int64 {
	if x != nil {
		return x.ChunkSize
	}
	return 0
}

func (x *HashingInfoResponse) GetMinSegmentSize() int64 {
	if x != nil {
		return x.MinSegmentSize
	}
	return 0
}

func (x *HashingInfoResponse) GetMaxSegmentSize() int64 {
	if x != nil {
		return x.MaxSegmentSize
	}
	return 0
}

func (x *HashingInfoResponse) GetPolyNumber() int64 {
	if x != nil {
		return x.PolyNumber
	}
	return 0
}

func (x *HashingInfoResponse) GetWindowSize() int64 {
	if x != nil {
		return x.WindowSize
	}
	return 0
}

func (x *HashingInfoResponse) GetHashtype() Hashtype {
	if x != nil {
		return x.Hashtype
	}
	return Hashtype_SHA256
}

func (x *HashingInfoResponse) GetMapVersion() int32 {
	if x != nil {
		return x.MapVersion
	}
	return 0
}

func (x *HashingInfoResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *HashingInfoResponse) GetErrorCode() ErrorCodes {
	if x != nil {
		return x.ErrorCode
	}
	return ErrorCodes_NOERR
}

type InsertRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hashloc          int64 `protobuf:"varint,1,opt,name=hashloc,proto3" json:"hashloc,omitempty"`
	Inserted         bool  `protobuf:"varint,2,opt,name=inserted,proto3" json:"inserted,omitempty"`
	CompressedLength int32 `protobuf:"varint,3,opt,name=compressedLength,proto3" json:"compressedLength,omitempty"`
}

func (x *InsertRecord) Reset() {
	*x = InsertRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Storage_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertRecord) ProtoMessage() {}

func (x *InsertRecord) ProtoReflect() protoreflect.Message {
	mi := &file_Storage_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertRecord.ProtoReflect.Descriptor instead.
func (*InsertRecord) Descriptor() ([]byte, []int) {
	return file_Storage_proto_rawDescGZIP(), []int{31}
}

func (x *InsertRecord) GetHashloc() int64 {
	if x != nil {
		return x.Hashloc
	}
	return 0
}

func (x *InsertRecord) GetInserted() bool {
	if x != nil {
		return x.Inserted
	}
	return false
}

func (x *InsertRecord) GetCompressedLength() int32 {
	if x != nil {
		return x.CompressedLength
	}
	return 0
}

type VolumeEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	File       *FileInfoResponse `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	Uuid       string            `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	TimeStamp  int64             `protobuf:"varint,3,opt,name=timeStamp,proto3" json:"timeStamp,omitempty"`
	Seq        int64             `protobuf:"varint,4,opt,name=seq,proto3" json:"seq,omitempty"`
	ActionType ActionType        `protobuf:"varint,5,opt,name=actionType,proto3,enum=org.opendedup.grpc.ActionType" json:"actionType,omitempty"`
	Error      string            `protobuf:"bytes,6,opt,name=error,proto3" json:"error,omitempty"`
	ErrorCode  ErrorCodes        `protobuf:"varint,7,opt,name=errorCode,proto3,enum=org.opendedup.grpc.ErrorCodes" json:"errorCode,omitempty"`
	Srcfile    string            `protobuf:"bytes,8,opt,name=srcfile,proto3" json:"srcfile,omitempty"` //Source file for renames
	Dstfile    string            `protobuf:"bytes,9,opt,name=dstfile,proto3" json:"dstfile,omitempty"` //Source file for renames
}

func (x *VolumeEvent) Reset() {
	*x = VolumeEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Storage_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeEvent) ProtoMessage() {}

func (x *VolumeEvent) ProtoReflect() protoreflect.Message {
	mi := &file_Storage_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeEvent.ProtoReflect.Descriptor instead.
func (*VolumeEvent) Descriptor() ([]byte, []int) {
	return file_Storage_proto_rawDescGZIP(), []int{32}
}

func (x *VolumeEvent) GetFile() *FileInfoResponse {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *VolumeEvent) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *VolumeEvent) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

func (x *VolumeEvent) GetSeq() int64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *VolumeEvent) GetActionType() ActionType {
	if x != nil {
		return x.ActionType
	}
	return ActionType_MFILEDELETED
}

func (x *VolumeEvent) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *VolumeEvent) GetErrorCode() ErrorCodes {
	if x != nil {
		return x.ErrorCode
	}
	return ErrorCodes_NOERR
}

func (x *VolumeEvent) GetSrcfile() string {
	if x != nil {
		return x.Srcfile
	}
	return ""
}

func (x *VolumeEvent) GetDstfile() string {
	if x != nil {
		return x.Dstfile
	}
	return ""
}

type VolumeEventListenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PvolumeID     int64 `protobuf:"varint,1,opt,name=pvolumeID,proto3" json:"pvolumeID,omitempty"`
	StartSequence int64 `protobuf:"varint,2,opt,name=startSequence,proto3" json:"startSequence,omitempty"`
}

func (x *VolumeEventListenRequest) Reset() {
	*x = VolumeEventListenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Storage_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeEventListenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeEventListenRequest) ProtoMessage() {}

func (x *VolumeEventListenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Storage_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeEventListenRequest.ProtoReflect.Descriptor instead.
func (*VolumeEventListenRequest) Descriptor() ([]byte, []int) {
	return file_Storage_proto_rawDescGZIP(), []int{33}
}

func (x *VolumeEventListenRequest) GetPvolumeID() int64 {
	if x != nil {
		return x.PvolumeID
	}
	return 0
}

func (x *VolumeEventListenRequest) GetStartSequence() int64 {
	if x != nil {
		return x.StartSequence
	}
	return 0
}

var File_Storage_proto protoreflect.FileDescriptor

var file_Storage_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x12, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x1a, 0x0e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x4a, 0x0a, 0x12, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x61, 0x73,
	0x68, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x06, 0x68, 0x61, 0x73, 0x68, 0x65,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x44, 0x22,
	0x52, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x49, 0x44, 0x22, 0x87, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x87, 0x01,
	0x0a, 0x13, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x09, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xbe, 0x01, 0x0a, 0x16, 0x46, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x72, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x72, 0x63, 0x46, 0x69, 0x6c, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x73, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49,
	0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x74, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x6d, 0x74, 0x6c, 0x73, 0x22, 0x7b, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49,
	0x44, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x44, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x74, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x6d, 0x74, 0x6c, 0x73, 0x22, 0x6e, 0x0a, 0x18, 0x41, 0x64, 0x64, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x6a, 0x0a, 0x1a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49,
	0x44, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x44, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x22, 0x71, 0x0a, 0x1b, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x17, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x55,
	0x0a, 0x19, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x44, 0x65, 0x64, 0x75, 0x70, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x49, 0x44, 0x22, 0xc4, 0x01, 0x0a, 0x1a, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61,
	0x74, 0x61, 0x44, 0x65, 0x64, 0x75, 0x70, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x3c,
	0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75,
	0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x73, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x4b, 0x0a, 0x17,
	0x53, 0x70, 0x61, 0x72, 0x73, 0x65, 0x44, 0x65, 0x64, 0x75, 0x70, 0x65, 0x46, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x70, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x44, 0x22, 0xac, 0x01, 0x0a, 0x18, 0x53, 0x70,
	0x61, 0x72, 0x73, 0x65, 0x44, 0x65, 0x64, 0x75, 0x70, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x70, 0x61, 0x72,
	0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x50, 0x52, 0x06, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x73, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xa9, 0x01, 0x0a, 0x0d, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10,
	0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6c, 0x65, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x64, 0x22, 0xf0, 0x01, 0x0a, 0x0a, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x63,
	0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x8a, 0x01, 0x0a, 0x12, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36,
	0x0a, 0x06, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x49, 0x44, 0x22, 0xb1, 0x01, 0x0a, 0x13, 0x57, 0x72, 0x69, 0x74, 0x65, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x46, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x68, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x06,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x49, 0x44, 0x22, 0xbe, 0x01, 0x0a, 0x12, 0x48, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x06, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x49, 0x44, 0x22, 0xba, 0x01, 0x0a, 0x0c, 0x48, 0x61, 0x73, 0x68, 0x4c, 0x6f, 0x63, 0x50,
	0x61, 0x69, 0x72, 0x50, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x68,
	0x6c, 0x6f, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x68, 0x61, 0x73, 0x68, 0x6c,
	0x6f, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x6c, 0x65, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x6c, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6e, 0x6c,
	0x65, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x75, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x03, 0x64, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64,
	0x22, 0x67, 0x0a, 0x17, 0x50, 0x61, 0x75, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x75, 0x73, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x70, 0x61, 0x75, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x70, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x44, 0x22, 0x6e, 0x0a, 0x18, 0x50, 0x61, 0x75,
	0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3c, 0x0a, 0x09, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x09,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x52, 0x0a, 0x18, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x70, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x44, 0x22, 0x6f, 0x0a,
	0x19, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x3c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x73, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xd4,
	0x03, 0x0a, 0x10, 0x53, 0x70, 0x61, 0x72, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x50, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x66, 0x70, 0x6f, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x12, 0x39, 0x0a, 0x05, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x70,
	0x61, 0x72, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x05, 0x66,
	0x6c, 0x61, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3c,
	0x0a, 0x02, 0x61, 0x72, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x53, 0x70, 0x61, 0x72, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x50,
	0x2e, 0x41, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x02, 0x61, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x6f, 0x6f, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x6f, 0x6f, 0x70,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x76, 0x64, 0x6f, 0x6f, 0x70, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x65, 0x76, 0x64, 0x6f, 0x6f, 0x70, 0x12, 0x2a, 0x0a, 0x10,
	0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3c,
	0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75,
	0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x73, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x1a, 0x57, 0x0a, 0x07,
	0x41, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x48, 0x61,
	0x73, 0x68, 0x4c, 0x6f, 0x63, 0x50, 0x61, 0x69, 0x72, 0x50, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb1, 0x02, 0x0a, 0x1d, 0x53, 0x70, 0x61, 0x72, 0x73, 0x65,
	0x44, 0x65, 0x64, 0x75, 0x70, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x70, 0x61, 0x72,
	0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x50, 0x52, 0x05, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f,
	0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12,
	0x28, 0x0a, 0x0f, 0x75, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x4c,
	0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x75, 0x6e, 0x63, 0x6f, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x4c, 0x65, 0x6e, 0x22, 0x74, 0x0a, 0x1e, 0x53, 0x70, 0x61,
	0x72, 0x73, 0x65, 0x44, 0x65, 0x64, 0x75, 0x70, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x73, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0x74, 0x0a, 0x1c, 0x53, 0x70, 0x61, 0x72, 0x73, 0x65, 0x44, 0x65, 0x64, 0x75, 0x70, 0x65, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x6c,
	0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x49, 0x44, 0x22, 0xaf, 0x01, 0x0a, 0x1d, 0x53, 0x70, 0x61, 0x72, 0x73, 0x65,
	0x44, 0x65, 0x64, 0x75, 0x70, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x61, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3c, 0x0a,
	0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x73,
	0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x53, 0x70, 0x61, 0x72, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x50,
	0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x22, 0xf1, 0x02, 0x0a, 0x13, 0x48, 0x61, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6d,
	0x61, 0x78, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x6f, 0x6c, 0x79, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x70, 0x6f, 0x6c, 0x79, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1e, 0x0a,
	0x0a, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x38, 0x0a,
	0x08, 0x68, 0x61, 0x73, 0x68, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1c, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x68,
	0x61, 0x73, 0x68, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x70, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x70,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3c, 0x0a,
	0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x73,
	0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x70, 0x0a, 0x0c, 0x49,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x68,
	0x61, 0x73, 0x68, 0x6c, 0x6f, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x68, 0x61,
	0x73, 0x68, 0x6c, 0x6f, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x65,
	0x64, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x63, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0xd3, 0x02,
	0x0a, 0x0b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a,
	0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x73, 0x65, 0x71, 0x12, 0x3e, 0x0a, 0x0a, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x73, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x72, 0x63, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x72, 0x63, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x73, 0x74,
	0x66, 0x69, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x73, 0x74, 0x66,
	0x69, 0x6c, 0x65, 0x22, 0x5e, 0x0a, 0x18, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x70, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x44, 0x12, 0x24, 0x0a,
	0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x2a, 0x24, 0x0a, 0x0f, 0x53, 0x70, 0x61, 0x72, 0x73, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x53,
	0x54, 0x52, 0x55, 0x43, 0x54, 0x45, 0x44, 0x10, 0x00, 0x2a, 0x66, 0x0a, 0x0a, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x46, 0x49, 0x4c, 0x45,
	0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x46, 0x49,
	0x4c, 0x45, 0x57, 0x52, 0x49, 0x54, 0x54, 0x45, 0x4e, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4d,
	0x46, 0x49, 0x4c, 0x45, 0x52, 0x45, 0x4e, 0x41, 0x4d, 0x45, 0x44, 0x10, 0x02, 0x12, 0x10, 0x0a,
	0x0c, 0x53, 0x46, 0x49, 0x4c, 0x45, 0x57, 0x52, 0x49, 0x54, 0x54, 0x45, 0x4e, 0x10, 0x03, 0x12,
	0x10, 0x0a, 0x0c, 0x53, 0x46, 0x49, 0x4c, 0x45, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10,
	0x04, 0x2a, 0x30, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x68, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a,
	0x06, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x44, 0x35,
	0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45,
	0x44, 0x10, 0x02, 0x32, 0xcf, 0x0d, 0x0a, 0x0e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5e, 0x0a, 0x0b, 0x48, 0x61, 0x73, 0x68, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x0b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x48,
	0x61, 0x73, 0x68, 0x65, 0x73, 0x12, 0x26, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x0b, 0x57, 0x72, 0x69, 0x74, 0x65, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x73, 0x12, 0x26, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x73, 0x12, 0x24, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x30, 0x01, 0x12, 0x64, 0x0a, 0x11, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x12, 0x2c, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x30,
	0x01, 0x12, 0x7d, 0x0a, 0x14, 0x57, 0x72, 0x69, 0x74, 0x65, 0x53, 0x70, 0x61, 0x72, 0x73, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53,
	0x70, 0x61, 0x72, 0x73, 0x65, 0x44, 0x65, 0x64, 0x75, 0x70, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x53, 0x70, 0x61, 0x72, 0x73, 0x65, 0x44, 0x65, 0x64, 0x75, 0x70, 0x65, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x7a, 0x0a, 0x13, 0x52, 0x65, 0x61, 0x64, 0x53, 0x70, 0x61, 0x72, 0x73, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x30, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x70, 0x61,
	0x72, 0x73, 0x65, 0x44, 0x65, 0x64, 0x75, 0x70, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65,
	0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53,
	0x70, 0x61, 0x72, 0x73, 0x65, 0x44, 0x65, 0x64, 0x75, 0x70, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x76, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x44, 0x65, 0x64, 0x75, 0x70,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x2d, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x44,
	0x61, 0x74, 0x61, 0x44, 0x65, 0x64, 0x75, 0x70, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61,
	0x74, 0x61, 0x44, 0x65, 0x64, 0x75, 0x70, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x70, 0x61, 0x72, 0x73,
	0x65, 0x44, 0x65, 0x64, 0x75, 0x70, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x2b, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x53, 0x70, 0x61, 0x72, 0x73, 0x65, 0x44, 0x65, 0x64, 0x75, 0x70, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x70,
	0x61, 0x72, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x50, 0x30, 0x01,
	0x12, 0x6e, 0x0a, 0x13, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x2a, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x6a, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x73, 0x12, 0x2a, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2b, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x11,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2c, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75,
	0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2d, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d,
	0x0a, 0x10, 0x50, 0x61, 0x75, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2b, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x75, 0x73, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2c, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x75, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a,
	0x0c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x2c, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x30, 0x01, 0x12, 0x6d,
	0x0a, 0x10, 0x41, 0x64, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x2b, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2c, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x76, 0x0a,
	0x13, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x2e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x30, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2f, 0x73, 0x64,
	0x66, 0x73, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2d, 0x67, 0x6f, 0x2f, 0x73, 0x64, 0x66,
	0x73, 0x2f, 0x3b, 0x73, 0x64, 0x66, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_Storage_proto_rawDescOnce sync.Once
	file_Storage_proto_rawDescData = file_Storage_proto_rawDesc
)

func file_Storage_proto_rawDescGZIP() []byte {
	file_Storage_proto_rawDescOnce.Do(func() {
		file_Storage_proto_rawDescData = protoimpl.X.CompressGZIP(file_Storage_proto_rawDescData)
	})
	return file_Storage_proto_rawDescData
}

var file_Storage_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_Storage_proto_msgTypes = make([]protoimpl.MessageInfo, 35)
var file_Storage_proto_goTypes = []interface{}{
	(SparseDataFlags)(0),                   // 0: org.opendedup.grpc.SparseDataFlags
	(ActionType)(0),                        // 1: org.opendedup.grpc.actionType
	(Hashtype)(0),                          // 2: org.opendedup.grpc.hashtype
	(*CheckHashesRequest)(nil),             // 3: org.opendedup.grpc.CheckHashesRequest
	(*RestoreArchivesRequest)(nil),         // 4: org.opendedup.grpc.RestoreArchivesRequest
	(*RestoreArchivesResponse)(nil),        // 5: org.opendedup.grpc.RestoreArchivesResponse
	(*CheckHashesResponse)(nil),            // 6: org.opendedup.grpc.CheckHashesResponse
	(*FileReplicationRequest)(nil),         // 7: org.opendedup.grpc.FileReplicationRequest
	(*AddReplicaSourceRequest)(nil),        // 8: org.opendedup.grpc.AddReplicaSourceRequest
	(*AddReplicaSourceResponse)(nil),       // 9: org.opendedup.grpc.AddReplicaSourceResponse
	(*RemoveReplicaSourceRequest)(nil),     // 10: org.opendedup.grpc.RemoveReplicaSourceRequest
	(*RemoveReplicaSourceResponse)(nil),    // 11: org.opendedup.grpc.RemoveReplicaSourceResponse
	(*FileReplicationResponse)(nil),        // 12: org.opendedup.grpc.FileReplicationResponse
	(*MetaDataDedupeFileRequest)(nil),      // 13: org.opendedup.grpc.MetaDataDedupeFileRequest
	(*MetaDataDedupeFileResponse)(nil),     // 14: org.opendedup.grpc.MetaDataDedupeFileResponse
	(*SparseDedupeFileRequest)(nil),        // 15: org.opendedup.grpc.SparseDedupeFileRequest
	(*SparseDedupeFileResponse)(nil),       // 16: org.opendedup.grpc.SparseDedupeFileResponse
	(*ChunkResponse)(nil),                  // 17: org.opendedup.grpc.ChunkResponse
	(*ChunkEntry)(nil),                     // 18: org.opendedup.grpc.ChunkEntry
	(*WriteChunksRequest)(nil),             // 19: org.opendedup.grpc.WriteChunksRequest
	(*WriteChunksResponse)(nil),            // 20: org.opendedup.grpc.WriteChunksResponse
	(*GetChunksRequest)(nil),               // 21: org.opendedup.grpc.GetChunksRequest
	(*HashingInfoRequest)(nil),             // 22: org.opendedup.grpc.HashingInfoRequest
	(*HashLocPairP)(nil),                   // 23: org.opendedup.grpc.HashLocPairP
	(*PauseReplicationRequest)(nil),        // 24: org.opendedup.grpc.PauseReplicationRequest
	(*PauseReplicationResponse)(nil),       // 25: org.opendedup.grpc.PauseReplicationResponse
	(*CancelReplicationRequest)(nil),       // 26: org.opendedup.grpc.CancelReplicationRequest
	(*CancelReplicationResponse)(nil),      // 27: org.opendedup.grpc.CancelReplicationResponse
	(*SparseDataChunkP)(nil),               // 28: org.opendedup.grpc.SparseDataChunkP
	(*SparseDedupeChunkWriteRequest)(nil),  // 29: org.opendedup.grpc.SparseDedupeChunkWriteRequest
	(*SparseDedupeChunkWriteResponse)(nil), // 30: org.opendedup.grpc.SparseDedupeChunkWriteResponse
	(*SparseDedupeChunkReadRequest)(nil),   // 31: org.opendedup.grpc.SparseDedupeChunkReadRequest
	(*SparseDedupeChunkReadResponse)(nil),  // 32: org.opendedup.grpc.SparseDedupeChunkReadResponse
	(*HashingInfoResponse)(nil),            // 33: org.opendedup.grpc.HashingInfoResponse
	(*InsertRecord)(nil),                   // 34: org.opendedup.grpc.InsertRecord
	(*VolumeEvent)(nil),                    // 35: org.opendedup.grpc.VolumeEvent
	(*VolumeEventListenRequest)(nil),       // 36: org.opendedup.grpc.VolumeEventListenRequest
	nil,                                    // 37: org.opendedup.grpc.SparseDataChunkP.ArEntry
	(ErrorCodes)(0),                        // 38: org.opendedup.grpc.errorCodes
	(*FileInfoResponse)(nil),               // 39: org.opendedup.grpc.FileInfoResponse
}
var file_Storage_proto_depIdxs = []int32{
	38, // 0: org.opendedup.grpc.RestoreArchivesResponse.errorCode:type_name -> org.opendedup.grpc.errorCodes
	38, // 1: org.opendedup.grpc.CheckHashesResponse.errorCode:type_name -> org.opendedup.grpc.errorCodes
	38, // 2: org.opendedup.grpc.AddReplicaSourceResponse.errorCode:type_name -> org.opendedup.grpc.errorCodes
	38, // 3: org.opendedup.grpc.RemoveReplicaSourceResponse.errorCode:type_name -> org.opendedup.grpc.errorCodes
	38, // 4: org.opendedup.grpc.FileReplicationResponse.errorCode:type_name -> org.opendedup.grpc.errorCodes
	39, // 5: org.opendedup.grpc.MetaDataDedupeFileResponse.file:type_name -> org.opendedup.grpc.FileInfoResponse
	38, // 6: org.opendedup.grpc.MetaDataDedupeFileResponse.errorCode:type_name -> org.opendedup.grpc.errorCodes
	28, // 7: org.opendedup.grpc.SparseDedupeFileResponse.chunks:type_name -> org.opendedup.grpc.SparseDataChunkP
	38, // 8: org.opendedup.grpc.SparseDedupeFileResponse.errorCode:type_name -> org.opendedup.grpc.errorCodes
	38, // 9: org.opendedup.grpc.ChunkResponse.errorCode:type_name -> org.opendedup.grpc.errorCodes
	38, // 10: org.opendedup.grpc.ChunkEntry.errorCode:type_name -> org.opendedup.grpc.errorCodes
	18, // 11: org.opendedup.grpc.WriteChunksRequest.chunks:type_name -> org.opendedup.grpc.ChunkEntry
	38, // 12: org.opendedup.grpc.WriteChunksResponse.errorCode:type_name -> org.opendedup.grpc.errorCodes
	34, // 13: org.opendedup.grpc.WriteChunksResponse.insertRecords:type_name -> org.opendedup.grpc.InsertRecord
	18, // 14: org.opendedup.grpc.GetChunksRequest.chunks:type_name -> org.opendedup.grpc.ChunkEntry
	18, // 15: org.opendedup.grpc.HashingInfoRequest.chunks:type_name -> org.opendedup.grpc.ChunkEntry
	38, // 16: org.opendedup.grpc.HashingInfoRequest.errorCode:type_name -> org.opendedup.grpc.errorCodes
	38, // 17: org.opendedup.grpc.PauseReplicationResponse.errorCode:type_name -> org.opendedup.grpc.errorCodes
	38, // 18: org.opendedup.grpc.CancelReplicationResponse.errorCode:type_name -> org.opendedup.grpc.errorCodes
	0,  // 19: org.opendedup.grpc.SparseDataChunkP.flags:type_name -> org.opendedup.grpc.SparseDataFlags
	37, // 20: org.opendedup.grpc.SparseDataChunkP.ar:type_name -> org.opendedup.grpc.SparseDataChunkP.ArEntry
	38, // 21: org.opendedup.grpc.SparseDataChunkP.errorCode:type_name -> org.opendedup.grpc.errorCodes
	28, // 22: org.opendedup.grpc.SparseDedupeChunkWriteRequest.chunk:type_name -> org.opendedup.grpc.SparseDataChunkP
	38, // 23: org.opendedup.grpc.SparseDedupeChunkWriteResponse.errorCode:type_name -> org.opendedup.grpc.errorCodes
	38, // 24: org.opendedup.grpc.SparseDedupeChunkReadResponse.errorCode:type_name -> org.opendedup.grpc.errorCodes
	28, // 25: org.opendedup.grpc.SparseDedupeChunkReadResponse.chunk:type_name -> org.opendedup.grpc.SparseDataChunkP
	2,  // 26: org.opendedup.grpc.HashingInfoResponse.hashtype:type_name -> org.opendedup.grpc.hashtype
	38, // 27: org.opendedup.grpc.HashingInfoResponse.errorCode:type_name -> org.opendedup.grpc.errorCodes
	39, // 28: org.opendedup.grpc.VolumeEvent.file:type_name -> org.opendedup.grpc.FileInfoResponse
	1,  // 29: org.opendedup.grpc.VolumeEvent.actionType:type_name -> org.opendedup.grpc.actionType
	38, // 30: org.opendedup.grpc.VolumeEvent.errorCode:type_name -> org.opendedup.grpc.errorCodes
	23, // 31: org.opendedup.grpc.SparseDataChunkP.ArEntry.value:type_name -> org.opendedup.grpc.HashLocPairP
	22, // 32: org.opendedup.grpc.StorageService.HashingInfo:input_type -> org.opendedup.grpc.HashingInfoRequest
	3,  // 33: org.opendedup.grpc.StorageService.CheckHashes:input_type -> org.opendedup.grpc.CheckHashesRequest
	19, // 34: org.opendedup.grpc.StorageService.WriteChunks:input_type -> org.opendedup.grpc.WriteChunksRequest
	21, // 35: org.opendedup.grpc.StorageService.GetChunks:input_type -> org.opendedup.grpc.GetChunksRequest
	36, // 36: org.opendedup.grpc.StorageService.SubscribeToVolume:input_type -> org.opendedup.grpc.VolumeEventListenRequest
	29, // 37: org.opendedup.grpc.StorageService.WriteSparseDataChunk:input_type -> org.opendedup.grpc.SparseDedupeChunkWriteRequest
	31, // 38: org.opendedup.grpc.StorageService.ReadSparseDataChunk:input_type -> org.opendedup.grpc.SparseDedupeChunkReadRequest
	13, // 39: org.opendedup.grpc.StorageService.GetMetaDataDedupeFile:input_type -> org.opendedup.grpc.MetaDataDedupeFileRequest
	15, // 40: org.opendedup.grpc.StorageService.GetSparseDedupeFile:input_type -> org.opendedup.grpc.SparseDedupeFileRequest
	7,  // 41: org.opendedup.grpc.StorageService.ReplicateRemoteFile:input_type -> org.opendedup.grpc.FileReplicationRequest
	4,  // 42: org.opendedup.grpc.StorageService.RestoreArchives:input_type -> org.opendedup.grpc.RestoreArchivesRequest
	26, // 43: org.opendedup.grpc.StorageService.CancelReplication:input_type -> org.opendedup.grpc.CancelReplicationRequest
	24, // 44: org.opendedup.grpc.StorageService.PauseReplication:input_type -> org.opendedup.grpc.PauseReplicationRequest
	36, // 45: org.opendedup.grpc.StorageService.ListReplLogs:input_type -> org.opendedup.grpc.VolumeEventListenRequest
	8,  // 46: org.opendedup.grpc.StorageService.AddReplicaSource:input_type -> org.opendedup.grpc.AddReplicaSourceRequest
	10, // 47: org.opendedup.grpc.StorageService.RemoveReplicaSource:input_type -> org.opendedup.grpc.RemoveReplicaSourceRequest
	33, // 48: org.opendedup.grpc.StorageService.HashingInfo:output_type -> org.opendedup.grpc.HashingInfoResponse
	6,  // 49: org.opendedup.grpc.StorageService.CheckHashes:output_type -> org.opendedup.grpc.CheckHashesResponse
	20, // 50: org.opendedup.grpc.StorageService.WriteChunks:output_type -> org.opendedup.grpc.WriteChunksResponse
	18, // 51: org.opendedup.grpc.StorageService.GetChunks:output_type -> org.opendedup.grpc.ChunkEntry
	35, // 52: org.opendedup.grpc.StorageService.SubscribeToVolume:output_type -> org.opendedup.grpc.VolumeEvent
	30, // 53: org.opendedup.grpc.StorageService.WriteSparseDataChunk:output_type -> org.opendedup.grpc.SparseDedupeChunkWriteResponse
	32, // 54: org.opendedup.grpc.StorageService.ReadSparseDataChunk:output_type -> org.opendedup.grpc.SparseDedupeChunkReadResponse
	14, // 55: org.opendedup.grpc.StorageService.GetMetaDataDedupeFile:output_type -> org.opendedup.grpc.MetaDataDedupeFileResponse
	28, // 56: org.opendedup.grpc.StorageService.GetSparseDedupeFile:output_type -> org.opendedup.grpc.SparseDataChunkP
	12, // 57: org.opendedup.grpc.StorageService.ReplicateRemoteFile:output_type -> org.opendedup.grpc.FileReplicationResponse
	5,  // 58: org.opendedup.grpc.StorageService.RestoreArchives:output_type -> org.opendedup.grpc.RestoreArchivesResponse
	27, // 59: org.opendedup.grpc.StorageService.CancelReplication:output_type -> org.opendedup.grpc.CancelReplicationResponse
	25, // 60: org.opendedup.grpc.StorageService.PauseReplication:output_type -> org.opendedup.grpc.PauseReplicationResponse
	35, // 61: org.opendedup.grpc.StorageService.ListReplLogs:output_type -> org.opendedup.grpc.VolumeEvent
	9,  // 62: org.opendedup.grpc.StorageService.AddReplicaSource:output_type -> org.opendedup.grpc.AddReplicaSourceResponse
	11, // 63: org.opendedup.grpc.StorageService.RemoveReplicaSource:output_type -> org.opendedup.grpc.RemoveReplicaSourceResponse
	48, // [48:64] is the sub-list for method output_type
	32, // [32:48] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_Storage_proto_init() }
func file_Storage_proto_init() {
	if File_Storage_proto != nil {
		return
	}
	file_FileInfo_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_Storage_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckHashesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Storage_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestoreArchivesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Storage_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestoreArchivesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Storage_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckHashesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Storage_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileReplicationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Storage_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddReplicaSourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Storage_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddReplicaSourceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Storage_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveReplicaSourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Storage_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveReplicaSourceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Storage_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileReplicationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Storage_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetaDataDedupeFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Storage_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetaDataDedupeFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Storage_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SparseDedupeFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Storage_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SparseDedupeFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Storage_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChunkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Storage_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChunkEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Storage_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteChunksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Storage_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteChunksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Storage_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChunksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Storage_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HashingInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Storage_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HashLocPairP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Storage_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PauseReplicationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Storage_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PauseReplicationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Storage_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelReplicationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Storage_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelReplicationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Storage_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SparseDataChunkP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Storage_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SparseDedupeChunkWriteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Storage_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SparseDedupeChunkWriteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Storage_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SparseDedupeChunkReadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Storage_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SparseDedupeChunkReadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Storage_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HashingInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Storage_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Storage_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Storage_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeEventListenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_Storage_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   35,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_Storage_proto_goTypes,
		DependencyIndexes: file_Storage_proto_depIdxs,
		EnumInfos:         file_Storage_proto_enumTypes,
		MessageInfos:      file_Storage_proto_msgTypes,
	}.Build()
	File_Storage_proto = out.File
	file_Storage_proto_rawDesc = nil
	file_Storage_proto_goTypes = nil
	file_Storage_proto_depIdxs = nil
}
