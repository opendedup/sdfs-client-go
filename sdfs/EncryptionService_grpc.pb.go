// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.0
// source: EncryptionService.proto

package sdfs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EncryptionServiceClient is the client API for EncryptionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EncryptionServiceClient interface {
	ValidateCertificate(ctx context.Context, in *EncryptionKeyVerifyRequest, opts ...grpc.CallOption) (*EncryptionKeyVerifyResponse, error)
	ExportServerCertificate(ctx context.Context, in *ExportServerCertRequest, opts ...grpc.CallOption) (*ExportServerCertResponse, error)
	DeleteExportedCert(ctx context.Context, in *DeleteExportedCertRequest, opts ...grpc.CallOption) (*DeleteExportedCertResponse, error)
}

type encryptionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEncryptionServiceClient(cc grpc.ClientConnInterface) EncryptionServiceClient {
	return &encryptionServiceClient{cc}
}

func (c *encryptionServiceClient) ValidateCertificate(ctx context.Context, in *EncryptionKeyVerifyRequest, opts ...grpc.CallOption) (*EncryptionKeyVerifyResponse, error) {
	out := new(EncryptionKeyVerifyResponse)
	err := c.cc.Invoke(ctx, "/org.opendedup.grpc.EncryptionService/ValidateCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *encryptionServiceClient) ExportServerCertificate(ctx context.Context, in *ExportServerCertRequest, opts ...grpc.CallOption) (*ExportServerCertResponse, error) {
	out := new(ExportServerCertResponse)
	err := c.cc.Invoke(ctx, "/org.opendedup.grpc.EncryptionService/ExportServerCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *encryptionServiceClient) DeleteExportedCert(ctx context.Context, in *DeleteExportedCertRequest, opts ...grpc.CallOption) (*DeleteExportedCertResponse, error) {
	out := new(DeleteExportedCertResponse)
	err := c.cc.Invoke(ctx, "/org.opendedup.grpc.EncryptionService/DeleteExportedCert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EncryptionServiceServer is the server API for EncryptionService service.
// All implementations must embed UnimplementedEncryptionServiceServer
// for forward compatibility
type EncryptionServiceServer interface {
	ValidateCertificate(context.Context, *EncryptionKeyVerifyRequest) (*EncryptionKeyVerifyResponse, error)
	ExportServerCertificate(context.Context, *ExportServerCertRequest) (*ExportServerCertResponse, error)
	DeleteExportedCert(context.Context, *DeleteExportedCertRequest) (*DeleteExportedCertResponse, error)
	mustEmbedUnimplementedEncryptionServiceServer()
}

// UnimplementedEncryptionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEncryptionServiceServer struct {
}

func (UnimplementedEncryptionServiceServer) ValidateCertificate(context.Context, *EncryptionKeyVerifyRequest) (*EncryptionKeyVerifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateCertificate not implemented")
}
func (UnimplementedEncryptionServiceServer) ExportServerCertificate(context.Context, *ExportServerCertRequest) (*ExportServerCertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportServerCertificate not implemented")
}
func (UnimplementedEncryptionServiceServer) DeleteExportedCert(context.Context, *DeleteExportedCertRequest) (*DeleteExportedCertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExportedCert not implemented")
}
func (UnimplementedEncryptionServiceServer) mustEmbedUnimplementedEncryptionServiceServer() {}

// UnsafeEncryptionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EncryptionServiceServer will
// result in compilation errors.
type UnsafeEncryptionServiceServer interface {
	mustEmbedUnimplementedEncryptionServiceServer()
}

func RegisterEncryptionServiceServer(s grpc.ServiceRegistrar, srv EncryptionServiceServer) {
	s.RegisterService(&EncryptionService_ServiceDesc, srv)
}

func _EncryptionService_ValidateCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncryptionKeyVerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncryptionServiceServer).ValidateCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.opendedup.grpc.EncryptionService/ValidateCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncryptionServiceServer).ValidateCertificate(ctx, req.(*EncryptionKeyVerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EncryptionService_ExportServerCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportServerCertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncryptionServiceServer).ExportServerCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.opendedup.grpc.EncryptionService/ExportServerCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncryptionServiceServer).ExportServerCertificate(ctx, req.(*ExportServerCertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EncryptionService_DeleteExportedCert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExportedCertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncryptionServiceServer).DeleteExportedCert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.opendedup.grpc.EncryptionService/DeleteExportedCert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncryptionServiceServer).DeleteExportedCert(ctx, req.(*DeleteExportedCertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EncryptionService_ServiceDesc is the grpc.ServiceDesc for EncryptionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EncryptionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "org.opendedup.grpc.EncryptionService",
	HandlerType: (*EncryptionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ValidateCertificate",
			Handler:    _EncryptionService_ValidateCertificate_Handler,
		},
		{
			MethodName: "ExportServerCertificate",
			Handler:    _EncryptionService_ExportServerCertificate_Handler,
		},
		{
			MethodName: "DeleteExportedCert",
			Handler:    _EncryptionService_DeleteExportedCert_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "EncryptionService.proto",
}
